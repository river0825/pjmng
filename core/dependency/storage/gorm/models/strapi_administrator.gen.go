// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newStrapiAdministrator(db *gorm.DB, opts ...gen.DOOption) strapiAdministrator {
	_strapiAdministrator := strapiAdministrator{}

	_strapiAdministrator.strapiAdministratorDo.UseDB(db, opts...)
	_strapiAdministrator.strapiAdministratorDo.UseModel(&table.StrapiAdministrator{})

	tableName := _strapiAdministrator.strapiAdministratorDo.TableName()
	_strapiAdministrator.ALL = field.NewAsterisk(tableName)
	_strapiAdministrator.ID = field.NewInt32(tableName, "id")
	_strapiAdministrator.Firstname = field.NewString(tableName, "firstname")
	_strapiAdministrator.Lastname = field.NewString(tableName, "lastname")
	_strapiAdministrator.Username = field.NewString(tableName, "username")
	_strapiAdministrator.Email = field.NewString(tableName, "email")
	_strapiAdministrator.Password = field.NewString(tableName, "password")
	_strapiAdministrator.ResetPasswordToken = field.NewString(tableName, "resetPasswordToken")
	_strapiAdministrator.RegistrationToken = field.NewString(tableName, "registrationToken")
	_strapiAdministrator.IsActive = field.NewBool(tableName, "isActive")
	_strapiAdministrator.Blocked = field.NewBool(tableName, "blocked")
	_strapiAdministrator.PreferedLanguage = field.NewString(tableName, "preferedLanguage")

	_strapiAdministrator.fillFieldMap()

	return _strapiAdministrator
}

type strapiAdministrator struct {
	strapiAdministratorDo

	ALL                field.Asterisk
	ID                 field.Int32
	Firstname          field.String
	Lastname           field.String
	Username           field.String
	Email              field.String
	Password           field.String
	ResetPasswordToken field.String
	RegistrationToken  field.String
	IsActive           field.Bool
	Blocked            field.Bool
	PreferedLanguage   field.String

	fieldMap map[string]field.Expr
}

func (s strapiAdministrator) Table(newTableName string) *strapiAdministrator {
	s.strapiAdministratorDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s strapiAdministrator) As(alias string) *strapiAdministrator {
	s.strapiAdministratorDo.DO = *(s.strapiAdministratorDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *strapiAdministrator) updateTableName(table string) *strapiAdministrator {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Firstname = field.NewString(table, "firstname")
	s.Lastname = field.NewString(table, "lastname")
	s.Username = field.NewString(table, "username")
	s.Email = field.NewString(table, "email")
	s.Password = field.NewString(table, "password")
	s.ResetPasswordToken = field.NewString(table, "resetPasswordToken")
	s.RegistrationToken = field.NewString(table, "registrationToken")
	s.IsActive = field.NewBool(table, "isActive")
	s.Blocked = field.NewBool(table, "blocked")
	s.PreferedLanguage = field.NewString(table, "preferedLanguage")

	s.fillFieldMap()

	return s
}

func (s *strapiAdministrator) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *strapiAdministrator) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["firstname"] = s.Firstname
	s.fieldMap["lastname"] = s.Lastname
	s.fieldMap["username"] = s.Username
	s.fieldMap["email"] = s.Email
	s.fieldMap["password"] = s.Password
	s.fieldMap["resetPasswordToken"] = s.ResetPasswordToken
	s.fieldMap["registrationToken"] = s.RegistrationToken
	s.fieldMap["isActive"] = s.IsActive
	s.fieldMap["blocked"] = s.Blocked
	s.fieldMap["preferedLanguage"] = s.PreferedLanguage
}

func (s strapiAdministrator) clone(db *gorm.DB) strapiAdministrator {
	s.strapiAdministratorDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s strapiAdministrator) replaceDB(db *gorm.DB) strapiAdministrator {
	s.strapiAdministratorDo.ReplaceDB(db)
	return s
}

type strapiAdministratorDo struct{ gen.DO }

type IStrapiAdministratorDo interface {
	gen.SubQuery
	Debug() IStrapiAdministratorDo
	WithContext(ctx context.Context) IStrapiAdministratorDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStrapiAdministratorDo
	WriteDB() IStrapiAdministratorDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStrapiAdministratorDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStrapiAdministratorDo
	Not(conds ...gen.Condition) IStrapiAdministratorDo
	Or(conds ...gen.Condition) IStrapiAdministratorDo
	Select(conds ...field.Expr) IStrapiAdministratorDo
	Where(conds ...gen.Condition) IStrapiAdministratorDo
	Order(conds ...field.Expr) IStrapiAdministratorDo
	Distinct(cols ...field.Expr) IStrapiAdministratorDo
	Omit(cols ...field.Expr) IStrapiAdministratorDo
	Join(table schema.Tabler, on ...field.Expr) IStrapiAdministratorDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStrapiAdministratorDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStrapiAdministratorDo
	Group(cols ...field.Expr) IStrapiAdministratorDo
	Having(conds ...gen.Condition) IStrapiAdministratorDo
	Limit(limit int) IStrapiAdministratorDo
	Offset(offset int) IStrapiAdministratorDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStrapiAdministratorDo
	Unscoped() IStrapiAdministratorDo
	Create(values ...*table.StrapiAdministrator) error
	CreateInBatches(values []*table.StrapiAdministrator, batchSize int) error
	Save(values ...*table.StrapiAdministrator) error
	First() (*table.StrapiAdministrator, error)
	Take() (*table.StrapiAdministrator, error)
	Last() (*table.StrapiAdministrator, error)
	Find() ([]*table.StrapiAdministrator, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.StrapiAdministrator, err error)
	FindInBatches(result *[]*table.StrapiAdministrator, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.StrapiAdministrator) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStrapiAdministratorDo
	Assign(attrs ...field.AssignExpr) IStrapiAdministratorDo
	Joins(fields ...field.RelationField) IStrapiAdministratorDo
	Preload(fields ...field.RelationField) IStrapiAdministratorDo
	FirstOrInit() (*table.StrapiAdministrator, error)
	FirstOrCreate() (*table.StrapiAdministrator, error)
	FindByPage(offset int, limit int) (result []*table.StrapiAdministrator, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStrapiAdministratorDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s strapiAdministratorDo) Debug() IStrapiAdministratorDo {
	return s.withDO(s.DO.Debug())
}

func (s strapiAdministratorDo) WithContext(ctx context.Context) IStrapiAdministratorDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s strapiAdministratorDo) ReadDB() IStrapiAdministratorDo {
	return s.Clauses(dbresolver.Read)
}

func (s strapiAdministratorDo) WriteDB() IStrapiAdministratorDo {
	return s.Clauses(dbresolver.Write)
}

func (s strapiAdministratorDo) Session(config *gorm.Session) IStrapiAdministratorDo {
	return s.withDO(s.DO.Session(config))
}

func (s strapiAdministratorDo) Clauses(conds ...clause.Expression) IStrapiAdministratorDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s strapiAdministratorDo) Returning(value interface{}, columns ...string) IStrapiAdministratorDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s strapiAdministratorDo) Not(conds ...gen.Condition) IStrapiAdministratorDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s strapiAdministratorDo) Or(conds ...gen.Condition) IStrapiAdministratorDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s strapiAdministratorDo) Select(conds ...field.Expr) IStrapiAdministratorDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s strapiAdministratorDo) Where(conds ...gen.Condition) IStrapiAdministratorDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s strapiAdministratorDo) Order(conds ...field.Expr) IStrapiAdministratorDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s strapiAdministratorDo) Distinct(cols ...field.Expr) IStrapiAdministratorDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s strapiAdministratorDo) Omit(cols ...field.Expr) IStrapiAdministratorDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s strapiAdministratorDo) Join(table schema.Tabler, on ...field.Expr) IStrapiAdministratorDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s strapiAdministratorDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStrapiAdministratorDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s strapiAdministratorDo) RightJoin(table schema.Tabler, on ...field.Expr) IStrapiAdministratorDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s strapiAdministratorDo) Group(cols ...field.Expr) IStrapiAdministratorDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s strapiAdministratorDo) Having(conds ...gen.Condition) IStrapiAdministratorDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s strapiAdministratorDo) Limit(limit int) IStrapiAdministratorDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s strapiAdministratorDo) Offset(offset int) IStrapiAdministratorDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s strapiAdministratorDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStrapiAdministratorDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s strapiAdministratorDo) Unscoped() IStrapiAdministratorDo {
	return s.withDO(s.DO.Unscoped())
}

func (s strapiAdministratorDo) Create(values ...*table.StrapiAdministrator) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s strapiAdministratorDo) CreateInBatches(values []*table.StrapiAdministrator, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s strapiAdministratorDo) Save(values ...*table.StrapiAdministrator) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s strapiAdministratorDo) First() (*table.StrapiAdministrator, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.StrapiAdministrator), nil
	}
}

func (s strapiAdministratorDo) Take() (*table.StrapiAdministrator, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.StrapiAdministrator), nil
	}
}

func (s strapiAdministratorDo) Last() (*table.StrapiAdministrator, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.StrapiAdministrator), nil
	}
}

func (s strapiAdministratorDo) Find() ([]*table.StrapiAdministrator, error) {
	result, err := s.DO.Find()
	return result.([]*table.StrapiAdministrator), err
}

func (s strapiAdministratorDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.StrapiAdministrator, err error) {
	buf := make([]*table.StrapiAdministrator, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s strapiAdministratorDo) FindInBatches(result *[]*table.StrapiAdministrator, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s strapiAdministratorDo) Attrs(attrs ...field.AssignExpr) IStrapiAdministratorDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s strapiAdministratorDo) Assign(attrs ...field.AssignExpr) IStrapiAdministratorDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s strapiAdministratorDo) Joins(fields ...field.RelationField) IStrapiAdministratorDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s strapiAdministratorDo) Preload(fields ...field.RelationField) IStrapiAdministratorDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s strapiAdministratorDo) FirstOrInit() (*table.StrapiAdministrator, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.StrapiAdministrator), nil
	}
}

func (s strapiAdministratorDo) FirstOrCreate() (*table.StrapiAdministrator, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.StrapiAdministrator), nil
	}
}

func (s strapiAdministratorDo) FindByPage(offset int, limit int) (result []*table.StrapiAdministrator, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s strapiAdministratorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s strapiAdministratorDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s strapiAdministratorDo) Delete(models ...*table.StrapiAdministrator) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *strapiAdministratorDo) withDO(do gen.Dao) *strapiAdministratorDo {
	s.DO = *do.(*gen.DO)
	return s
}
