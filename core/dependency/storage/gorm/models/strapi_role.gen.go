// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newStrapiRole(db *gorm.DB, opts ...gen.DOOption) strapiRole {
	_strapiRole := strapiRole{}

	_strapiRole.strapiRoleDo.UseDB(db, opts...)
	_strapiRole.strapiRoleDo.UseModel(&table.StrapiRole{})

	tableName := _strapiRole.strapiRoleDo.TableName()
	_strapiRole.ALL = field.NewAsterisk(tableName)
	_strapiRole.ID = field.NewInt32(tableName, "id")
	_strapiRole.Name = field.NewString(tableName, "name")
	_strapiRole.Code = field.NewString(tableName, "code")
	_strapiRole.Description = field.NewString(tableName, "description")
	_strapiRole.CreatedAt = field.NewTime(tableName, "created_at")
	_strapiRole.UpdatedAt = field.NewTime(tableName, "updated_at")

	_strapiRole.fillFieldMap()

	return _strapiRole
}

type strapiRole struct {
	strapiRoleDo

	ALL         field.Asterisk
	ID          field.Int32
	Name        field.String
	Code        field.String
	Description field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (s strapiRole) Table(newTableName string) *strapiRole {
	s.strapiRoleDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s strapiRole) As(alias string) *strapiRole {
	s.strapiRoleDo.DO = *(s.strapiRoleDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *strapiRole) updateTableName(table string) *strapiRole {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Name = field.NewString(table, "name")
	s.Code = field.NewString(table, "code")
	s.Description = field.NewString(table, "description")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *strapiRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *strapiRole) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["code"] = s.Code
	s.fieldMap["description"] = s.Description
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s strapiRole) clone(db *gorm.DB) strapiRole {
	s.strapiRoleDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s strapiRole) replaceDB(db *gorm.DB) strapiRole {
	s.strapiRoleDo.ReplaceDB(db)
	return s
}

type strapiRoleDo struct{ gen.DO }

type IStrapiRoleDo interface {
	gen.SubQuery
	Debug() IStrapiRoleDo
	WithContext(ctx context.Context) IStrapiRoleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStrapiRoleDo
	WriteDB() IStrapiRoleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStrapiRoleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStrapiRoleDo
	Not(conds ...gen.Condition) IStrapiRoleDo
	Or(conds ...gen.Condition) IStrapiRoleDo
	Select(conds ...field.Expr) IStrapiRoleDo
	Where(conds ...gen.Condition) IStrapiRoleDo
	Order(conds ...field.Expr) IStrapiRoleDo
	Distinct(cols ...field.Expr) IStrapiRoleDo
	Omit(cols ...field.Expr) IStrapiRoleDo
	Join(table schema.Tabler, on ...field.Expr) IStrapiRoleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStrapiRoleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStrapiRoleDo
	Group(cols ...field.Expr) IStrapiRoleDo
	Having(conds ...gen.Condition) IStrapiRoleDo
	Limit(limit int) IStrapiRoleDo
	Offset(offset int) IStrapiRoleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStrapiRoleDo
	Unscoped() IStrapiRoleDo
	Create(values ...*table.StrapiRole) error
	CreateInBatches(values []*table.StrapiRole, batchSize int) error
	Save(values ...*table.StrapiRole) error
	First() (*table.StrapiRole, error)
	Take() (*table.StrapiRole, error)
	Last() (*table.StrapiRole, error)
	Find() ([]*table.StrapiRole, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.StrapiRole, err error)
	FindInBatches(result *[]*table.StrapiRole, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.StrapiRole) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStrapiRoleDo
	Assign(attrs ...field.AssignExpr) IStrapiRoleDo
	Joins(fields ...field.RelationField) IStrapiRoleDo
	Preload(fields ...field.RelationField) IStrapiRoleDo
	FirstOrInit() (*table.StrapiRole, error)
	FirstOrCreate() (*table.StrapiRole, error)
	FindByPage(offset int, limit int) (result []*table.StrapiRole, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStrapiRoleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s strapiRoleDo) Debug() IStrapiRoleDo {
	return s.withDO(s.DO.Debug())
}

func (s strapiRoleDo) WithContext(ctx context.Context) IStrapiRoleDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s strapiRoleDo) ReadDB() IStrapiRoleDo {
	return s.Clauses(dbresolver.Read)
}

func (s strapiRoleDo) WriteDB() IStrapiRoleDo {
	return s.Clauses(dbresolver.Write)
}

func (s strapiRoleDo) Session(config *gorm.Session) IStrapiRoleDo {
	return s.withDO(s.DO.Session(config))
}

func (s strapiRoleDo) Clauses(conds ...clause.Expression) IStrapiRoleDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s strapiRoleDo) Returning(value interface{}, columns ...string) IStrapiRoleDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s strapiRoleDo) Not(conds ...gen.Condition) IStrapiRoleDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s strapiRoleDo) Or(conds ...gen.Condition) IStrapiRoleDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s strapiRoleDo) Select(conds ...field.Expr) IStrapiRoleDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s strapiRoleDo) Where(conds ...gen.Condition) IStrapiRoleDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s strapiRoleDo) Order(conds ...field.Expr) IStrapiRoleDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s strapiRoleDo) Distinct(cols ...field.Expr) IStrapiRoleDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s strapiRoleDo) Omit(cols ...field.Expr) IStrapiRoleDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s strapiRoleDo) Join(table schema.Tabler, on ...field.Expr) IStrapiRoleDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s strapiRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStrapiRoleDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s strapiRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) IStrapiRoleDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s strapiRoleDo) Group(cols ...field.Expr) IStrapiRoleDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s strapiRoleDo) Having(conds ...gen.Condition) IStrapiRoleDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s strapiRoleDo) Limit(limit int) IStrapiRoleDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s strapiRoleDo) Offset(offset int) IStrapiRoleDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s strapiRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStrapiRoleDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s strapiRoleDo) Unscoped() IStrapiRoleDo {
	return s.withDO(s.DO.Unscoped())
}

func (s strapiRoleDo) Create(values ...*table.StrapiRole) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s strapiRoleDo) CreateInBatches(values []*table.StrapiRole, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s strapiRoleDo) Save(values ...*table.StrapiRole) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s strapiRoleDo) First() (*table.StrapiRole, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.StrapiRole), nil
	}
}

func (s strapiRoleDo) Take() (*table.StrapiRole, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.StrapiRole), nil
	}
}

func (s strapiRoleDo) Last() (*table.StrapiRole, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.StrapiRole), nil
	}
}

func (s strapiRoleDo) Find() ([]*table.StrapiRole, error) {
	result, err := s.DO.Find()
	return result.([]*table.StrapiRole), err
}

func (s strapiRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.StrapiRole, err error) {
	buf := make([]*table.StrapiRole, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s strapiRoleDo) FindInBatches(result *[]*table.StrapiRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s strapiRoleDo) Attrs(attrs ...field.AssignExpr) IStrapiRoleDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s strapiRoleDo) Assign(attrs ...field.AssignExpr) IStrapiRoleDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s strapiRoleDo) Joins(fields ...field.RelationField) IStrapiRoleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s strapiRoleDo) Preload(fields ...field.RelationField) IStrapiRoleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s strapiRoleDo) FirstOrInit() (*table.StrapiRole, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.StrapiRole), nil
	}
}

func (s strapiRoleDo) FirstOrCreate() (*table.StrapiRole, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.StrapiRole), nil
	}
}

func (s strapiRoleDo) FindByPage(offset int, limit int) (result []*table.StrapiRole, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s strapiRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s strapiRoleDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s strapiRoleDo) Delete(models ...*table.StrapiRole) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *strapiRoleDo) withDO(do gen.Dao) *strapiRoleDo {
	s.DO = *do.(*gen.DO)
	return s
}
