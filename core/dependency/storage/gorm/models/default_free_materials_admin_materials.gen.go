// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newDefaultFreeMaterialsAdminMaterial(db *gorm.DB, opts ...gen.DOOption) defaultFreeMaterialsAdminMaterial {
	_defaultFreeMaterialsAdminMaterial := defaultFreeMaterialsAdminMaterial{}

	_defaultFreeMaterialsAdminMaterial.defaultFreeMaterialsAdminMaterialDo.UseDB(db, opts...)
	_defaultFreeMaterialsAdminMaterial.defaultFreeMaterialsAdminMaterialDo.UseModel(&table.DefaultFreeMaterialsAdminMaterial{})

	tableName := _defaultFreeMaterialsAdminMaterial.defaultFreeMaterialsAdminMaterialDo.TableName()
	_defaultFreeMaterialsAdminMaterial.ALL = field.NewAsterisk(tableName)
	_defaultFreeMaterialsAdminMaterial.ID = field.NewInt32(tableName, "id")
	_defaultFreeMaterialsAdminMaterial.DefaultFreeMaterialID = field.NewInt32(tableName, "default_free_material_id")
	_defaultFreeMaterialsAdminMaterial.AdminMaterialID = field.NewInt32(tableName, "admin-material_id")

	_defaultFreeMaterialsAdminMaterial.fillFieldMap()

	return _defaultFreeMaterialsAdminMaterial
}

type defaultFreeMaterialsAdminMaterial struct {
	defaultFreeMaterialsAdminMaterialDo

	ALL                   field.Asterisk
	ID                    field.Int32
	DefaultFreeMaterialID field.Int32
	AdminMaterialID       field.Int32

	fieldMap map[string]field.Expr
}

func (d defaultFreeMaterialsAdminMaterial) Table(newTableName string) *defaultFreeMaterialsAdminMaterial {
	d.defaultFreeMaterialsAdminMaterialDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d defaultFreeMaterialsAdminMaterial) As(alias string) *defaultFreeMaterialsAdminMaterial {
	d.defaultFreeMaterialsAdminMaterialDo.DO = *(d.defaultFreeMaterialsAdminMaterialDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *defaultFreeMaterialsAdminMaterial) updateTableName(table string) *defaultFreeMaterialsAdminMaterial {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt32(table, "id")
	d.DefaultFreeMaterialID = field.NewInt32(table, "default_free_material_id")
	d.AdminMaterialID = field.NewInt32(table, "admin-material_id")

	d.fillFieldMap()

	return d
}

func (d *defaultFreeMaterialsAdminMaterial) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *defaultFreeMaterialsAdminMaterial) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 3)
	d.fieldMap["id"] = d.ID
	d.fieldMap["default_free_material_id"] = d.DefaultFreeMaterialID
	d.fieldMap["admin-material_id"] = d.AdminMaterialID
}

func (d defaultFreeMaterialsAdminMaterial) clone(db *gorm.DB) defaultFreeMaterialsAdminMaterial {
	d.defaultFreeMaterialsAdminMaterialDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d defaultFreeMaterialsAdminMaterial) replaceDB(db *gorm.DB) defaultFreeMaterialsAdminMaterial {
	d.defaultFreeMaterialsAdminMaterialDo.ReplaceDB(db)
	return d
}

type defaultFreeMaterialsAdminMaterialDo struct{ gen.DO }

type IDefaultFreeMaterialsAdminMaterialDo interface {
	gen.SubQuery
	Debug() IDefaultFreeMaterialsAdminMaterialDo
	WithContext(ctx context.Context) IDefaultFreeMaterialsAdminMaterialDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDefaultFreeMaterialsAdminMaterialDo
	WriteDB() IDefaultFreeMaterialsAdminMaterialDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDefaultFreeMaterialsAdminMaterialDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDefaultFreeMaterialsAdminMaterialDo
	Not(conds ...gen.Condition) IDefaultFreeMaterialsAdminMaterialDo
	Or(conds ...gen.Condition) IDefaultFreeMaterialsAdminMaterialDo
	Select(conds ...field.Expr) IDefaultFreeMaterialsAdminMaterialDo
	Where(conds ...gen.Condition) IDefaultFreeMaterialsAdminMaterialDo
	Order(conds ...field.Expr) IDefaultFreeMaterialsAdminMaterialDo
	Distinct(cols ...field.Expr) IDefaultFreeMaterialsAdminMaterialDo
	Omit(cols ...field.Expr) IDefaultFreeMaterialsAdminMaterialDo
	Join(table schema.Tabler, on ...field.Expr) IDefaultFreeMaterialsAdminMaterialDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDefaultFreeMaterialsAdminMaterialDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDefaultFreeMaterialsAdminMaterialDo
	Group(cols ...field.Expr) IDefaultFreeMaterialsAdminMaterialDo
	Having(conds ...gen.Condition) IDefaultFreeMaterialsAdminMaterialDo
	Limit(limit int) IDefaultFreeMaterialsAdminMaterialDo
	Offset(offset int) IDefaultFreeMaterialsAdminMaterialDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDefaultFreeMaterialsAdminMaterialDo
	Unscoped() IDefaultFreeMaterialsAdminMaterialDo
	Create(values ...*table.DefaultFreeMaterialsAdminMaterial) error
	CreateInBatches(values []*table.DefaultFreeMaterialsAdminMaterial, batchSize int) error
	Save(values ...*table.DefaultFreeMaterialsAdminMaterial) error
	First() (*table.DefaultFreeMaterialsAdminMaterial, error)
	Take() (*table.DefaultFreeMaterialsAdminMaterial, error)
	Last() (*table.DefaultFreeMaterialsAdminMaterial, error)
	Find() ([]*table.DefaultFreeMaterialsAdminMaterial, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.DefaultFreeMaterialsAdminMaterial, err error)
	FindInBatches(result *[]*table.DefaultFreeMaterialsAdminMaterial, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.DefaultFreeMaterialsAdminMaterial) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDefaultFreeMaterialsAdminMaterialDo
	Assign(attrs ...field.AssignExpr) IDefaultFreeMaterialsAdminMaterialDo
	Joins(fields ...field.RelationField) IDefaultFreeMaterialsAdminMaterialDo
	Preload(fields ...field.RelationField) IDefaultFreeMaterialsAdminMaterialDo
	FirstOrInit() (*table.DefaultFreeMaterialsAdminMaterial, error)
	FirstOrCreate() (*table.DefaultFreeMaterialsAdminMaterial, error)
	FindByPage(offset int, limit int) (result []*table.DefaultFreeMaterialsAdminMaterial, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDefaultFreeMaterialsAdminMaterialDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d defaultFreeMaterialsAdminMaterialDo) Debug() IDefaultFreeMaterialsAdminMaterialDo {
	return d.withDO(d.DO.Debug())
}

func (d defaultFreeMaterialsAdminMaterialDo) WithContext(ctx context.Context) IDefaultFreeMaterialsAdminMaterialDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d defaultFreeMaterialsAdminMaterialDo) ReadDB() IDefaultFreeMaterialsAdminMaterialDo {
	return d.Clauses(dbresolver.Read)
}

func (d defaultFreeMaterialsAdminMaterialDo) WriteDB() IDefaultFreeMaterialsAdminMaterialDo {
	return d.Clauses(dbresolver.Write)
}

func (d defaultFreeMaterialsAdminMaterialDo) Session(config *gorm.Session) IDefaultFreeMaterialsAdminMaterialDo {
	return d.withDO(d.DO.Session(config))
}

func (d defaultFreeMaterialsAdminMaterialDo) Clauses(conds ...clause.Expression) IDefaultFreeMaterialsAdminMaterialDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d defaultFreeMaterialsAdminMaterialDo) Returning(value interface{}, columns ...string) IDefaultFreeMaterialsAdminMaterialDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d defaultFreeMaterialsAdminMaterialDo) Not(conds ...gen.Condition) IDefaultFreeMaterialsAdminMaterialDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d defaultFreeMaterialsAdminMaterialDo) Or(conds ...gen.Condition) IDefaultFreeMaterialsAdminMaterialDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d defaultFreeMaterialsAdminMaterialDo) Select(conds ...field.Expr) IDefaultFreeMaterialsAdminMaterialDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d defaultFreeMaterialsAdminMaterialDo) Where(conds ...gen.Condition) IDefaultFreeMaterialsAdminMaterialDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d defaultFreeMaterialsAdminMaterialDo) Order(conds ...field.Expr) IDefaultFreeMaterialsAdminMaterialDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d defaultFreeMaterialsAdminMaterialDo) Distinct(cols ...field.Expr) IDefaultFreeMaterialsAdminMaterialDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d defaultFreeMaterialsAdminMaterialDo) Omit(cols ...field.Expr) IDefaultFreeMaterialsAdminMaterialDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d defaultFreeMaterialsAdminMaterialDo) Join(table schema.Tabler, on ...field.Expr) IDefaultFreeMaterialsAdminMaterialDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d defaultFreeMaterialsAdminMaterialDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDefaultFreeMaterialsAdminMaterialDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d defaultFreeMaterialsAdminMaterialDo) RightJoin(table schema.Tabler, on ...field.Expr) IDefaultFreeMaterialsAdminMaterialDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d defaultFreeMaterialsAdminMaterialDo) Group(cols ...field.Expr) IDefaultFreeMaterialsAdminMaterialDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d defaultFreeMaterialsAdminMaterialDo) Having(conds ...gen.Condition) IDefaultFreeMaterialsAdminMaterialDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d defaultFreeMaterialsAdminMaterialDo) Limit(limit int) IDefaultFreeMaterialsAdminMaterialDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d defaultFreeMaterialsAdminMaterialDo) Offset(offset int) IDefaultFreeMaterialsAdminMaterialDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d defaultFreeMaterialsAdminMaterialDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDefaultFreeMaterialsAdminMaterialDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d defaultFreeMaterialsAdminMaterialDo) Unscoped() IDefaultFreeMaterialsAdminMaterialDo {
	return d.withDO(d.DO.Unscoped())
}

func (d defaultFreeMaterialsAdminMaterialDo) Create(values ...*table.DefaultFreeMaterialsAdminMaterial) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d defaultFreeMaterialsAdminMaterialDo) CreateInBatches(values []*table.DefaultFreeMaterialsAdminMaterial, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d defaultFreeMaterialsAdminMaterialDo) Save(values ...*table.DefaultFreeMaterialsAdminMaterial) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d defaultFreeMaterialsAdminMaterialDo) First() (*table.DefaultFreeMaterialsAdminMaterial, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.DefaultFreeMaterialsAdminMaterial), nil
	}
}

func (d defaultFreeMaterialsAdminMaterialDo) Take() (*table.DefaultFreeMaterialsAdminMaterial, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.DefaultFreeMaterialsAdminMaterial), nil
	}
}

func (d defaultFreeMaterialsAdminMaterialDo) Last() (*table.DefaultFreeMaterialsAdminMaterial, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.DefaultFreeMaterialsAdminMaterial), nil
	}
}

func (d defaultFreeMaterialsAdminMaterialDo) Find() ([]*table.DefaultFreeMaterialsAdminMaterial, error) {
	result, err := d.DO.Find()
	return result.([]*table.DefaultFreeMaterialsAdminMaterial), err
}

func (d defaultFreeMaterialsAdminMaterialDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.DefaultFreeMaterialsAdminMaterial, err error) {
	buf := make([]*table.DefaultFreeMaterialsAdminMaterial, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d defaultFreeMaterialsAdminMaterialDo) FindInBatches(result *[]*table.DefaultFreeMaterialsAdminMaterial, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d defaultFreeMaterialsAdminMaterialDo) Attrs(attrs ...field.AssignExpr) IDefaultFreeMaterialsAdminMaterialDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d defaultFreeMaterialsAdminMaterialDo) Assign(attrs ...field.AssignExpr) IDefaultFreeMaterialsAdminMaterialDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d defaultFreeMaterialsAdminMaterialDo) Joins(fields ...field.RelationField) IDefaultFreeMaterialsAdminMaterialDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d defaultFreeMaterialsAdminMaterialDo) Preload(fields ...field.RelationField) IDefaultFreeMaterialsAdminMaterialDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d defaultFreeMaterialsAdminMaterialDo) FirstOrInit() (*table.DefaultFreeMaterialsAdminMaterial, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.DefaultFreeMaterialsAdminMaterial), nil
	}
}

func (d defaultFreeMaterialsAdminMaterialDo) FirstOrCreate() (*table.DefaultFreeMaterialsAdminMaterial, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.DefaultFreeMaterialsAdminMaterial), nil
	}
}

func (d defaultFreeMaterialsAdminMaterialDo) FindByPage(offset int, limit int) (result []*table.DefaultFreeMaterialsAdminMaterial, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d defaultFreeMaterialsAdminMaterialDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d defaultFreeMaterialsAdminMaterialDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d defaultFreeMaterialsAdminMaterialDo) Delete(models ...*table.DefaultFreeMaterialsAdminMaterial) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *defaultFreeMaterialsAdminMaterialDo) withDO(do gen.Dao) *defaultFreeMaterialsAdminMaterialDo {
	d.DO = *do.(*gen.DO)
	return d
}
