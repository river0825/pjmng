// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newGrammersComponent(db *gorm.DB, opts ...gen.DOOption) grammersComponent {
	_grammersComponent := grammersComponent{}

	_grammersComponent.grammersComponentDo.UseDB(db, opts...)
	_grammersComponent.grammersComponentDo.UseModel(&table.GrammersComponent{})

	tableName := _grammersComponent.grammersComponentDo.TableName()
	_grammersComponent.ALL = field.NewAsterisk(tableName)
	_grammersComponent.ID = field.NewInt32(tableName, "id")
	_grammersComponent.Field = field.NewString(tableName, "field")
	_grammersComponent.Order_ = field.NewInt32(tableName, "order")
	_grammersComponent.ComponentType = field.NewString(tableName, "component_type")
	_grammersComponent.ComponentID = field.NewInt32(tableName, "component_id")
	_grammersComponent.GrammerID = field.NewInt32(tableName, "grammer_id")

	_grammersComponent.fillFieldMap()

	return _grammersComponent
}

type grammersComponent struct {
	grammersComponentDo

	ALL           field.Asterisk
	ID            field.Int32
	Field         field.String
	Order_        field.Int32
	ComponentType field.String
	ComponentID   field.Int32
	GrammerID     field.Int32

	fieldMap map[string]field.Expr
}

func (g grammersComponent) Table(newTableName string) *grammersComponent {
	g.grammersComponentDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g grammersComponent) As(alias string) *grammersComponent {
	g.grammersComponentDo.DO = *(g.grammersComponentDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *grammersComponent) updateTableName(table string) *grammersComponent {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt32(table, "id")
	g.Field = field.NewString(table, "field")
	g.Order_ = field.NewInt32(table, "order")
	g.ComponentType = field.NewString(table, "component_type")
	g.ComponentID = field.NewInt32(table, "component_id")
	g.GrammerID = field.NewInt32(table, "grammer_id")

	g.fillFieldMap()

	return g
}

func (g *grammersComponent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *grammersComponent) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 6)
	g.fieldMap["id"] = g.ID
	g.fieldMap["field"] = g.Field
	g.fieldMap["order"] = g.Order_
	g.fieldMap["component_type"] = g.ComponentType
	g.fieldMap["component_id"] = g.ComponentID
	g.fieldMap["grammer_id"] = g.GrammerID
}

func (g grammersComponent) clone(db *gorm.DB) grammersComponent {
	g.grammersComponentDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g grammersComponent) replaceDB(db *gorm.DB) grammersComponent {
	g.grammersComponentDo.ReplaceDB(db)
	return g
}

type grammersComponentDo struct{ gen.DO }

type IGrammersComponentDo interface {
	gen.SubQuery
	Debug() IGrammersComponentDo
	WithContext(ctx context.Context) IGrammersComponentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGrammersComponentDo
	WriteDB() IGrammersComponentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGrammersComponentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGrammersComponentDo
	Not(conds ...gen.Condition) IGrammersComponentDo
	Or(conds ...gen.Condition) IGrammersComponentDo
	Select(conds ...field.Expr) IGrammersComponentDo
	Where(conds ...gen.Condition) IGrammersComponentDo
	Order(conds ...field.Expr) IGrammersComponentDo
	Distinct(cols ...field.Expr) IGrammersComponentDo
	Omit(cols ...field.Expr) IGrammersComponentDo
	Join(table schema.Tabler, on ...field.Expr) IGrammersComponentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGrammersComponentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGrammersComponentDo
	Group(cols ...field.Expr) IGrammersComponentDo
	Having(conds ...gen.Condition) IGrammersComponentDo
	Limit(limit int) IGrammersComponentDo
	Offset(offset int) IGrammersComponentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGrammersComponentDo
	Unscoped() IGrammersComponentDo
	Create(values ...*table.GrammersComponent) error
	CreateInBatches(values []*table.GrammersComponent, batchSize int) error
	Save(values ...*table.GrammersComponent) error
	First() (*table.GrammersComponent, error)
	Take() (*table.GrammersComponent, error)
	Last() (*table.GrammersComponent, error)
	Find() ([]*table.GrammersComponent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.GrammersComponent, err error)
	FindInBatches(result *[]*table.GrammersComponent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.GrammersComponent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGrammersComponentDo
	Assign(attrs ...field.AssignExpr) IGrammersComponentDo
	Joins(fields ...field.RelationField) IGrammersComponentDo
	Preload(fields ...field.RelationField) IGrammersComponentDo
	FirstOrInit() (*table.GrammersComponent, error)
	FirstOrCreate() (*table.GrammersComponent, error)
	FindByPage(offset int, limit int) (result []*table.GrammersComponent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGrammersComponentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g grammersComponentDo) Debug() IGrammersComponentDo {
	return g.withDO(g.DO.Debug())
}

func (g grammersComponentDo) WithContext(ctx context.Context) IGrammersComponentDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g grammersComponentDo) ReadDB() IGrammersComponentDo {
	return g.Clauses(dbresolver.Read)
}

func (g grammersComponentDo) WriteDB() IGrammersComponentDo {
	return g.Clauses(dbresolver.Write)
}

func (g grammersComponentDo) Session(config *gorm.Session) IGrammersComponentDo {
	return g.withDO(g.DO.Session(config))
}

func (g grammersComponentDo) Clauses(conds ...clause.Expression) IGrammersComponentDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g grammersComponentDo) Returning(value interface{}, columns ...string) IGrammersComponentDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g grammersComponentDo) Not(conds ...gen.Condition) IGrammersComponentDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g grammersComponentDo) Or(conds ...gen.Condition) IGrammersComponentDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g grammersComponentDo) Select(conds ...field.Expr) IGrammersComponentDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g grammersComponentDo) Where(conds ...gen.Condition) IGrammersComponentDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g grammersComponentDo) Order(conds ...field.Expr) IGrammersComponentDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g grammersComponentDo) Distinct(cols ...field.Expr) IGrammersComponentDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g grammersComponentDo) Omit(cols ...field.Expr) IGrammersComponentDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g grammersComponentDo) Join(table schema.Tabler, on ...field.Expr) IGrammersComponentDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g grammersComponentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGrammersComponentDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g grammersComponentDo) RightJoin(table schema.Tabler, on ...field.Expr) IGrammersComponentDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g grammersComponentDo) Group(cols ...field.Expr) IGrammersComponentDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g grammersComponentDo) Having(conds ...gen.Condition) IGrammersComponentDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g grammersComponentDo) Limit(limit int) IGrammersComponentDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g grammersComponentDo) Offset(offset int) IGrammersComponentDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g grammersComponentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGrammersComponentDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g grammersComponentDo) Unscoped() IGrammersComponentDo {
	return g.withDO(g.DO.Unscoped())
}

func (g grammersComponentDo) Create(values ...*table.GrammersComponent) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g grammersComponentDo) CreateInBatches(values []*table.GrammersComponent, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g grammersComponentDo) Save(values ...*table.GrammersComponent) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g grammersComponentDo) First() (*table.GrammersComponent, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.GrammersComponent), nil
	}
}

func (g grammersComponentDo) Take() (*table.GrammersComponent, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.GrammersComponent), nil
	}
}

func (g grammersComponentDo) Last() (*table.GrammersComponent, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.GrammersComponent), nil
	}
}

func (g grammersComponentDo) Find() ([]*table.GrammersComponent, error) {
	result, err := g.DO.Find()
	return result.([]*table.GrammersComponent), err
}

func (g grammersComponentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.GrammersComponent, err error) {
	buf := make([]*table.GrammersComponent, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g grammersComponentDo) FindInBatches(result *[]*table.GrammersComponent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g grammersComponentDo) Attrs(attrs ...field.AssignExpr) IGrammersComponentDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g grammersComponentDo) Assign(attrs ...field.AssignExpr) IGrammersComponentDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g grammersComponentDo) Joins(fields ...field.RelationField) IGrammersComponentDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g grammersComponentDo) Preload(fields ...field.RelationField) IGrammersComponentDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g grammersComponentDo) FirstOrInit() (*table.GrammersComponent, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.GrammersComponent), nil
	}
}

func (g grammersComponentDo) FirstOrCreate() (*table.GrammersComponent, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.GrammersComponent), nil
	}
}

func (g grammersComponentDo) FindByPage(offset int, limit int) (result []*table.GrammersComponent, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g grammersComponentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g grammersComponentDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g grammersComponentDo) Delete(models ...*table.GrammersComponent) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *grammersComponentDo) withDO(do gen.Dao) *grammersComponentDo {
	g.DO = *do.(*gen.DO)
	return g
}
