// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newComponentsEditorGrammer(db *gorm.DB, opts ...gen.DOOption) componentsEditorGrammer {
	_componentsEditorGrammer := componentsEditorGrammer{}

	_componentsEditorGrammer.componentsEditorGrammerDo.UseDB(db, opts...)
	_componentsEditorGrammer.componentsEditorGrammerDo.UseModel(&table.ComponentsEditorGrammer{})

	tableName := _componentsEditorGrammer.componentsEditorGrammerDo.TableName()
	_componentsEditorGrammer.ALL = field.NewAsterisk(tableName)
	_componentsEditorGrammer.ID = field.NewInt32(tableName, "id")
	_componentsEditorGrammer.Content = field.NewString(tableName, "content")

	_componentsEditorGrammer.fillFieldMap()

	return _componentsEditorGrammer
}

type componentsEditorGrammer struct {
	componentsEditorGrammerDo

	ALL     field.Asterisk
	ID      field.Int32
	Content field.String

	fieldMap map[string]field.Expr
}

func (c componentsEditorGrammer) Table(newTableName string) *componentsEditorGrammer {
	c.componentsEditorGrammerDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c componentsEditorGrammer) As(alias string) *componentsEditorGrammer {
	c.componentsEditorGrammerDo.DO = *(c.componentsEditorGrammerDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *componentsEditorGrammer) updateTableName(table string) *componentsEditorGrammer {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.Content = field.NewString(table, "content")

	c.fillFieldMap()

	return c
}

func (c *componentsEditorGrammer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *componentsEditorGrammer) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 2)
	c.fieldMap["id"] = c.ID
	c.fieldMap["content"] = c.Content
}

func (c componentsEditorGrammer) clone(db *gorm.DB) componentsEditorGrammer {
	c.componentsEditorGrammerDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c componentsEditorGrammer) replaceDB(db *gorm.DB) componentsEditorGrammer {
	c.componentsEditorGrammerDo.ReplaceDB(db)
	return c
}

type componentsEditorGrammerDo struct{ gen.DO }

type IComponentsEditorGrammerDo interface {
	gen.SubQuery
	Debug() IComponentsEditorGrammerDo
	WithContext(ctx context.Context) IComponentsEditorGrammerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IComponentsEditorGrammerDo
	WriteDB() IComponentsEditorGrammerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IComponentsEditorGrammerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IComponentsEditorGrammerDo
	Not(conds ...gen.Condition) IComponentsEditorGrammerDo
	Or(conds ...gen.Condition) IComponentsEditorGrammerDo
	Select(conds ...field.Expr) IComponentsEditorGrammerDo
	Where(conds ...gen.Condition) IComponentsEditorGrammerDo
	Order(conds ...field.Expr) IComponentsEditorGrammerDo
	Distinct(cols ...field.Expr) IComponentsEditorGrammerDo
	Omit(cols ...field.Expr) IComponentsEditorGrammerDo
	Join(table schema.Tabler, on ...field.Expr) IComponentsEditorGrammerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IComponentsEditorGrammerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IComponentsEditorGrammerDo
	Group(cols ...field.Expr) IComponentsEditorGrammerDo
	Having(conds ...gen.Condition) IComponentsEditorGrammerDo
	Limit(limit int) IComponentsEditorGrammerDo
	Offset(offset int) IComponentsEditorGrammerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IComponentsEditorGrammerDo
	Unscoped() IComponentsEditorGrammerDo
	Create(values ...*table.ComponentsEditorGrammer) error
	CreateInBatches(values []*table.ComponentsEditorGrammer, batchSize int) error
	Save(values ...*table.ComponentsEditorGrammer) error
	First() (*table.ComponentsEditorGrammer, error)
	Take() (*table.ComponentsEditorGrammer, error)
	Last() (*table.ComponentsEditorGrammer, error)
	Find() ([]*table.ComponentsEditorGrammer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.ComponentsEditorGrammer, err error)
	FindInBatches(result *[]*table.ComponentsEditorGrammer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.ComponentsEditorGrammer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IComponentsEditorGrammerDo
	Assign(attrs ...field.AssignExpr) IComponentsEditorGrammerDo
	Joins(fields ...field.RelationField) IComponentsEditorGrammerDo
	Preload(fields ...field.RelationField) IComponentsEditorGrammerDo
	FirstOrInit() (*table.ComponentsEditorGrammer, error)
	FirstOrCreate() (*table.ComponentsEditorGrammer, error)
	FindByPage(offset int, limit int) (result []*table.ComponentsEditorGrammer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IComponentsEditorGrammerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c componentsEditorGrammerDo) Debug() IComponentsEditorGrammerDo {
	return c.withDO(c.DO.Debug())
}

func (c componentsEditorGrammerDo) WithContext(ctx context.Context) IComponentsEditorGrammerDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c componentsEditorGrammerDo) ReadDB() IComponentsEditorGrammerDo {
	return c.Clauses(dbresolver.Read)
}

func (c componentsEditorGrammerDo) WriteDB() IComponentsEditorGrammerDo {
	return c.Clauses(dbresolver.Write)
}

func (c componentsEditorGrammerDo) Session(config *gorm.Session) IComponentsEditorGrammerDo {
	return c.withDO(c.DO.Session(config))
}

func (c componentsEditorGrammerDo) Clauses(conds ...clause.Expression) IComponentsEditorGrammerDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c componentsEditorGrammerDo) Returning(value interface{}, columns ...string) IComponentsEditorGrammerDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c componentsEditorGrammerDo) Not(conds ...gen.Condition) IComponentsEditorGrammerDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c componentsEditorGrammerDo) Or(conds ...gen.Condition) IComponentsEditorGrammerDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c componentsEditorGrammerDo) Select(conds ...field.Expr) IComponentsEditorGrammerDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c componentsEditorGrammerDo) Where(conds ...gen.Condition) IComponentsEditorGrammerDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c componentsEditorGrammerDo) Order(conds ...field.Expr) IComponentsEditorGrammerDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c componentsEditorGrammerDo) Distinct(cols ...field.Expr) IComponentsEditorGrammerDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c componentsEditorGrammerDo) Omit(cols ...field.Expr) IComponentsEditorGrammerDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c componentsEditorGrammerDo) Join(table schema.Tabler, on ...field.Expr) IComponentsEditorGrammerDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c componentsEditorGrammerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IComponentsEditorGrammerDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c componentsEditorGrammerDo) RightJoin(table schema.Tabler, on ...field.Expr) IComponentsEditorGrammerDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c componentsEditorGrammerDo) Group(cols ...field.Expr) IComponentsEditorGrammerDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c componentsEditorGrammerDo) Having(conds ...gen.Condition) IComponentsEditorGrammerDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c componentsEditorGrammerDo) Limit(limit int) IComponentsEditorGrammerDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c componentsEditorGrammerDo) Offset(offset int) IComponentsEditorGrammerDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c componentsEditorGrammerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IComponentsEditorGrammerDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c componentsEditorGrammerDo) Unscoped() IComponentsEditorGrammerDo {
	return c.withDO(c.DO.Unscoped())
}

func (c componentsEditorGrammerDo) Create(values ...*table.ComponentsEditorGrammer) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c componentsEditorGrammerDo) CreateInBatches(values []*table.ComponentsEditorGrammer, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c componentsEditorGrammerDo) Save(values ...*table.ComponentsEditorGrammer) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c componentsEditorGrammerDo) First() (*table.ComponentsEditorGrammer, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.ComponentsEditorGrammer), nil
	}
}

func (c componentsEditorGrammerDo) Take() (*table.ComponentsEditorGrammer, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.ComponentsEditorGrammer), nil
	}
}

func (c componentsEditorGrammerDo) Last() (*table.ComponentsEditorGrammer, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.ComponentsEditorGrammer), nil
	}
}

func (c componentsEditorGrammerDo) Find() ([]*table.ComponentsEditorGrammer, error) {
	result, err := c.DO.Find()
	return result.([]*table.ComponentsEditorGrammer), err
}

func (c componentsEditorGrammerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.ComponentsEditorGrammer, err error) {
	buf := make([]*table.ComponentsEditorGrammer, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c componentsEditorGrammerDo) FindInBatches(result *[]*table.ComponentsEditorGrammer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c componentsEditorGrammerDo) Attrs(attrs ...field.AssignExpr) IComponentsEditorGrammerDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c componentsEditorGrammerDo) Assign(attrs ...field.AssignExpr) IComponentsEditorGrammerDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c componentsEditorGrammerDo) Joins(fields ...field.RelationField) IComponentsEditorGrammerDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c componentsEditorGrammerDo) Preload(fields ...field.RelationField) IComponentsEditorGrammerDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c componentsEditorGrammerDo) FirstOrInit() (*table.ComponentsEditorGrammer, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.ComponentsEditorGrammer), nil
	}
}

func (c componentsEditorGrammerDo) FirstOrCreate() (*table.ComponentsEditorGrammer, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.ComponentsEditorGrammer), nil
	}
}

func (c componentsEditorGrammerDo) FindByPage(offset int, limit int) (result []*table.ComponentsEditorGrammer, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c componentsEditorGrammerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c componentsEditorGrammerDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c componentsEditorGrammerDo) Delete(models ...*table.ComponentsEditorGrammer) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *componentsEditorGrammerDo) withDO(do gen.Dao) *componentsEditorGrammerDo {
	c.DO = *do.(*gen.DO)
	return c
}
