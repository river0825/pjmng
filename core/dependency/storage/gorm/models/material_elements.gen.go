// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newMaterialElement(db *gorm.DB, opts ...gen.DOOption) materialElement {
	_materialElement := materialElement{}

	_materialElement.materialElementDo.UseDB(db, opts...)
	_materialElement.materialElementDo.UseModel(&table.MaterialElement{})

	tableName := _materialElement.materialElementDo.TableName()
	_materialElement.ALL = field.NewAsterisk(tableName)
	_materialElement.ID = field.NewInt32(tableName, "id")
	_materialElement.Material = field.NewInt32(tableName, "material")
	_materialElement.Element = field.NewField(tableName, "element")
	_materialElement.PublishedAt = field.NewTime(tableName, "published_at")
	_materialElement.CreatedBy = field.NewInt32(tableName, "created_by")
	_materialElement.UpdatedBy = field.NewInt32(tableName, "updated_by")
	_materialElement.CreatedAt = field.NewTime(tableName, "created_at")
	_materialElement.UpdatedAt = field.NewTime(tableName, "updated_at")

	_materialElement.fillFieldMap()

	return _materialElement
}

type materialElement struct {
	materialElementDo

	ALL         field.Asterisk
	ID          field.Int32
	Material    field.Int32
	Element     field.Field
	PublishedAt field.Time
	CreatedBy   field.Int32
	UpdatedBy   field.Int32
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (m materialElement) Table(newTableName string) *materialElement {
	m.materialElementDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m materialElement) As(alias string) *materialElement {
	m.materialElementDo.DO = *(m.materialElementDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *materialElement) updateTableName(table string) *materialElement {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.Material = field.NewInt32(table, "material")
	m.Element = field.NewField(table, "element")
	m.PublishedAt = field.NewTime(table, "published_at")
	m.CreatedBy = field.NewInt32(table, "created_by")
	m.UpdatedBy = field.NewInt32(table, "updated_by")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")

	m.fillFieldMap()

	return m
}

func (m *materialElement) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *materialElement) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 8)
	m.fieldMap["id"] = m.ID
	m.fieldMap["material"] = m.Material
	m.fieldMap["element"] = m.Element
	m.fieldMap["published_at"] = m.PublishedAt
	m.fieldMap["created_by"] = m.CreatedBy
	m.fieldMap["updated_by"] = m.UpdatedBy
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m materialElement) clone(db *gorm.DB) materialElement {
	m.materialElementDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m materialElement) replaceDB(db *gorm.DB) materialElement {
	m.materialElementDo.ReplaceDB(db)
	return m
}

type materialElementDo struct{ gen.DO }

type IMaterialElementDo interface {
	gen.SubQuery
	Debug() IMaterialElementDo
	WithContext(ctx context.Context) IMaterialElementDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMaterialElementDo
	WriteDB() IMaterialElementDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMaterialElementDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMaterialElementDo
	Not(conds ...gen.Condition) IMaterialElementDo
	Or(conds ...gen.Condition) IMaterialElementDo
	Select(conds ...field.Expr) IMaterialElementDo
	Where(conds ...gen.Condition) IMaterialElementDo
	Order(conds ...field.Expr) IMaterialElementDo
	Distinct(cols ...field.Expr) IMaterialElementDo
	Omit(cols ...field.Expr) IMaterialElementDo
	Join(table schema.Tabler, on ...field.Expr) IMaterialElementDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMaterialElementDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMaterialElementDo
	Group(cols ...field.Expr) IMaterialElementDo
	Having(conds ...gen.Condition) IMaterialElementDo
	Limit(limit int) IMaterialElementDo
	Offset(offset int) IMaterialElementDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMaterialElementDo
	Unscoped() IMaterialElementDo
	Create(values ...*table.MaterialElement) error
	CreateInBatches(values []*table.MaterialElement, batchSize int) error
	Save(values ...*table.MaterialElement) error
	First() (*table.MaterialElement, error)
	Take() (*table.MaterialElement, error)
	Last() (*table.MaterialElement, error)
	Find() ([]*table.MaterialElement, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.MaterialElement, err error)
	FindInBatches(result *[]*table.MaterialElement, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.MaterialElement) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMaterialElementDo
	Assign(attrs ...field.AssignExpr) IMaterialElementDo
	Joins(fields ...field.RelationField) IMaterialElementDo
	Preload(fields ...field.RelationField) IMaterialElementDo
	FirstOrInit() (*table.MaterialElement, error)
	FirstOrCreate() (*table.MaterialElement, error)
	FindByPage(offset int, limit int) (result []*table.MaterialElement, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMaterialElementDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m materialElementDo) Debug() IMaterialElementDo {
	return m.withDO(m.DO.Debug())
}

func (m materialElementDo) WithContext(ctx context.Context) IMaterialElementDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m materialElementDo) ReadDB() IMaterialElementDo {
	return m.Clauses(dbresolver.Read)
}

func (m materialElementDo) WriteDB() IMaterialElementDo {
	return m.Clauses(dbresolver.Write)
}

func (m materialElementDo) Session(config *gorm.Session) IMaterialElementDo {
	return m.withDO(m.DO.Session(config))
}

func (m materialElementDo) Clauses(conds ...clause.Expression) IMaterialElementDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m materialElementDo) Returning(value interface{}, columns ...string) IMaterialElementDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m materialElementDo) Not(conds ...gen.Condition) IMaterialElementDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m materialElementDo) Or(conds ...gen.Condition) IMaterialElementDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m materialElementDo) Select(conds ...field.Expr) IMaterialElementDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m materialElementDo) Where(conds ...gen.Condition) IMaterialElementDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m materialElementDo) Order(conds ...field.Expr) IMaterialElementDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m materialElementDo) Distinct(cols ...field.Expr) IMaterialElementDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m materialElementDo) Omit(cols ...field.Expr) IMaterialElementDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m materialElementDo) Join(table schema.Tabler, on ...field.Expr) IMaterialElementDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m materialElementDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMaterialElementDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m materialElementDo) RightJoin(table schema.Tabler, on ...field.Expr) IMaterialElementDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m materialElementDo) Group(cols ...field.Expr) IMaterialElementDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m materialElementDo) Having(conds ...gen.Condition) IMaterialElementDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m materialElementDo) Limit(limit int) IMaterialElementDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m materialElementDo) Offset(offset int) IMaterialElementDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m materialElementDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMaterialElementDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m materialElementDo) Unscoped() IMaterialElementDo {
	return m.withDO(m.DO.Unscoped())
}

func (m materialElementDo) Create(values ...*table.MaterialElement) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m materialElementDo) CreateInBatches(values []*table.MaterialElement, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m materialElementDo) Save(values ...*table.MaterialElement) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m materialElementDo) First() (*table.MaterialElement, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.MaterialElement), nil
	}
}

func (m materialElementDo) Take() (*table.MaterialElement, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.MaterialElement), nil
	}
}

func (m materialElementDo) Last() (*table.MaterialElement, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.MaterialElement), nil
	}
}

func (m materialElementDo) Find() ([]*table.MaterialElement, error) {
	result, err := m.DO.Find()
	return result.([]*table.MaterialElement), err
}

func (m materialElementDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.MaterialElement, err error) {
	buf := make([]*table.MaterialElement, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m materialElementDo) FindInBatches(result *[]*table.MaterialElement, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m materialElementDo) Attrs(attrs ...field.AssignExpr) IMaterialElementDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m materialElementDo) Assign(attrs ...field.AssignExpr) IMaterialElementDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m materialElementDo) Joins(fields ...field.RelationField) IMaterialElementDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m materialElementDo) Preload(fields ...field.RelationField) IMaterialElementDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m materialElementDo) FirstOrInit() (*table.MaterialElement, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.MaterialElement), nil
	}
}

func (m materialElementDo) FirstOrCreate() (*table.MaterialElement, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.MaterialElement), nil
	}
}

func (m materialElementDo) FindByPage(offset int, limit int) (result []*table.MaterialElement, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m materialElementDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m materialElementDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m materialElementDo) Delete(models ...*table.MaterialElement) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *materialElementDo) withDO(do gen.Dao) *materialElementDo {
	m.DO = *do.(*gen.DO)
	return m
}
