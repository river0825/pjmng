// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                                  = new(Query)
	AdminMaterial                      *adminMaterial
	Book                               *book
	BooksLesson                        *booksLesson
	ComponentsEditorGrammer            *componentsEditorGrammer
	ComponentsFreeIsFree               *componentsFreeIsFree
	ComponentsMaterialPage             *componentsMaterialPage
	CoreStore                          *coreStore
	DefaultFreeMaterial                *defaultFreeMaterial
	DefaultFreeMaterialsAdminMaterial  *defaultFreeMaterialsAdminMaterial
	EditorAudio                        *editorAudio
	EditorAudiosCategorie              *editorAudiosCategorie
	EditorBackground                   *editorBackground
	EditorCategoryAudio                *editorCategoryAudio
	EditorCategoryGrammer              *editorCategoryGrammer
	EditorCategoryImage                *editorCategoryImage
	EditorGrammer                      *editorGrammer
	EditorGrammersCategorie            *editorGrammersCategorie
	EditorImage                        *editorImage
	EditorImagesCategorie              *editorImagesCategorie
	EditorTheme                        *editorTheme
	Grammer                            *grammer
	GrammersComponent                  *grammersComponent
	I18nLocale                         *i18nLocale
	LegalDocument                      *legalDocument
	Lesson                             *lesson
	LessonsGrammer                     *lessonsGrammer
	Material                           *material
	MaterialContent                    *materialContent
	MaterialContentSchema              *materialContentSchema
	MaterialDefaultLog                 *materialDefaultLog
	MaterialElement                    *materialElement
	MaterialShare                      *materialShare
	MaterialTag                        *materialTag
	MaterialsComponent                 *materialsComponent
	Organization                       *organization
	Plan                               *plan
	ShopifyEvent                       *shopifyEvent
	StrapiAdministrator                *strapiAdministrator
	StrapiPermission                   *strapiPermission
	StrapiRole                         *strapiRole
	StrapiUsersRole                    *strapiUsersRole
	StrapiWebhook                      *strapiWebhook
	Subscription                       *subscription
	TeacherRecommendation              *teacherRecommendation
	TeacherRecommendationsLocalization *teacherRecommendationsLocalization
	TempHeaderFooter                   *tempHeaderFooter
	UploadFile                         *uploadFile
	UploadFileMorph                    *uploadFileMorph
	UserProfile                        *userProfile
	UsersPermissionsPermission         *usersPermissionsPermission
	UsersPermissionsRole               *usersPermissionsRole
	UsersPermissionsUser               *usersPermissionsUser
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	AdminMaterial = &Q.AdminMaterial
	Book = &Q.Book
	BooksLesson = &Q.BooksLesson
	ComponentsEditorGrammer = &Q.ComponentsEditorGrammer
	ComponentsFreeIsFree = &Q.ComponentsFreeIsFree
	ComponentsMaterialPage = &Q.ComponentsMaterialPage
	CoreStore = &Q.CoreStore
	DefaultFreeMaterial = &Q.DefaultFreeMaterial
	DefaultFreeMaterialsAdminMaterial = &Q.DefaultFreeMaterialsAdminMaterial
	EditorAudio = &Q.EditorAudio
	EditorAudiosCategorie = &Q.EditorAudiosCategorie
	EditorBackground = &Q.EditorBackground
	EditorCategoryAudio = &Q.EditorCategoryAudio
	EditorCategoryGrammer = &Q.EditorCategoryGrammer
	EditorCategoryImage = &Q.EditorCategoryImage
	EditorGrammer = &Q.EditorGrammer
	EditorGrammersCategorie = &Q.EditorGrammersCategorie
	EditorImage = &Q.EditorImage
	EditorImagesCategorie = &Q.EditorImagesCategorie
	EditorTheme = &Q.EditorTheme
	Grammer = &Q.Grammer
	GrammersComponent = &Q.GrammersComponent
	I18nLocale = &Q.I18nLocale
	LegalDocument = &Q.LegalDocument
	Lesson = &Q.Lesson
	LessonsGrammer = &Q.LessonsGrammer
	Material = &Q.Material
	MaterialContent = &Q.MaterialContent
	MaterialContentSchema = &Q.MaterialContentSchema
	MaterialDefaultLog = &Q.MaterialDefaultLog
	MaterialElement = &Q.MaterialElement
	MaterialShare = &Q.MaterialShare
	MaterialTag = &Q.MaterialTag
	MaterialsComponent = &Q.MaterialsComponent
	Organization = &Q.Organization
	Plan = &Q.Plan
	ShopifyEvent = &Q.ShopifyEvent
	StrapiAdministrator = &Q.StrapiAdministrator
	StrapiPermission = &Q.StrapiPermission
	StrapiRole = &Q.StrapiRole
	StrapiUsersRole = &Q.StrapiUsersRole
	StrapiWebhook = &Q.StrapiWebhook
	Subscription = &Q.Subscription
	TeacherRecommendation = &Q.TeacherRecommendation
	TeacherRecommendationsLocalization = &Q.TeacherRecommendationsLocalization
	TempHeaderFooter = &Q.TempHeaderFooter
	UploadFile = &Q.UploadFile
	UploadFileMorph = &Q.UploadFileMorph
	UserProfile = &Q.UserProfile
	UsersPermissionsPermission = &Q.UsersPermissionsPermission
	UsersPermissionsRole = &Q.UsersPermissionsRole
	UsersPermissionsUser = &Q.UsersPermissionsUser
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                                 db,
		AdminMaterial:                      newAdminMaterial(db, opts...),
		Book:                               newBook(db, opts...),
		BooksLesson:                        newBooksLesson(db, opts...),
		ComponentsEditorGrammer:            newComponentsEditorGrammer(db, opts...),
		ComponentsFreeIsFree:               newComponentsFreeIsFree(db, opts...),
		ComponentsMaterialPage:             newComponentsMaterialPage(db, opts...),
		CoreStore:                          newCoreStore(db, opts...),
		DefaultFreeMaterial:                newDefaultFreeMaterial(db, opts...),
		DefaultFreeMaterialsAdminMaterial:  newDefaultFreeMaterialsAdminMaterial(db, opts...),
		EditorAudio:                        newEditorAudio(db, opts...),
		EditorAudiosCategorie:              newEditorAudiosCategorie(db, opts...),
		EditorBackground:                   newEditorBackground(db, opts...),
		EditorCategoryAudio:                newEditorCategoryAudio(db, opts...),
		EditorCategoryGrammer:              newEditorCategoryGrammer(db, opts...),
		EditorCategoryImage:                newEditorCategoryImage(db, opts...),
		EditorGrammer:                      newEditorGrammer(db, opts...),
		EditorGrammersCategorie:            newEditorGrammersCategorie(db, opts...),
		EditorImage:                        newEditorImage(db, opts...),
		EditorImagesCategorie:              newEditorImagesCategorie(db, opts...),
		EditorTheme:                        newEditorTheme(db, opts...),
		Grammer:                            newGrammer(db, opts...),
		GrammersComponent:                  newGrammersComponent(db, opts...),
		I18nLocale:                         newI18nLocale(db, opts...),
		LegalDocument:                      newLegalDocument(db, opts...),
		Lesson:                             newLesson(db, opts...),
		LessonsGrammer:                     newLessonsGrammer(db, opts...),
		Material:                           newMaterial(db, opts...),
		MaterialContent:                    newMaterialContent(db, opts...),
		MaterialContentSchema:              newMaterialContentSchema(db, opts...),
		MaterialDefaultLog:                 newMaterialDefaultLog(db, opts...),
		MaterialElement:                    newMaterialElement(db, opts...),
		MaterialShare:                      newMaterialShare(db, opts...),
		MaterialTag:                        newMaterialTag(db, opts...),
		MaterialsComponent:                 newMaterialsComponent(db, opts...),
		Organization:                       newOrganization(db, opts...),
		Plan:                               newPlan(db, opts...),
		ShopifyEvent:                       newShopifyEvent(db, opts...),
		StrapiAdministrator:                newStrapiAdministrator(db, opts...),
		StrapiPermission:                   newStrapiPermission(db, opts...),
		StrapiRole:                         newStrapiRole(db, opts...),
		StrapiUsersRole:                    newStrapiUsersRole(db, opts...),
		StrapiWebhook:                      newStrapiWebhook(db, opts...),
		Subscription:                       newSubscription(db, opts...),
		TeacherRecommendation:              newTeacherRecommendation(db, opts...),
		TeacherRecommendationsLocalization: newTeacherRecommendationsLocalization(db, opts...),
		TempHeaderFooter:                   newTempHeaderFooter(db, opts...),
		UploadFile:                         newUploadFile(db, opts...),
		UploadFileMorph:                    newUploadFileMorph(db, opts...),
		UserProfile:                        newUserProfile(db, opts...),
		UsersPermissionsPermission:         newUsersPermissionsPermission(db, opts...),
		UsersPermissionsRole:               newUsersPermissionsRole(db, opts...),
		UsersPermissionsUser:               newUsersPermissionsUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AdminMaterial                      adminMaterial
	Book                               book
	BooksLesson                        booksLesson
	ComponentsEditorGrammer            componentsEditorGrammer
	ComponentsFreeIsFree               componentsFreeIsFree
	ComponentsMaterialPage             componentsMaterialPage
	CoreStore                          coreStore
	DefaultFreeMaterial                defaultFreeMaterial
	DefaultFreeMaterialsAdminMaterial  defaultFreeMaterialsAdminMaterial
	EditorAudio                        editorAudio
	EditorAudiosCategorie              editorAudiosCategorie
	EditorBackground                   editorBackground
	EditorCategoryAudio                editorCategoryAudio
	EditorCategoryGrammer              editorCategoryGrammer
	EditorCategoryImage                editorCategoryImage
	EditorGrammer                      editorGrammer
	EditorGrammersCategorie            editorGrammersCategorie
	EditorImage                        editorImage
	EditorImagesCategorie              editorImagesCategorie
	EditorTheme                        editorTheme
	Grammer                            grammer
	GrammersComponent                  grammersComponent
	I18nLocale                         i18nLocale
	LegalDocument                      legalDocument
	Lesson                             lesson
	LessonsGrammer                     lessonsGrammer
	Material                           material
	MaterialContent                    materialContent
	MaterialContentSchema              materialContentSchema
	MaterialDefaultLog                 materialDefaultLog
	MaterialElement                    materialElement
	MaterialShare                      materialShare
	MaterialTag                        materialTag
	MaterialsComponent                 materialsComponent
	Organization                       organization
	Plan                               plan
	ShopifyEvent                       shopifyEvent
	StrapiAdministrator                strapiAdministrator
	StrapiPermission                   strapiPermission
	StrapiRole                         strapiRole
	StrapiUsersRole                    strapiUsersRole
	StrapiWebhook                      strapiWebhook
	Subscription                       subscription
	TeacherRecommendation              teacherRecommendation
	TeacherRecommendationsLocalization teacherRecommendationsLocalization
	TempHeaderFooter                   tempHeaderFooter
	UploadFile                         uploadFile
	UploadFileMorph                    uploadFileMorph
	UserProfile                        userProfile
	UsersPermissionsPermission         usersPermissionsPermission
	UsersPermissionsRole               usersPermissionsRole
	UsersPermissionsUser               usersPermissionsUser
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                                 db,
		AdminMaterial:                      q.AdminMaterial.clone(db),
		Book:                               q.Book.clone(db),
		BooksLesson:                        q.BooksLesson.clone(db),
		ComponentsEditorGrammer:            q.ComponentsEditorGrammer.clone(db),
		ComponentsFreeIsFree:               q.ComponentsFreeIsFree.clone(db),
		ComponentsMaterialPage:             q.ComponentsMaterialPage.clone(db),
		CoreStore:                          q.CoreStore.clone(db),
		DefaultFreeMaterial:                q.DefaultFreeMaterial.clone(db),
		DefaultFreeMaterialsAdminMaterial:  q.DefaultFreeMaterialsAdminMaterial.clone(db),
		EditorAudio:                        q.EditorAudio.clone(db),
		EditorAudiosCategorie:              q.EditorAudiosCategorie.clone(db),
		EditorBackground:                   q.EditorBackground.clone(db),
		EditorCategoryAudio:                q.EditorCategoryAudio.clone(db),
		EditorCategoryGrammer:              q.EditorCategoryGrammer.clone(db),
		EditorCategoryImage:                q.EditorCategoryImage.clone(db),
		EditorGrammer:                      q.EditorGrammer.clone(db),
		EditorGrammersCategorie:            q.EditorGrammersCategorie.clone(db),
		EditorImage:                        q.EditorImage.clone(db),
		EditorImagesCategorie:              q.EditorImagesCategorie.clone(db),
		EditorTheme:                        q.EditorTheme.clone(db),
		Grammer:                            q.Grammer.clone(db),
		GrammersComponent:                  q.GrammersComponent.clone(db),
		I18nLocale:                         q.I18nLocale.clone(db),
		LegalDocument:                      q.LegalDocument.clone(db),
		Lesson:                             q.Lesson.clone(db),
		LessonsGrammer:                     q.LessonsGrammer.clone(db),
		Material:                           q.Material.clone(db),
		MaterialContent:                    q.MaterialContent.clone(db),
		MaterialContentSchema:              q.MaterialContentSchema.clone(db),
		MaterialDefaultLog:                 q.MaterialDefaultLog.clone(db),
		MaterialElement:                    q.MaterialElement.clone(db),
		MaterialShare:                      q.MaterialShare.clone(db),
		MaterialTag:                        q.MaterialTag.clone(db),
		MaterialsComponent:                 q.MaterialsComponent.clone(db),
		Organization:                       q.Organization.clone(db),
		Plan:                               q.Plan.clone(db),
		ShopifyEvent:                       q.ShopifyEvent.clone(db),
		StrapiAdministrator:                q.StrapiAdministrator.clone(db),
		StrapiPermission:                   q.StrapiPermission.clone(db),
		StrapiRole:                         q.StrapiRole.clone(db),
		StrapiUsersRole:                    q.StrapiUsersRole.clone(db),
		StrapiWebhook:                      q.StrapiWebhook.clone(db),
		Subscription:                       q.Subscription.clone(db),
		TeacherRecommendation:              q.TeacherRecommendation.clone(db),
		TeacherRecommendationsLocalization: q.TeacherRecommendationsLocalization.clone(db),
		TempHeaderFooter:                   q.TempHeaderFooter.clone(db),
		UploadFile:                         q.UploadFile.clone(db),
		UploadFileMorph:                    q.UploadFileMorph.clone(db),
		UserProfile:                        q.UserProfile.clone(db),
		UsersPermissionsPermission:         q.UsersPermissionsPermission.clone(db),
		UsersPermissionsRole:               q.UsersPermissionsRole.clone(db),
		UsersPermissionsUser:               q.UsersPermissionsUser.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                                 db,
		AdminMaterial:                      q.AdminMaterial.replaceDB(db),
		Book:                               q.Book.replaceDB(db),
		BooksLesson:                        q.BooksLesson.replaceDB(db),
		ComponentsEditorGrammer:            q.ComponentsEditorGrammer.replaceDB(db),
		ComponentsFreeIsFree:               q.ComponentsFreeIsFree.replaceDB(db),
		ComponentsMaterialPage:             q.ComponentsMaterialPage.replaceDB(db),
		CoreStore:                          q.CoreStore.replaceDB(db),
		DefaultFreeMaterial:                q.DefaultFreeMaterial.replaceDB(db),
		DefaultFreeMaterialsAdminMaterial:  q.DefaultFreeMaterialsAdminMaterial.replaceDB(db),
		EditorAudio:                        q.EditorAudio.replaceDB(db),
		EditorAudiosCategorie:              q.EditorAudiosCategorie.replaceDB(db),
		EditorBackground:                   q.EditorBackground.replaceDB(db),
		EditorCategoryAudio:                q.EditorCategoryAudio.replaceDB(db),
		EditorCategoryGrammer:              q.EditorCategoryGrammer.replaceDB(db),
		EditorCategoryImage:                q.EditorCategoryImage.replaceDB(db),
		EditorGrammer:                      q.EditorGrammer.replaceDB(db),
		EditorGrammersCategorie:            q.EditorGrammersCategorie.replaceDB(db),
		EditorImage:                        q.EditorImage.replaceDB(db),
		EditorImagesCategorie:              q.EditorImagesCategorie.replaceDB(db),
		EditorTheme:                        q.EditorTheme.replaceDB(db),
		Grammer:                            q.Grammer.replaceDB(db),
		GrammersComponent:                  q.GrammersComponent.replaceDB(db),
		I18nLocale:                         q.I18nLocale.replaceDB(db),
		LegalDocument:                      q.LegalDocument.replaceDB(db),
		Lesson:                             q.Lesson.replaceDB(db),
		LessonsGrammer:                     q.LessonsGrammer.replaceDB(db),
		Material:                           q.Material.replaceDB(db),
		MaterialContent:                    q.MaterialContent.replaceDB(db),
		MaterialContentSchema:              q.MaterialContentSchema.replaceDB(db),
		MaterialDefaultLog:                 q.MaterialDefaultLog.replaceDB(db),
		MaterialElement:                    q.MaterialElement.replaceDB(db),
		MaterialShare:                      q.MaterialShare.replaceDB(db),
		MaterialTag:                        q.MaterialTag.replaceDB(db),
		MaterialsComponent:                 q.MaterialsComponent.replaceDB(db),
		Organization:                       q.Organization.replaceDB(db),
		Plan:                               q.Plan.replaceDB(db),
		ShopifyEvent:                       q.ShopifyEvent.replaceDB(db),
		StrapiAdministrator:                q.StrapiAdministrator.replaceDB(db),
		StrapiPermission:                   q.StrapiPermission.replaceDB(db),
		StrapiRole:                         q.StrapiRole.replaceDB(db),
		StrapiUsersRole:                    q.StrapiUsersRole.replaceDB(db),
		StrapiWebhook:                      q.StrapiWebhook.replaceDB(db),
		Subscription:                       q.Subscription.replaceDB(db),
		TeacherRecommendation:              q.TeacherRecommendation.replaceDB(db),
		TeacherRecommendationsLocalization: q.TeacherRecommendationsLocalization.replaceDB(db),
		TempHeaderFooter:                   q.TempHeaderFooter.replaceDB(db),
		UploadFile:                         q.UploadFile.replaceDB(db),
		UploadFileMorph:                    q.UploadFileMorph.replaceDB(db),
		UserProfile:                        q.UserProfile.replaceDB(db),
		UsersPermissionsPermission:         q.UsersPermissionsPermission.replaceDB(db),
		UsersPermissionsRole:               q.UsersPermissionsRole.replaceDB(db),
		UsersPermissionsUser:               q.UsersPermissionsUser.replaceDB(db),
	}
}

type queryCtx struct {
	AdminMaterial                      IAdminMaterialDo
	Book                               IBookDo
	BooksLesson                        IBooksLessonDo
	ComponentsEditorGrammer            IComponentsEditorGrammerDo
	ComponentsFreeIsFree               IComponentsFreeIsFreeDo
	ComponentsMaterialPage             IComponentsMaterialPageDo
	CoreStore                          ICoreStoreDo
	DefaultFreeMaterial                IDefaultFreeMaterialDo
	DefaultFreeMaterialsAdminMaterial  IDefaultFreeMaterialsAdminMaterialDo
	EditorAudio                        IEditorAudioDo
	EditorAudiosCategorie              IEditorAudiosCategorieDo
	EditorBackground                   IEditorBackgroundDo
	EditorCategoryAudio                IEditorCategoryAudioDo
	EditorCategoryGrammer              IEditorCategoryGrammerDo
	EditorCategoryImage                IEditorCategoryImageDo
	EditorGrammer                      IEditorGrammerDo
	EditorGrammersCategorie            IEditorGrammersCategorieDo
	EditorImage                        IEditorImageDo
	EditorImagesCategorie              IEditorImagesCategorieDo
	EditorTheme                        IEditorThemeDo
	Grammer                            IGrammerDo
	GrammersComponent                  IGrammersComponentDo
	I18nLocale                         II18nLocaleDo
	LegalDocument                      ILegalDocumentDo
	Lesson                             ILessonDo
	LessonsGrammer                     ILessonsGrammerDo
	Material                           IMaterialDo
	MaterialContent                    IMaterialContentDo
	MaterialContentSchema              IMaterialContentSchemaDo
	MaterialDefaultLog                 IMaterialDefaultLogDo
	MaterialElement                    IMaterialElementDo
	MaterialShare                      IMaterialShareDo
	MaterialTag                        IMaterialTagDo
	MaterialsComponent                 IMaterialsComponentDo
	Organization                       IOrganizationDo
	Plan                               IPlanDo
	ShopifyEvent                       IShopifyEventDo
	StrapiAdministrator                IStrapiAdministratorDo
	StrapiPermission                   IStrapiPermissionDo
	StrapiRole                         IStrapiRoleDo
	StrapiUsersRole                    IStrapiUsersRoleDo
	StrapiWebhook                      IStrapiWebhookDo
	Subscription                       ISubscriptionDo
	TeacherRecommendation              ITeacherRecommendationDo
	TeacherRecommendationsLocalization ITeacherRecommendationsLocalizationDo
	TempHeaderFooter                   ITempHeaderFooterDo
	UploadFile                         IUploadFileDo
	UploadFileMorph                    IUploadFileMorphDo
	UserProfile                        IUserProfileDo
	UsersPermissionsPermission         IUsersPermissionsPermissionDo
	UsersPermissionsRole               IUsersPermissionsRoleDo
	UsersPermissionsUser               IUsersPermissionsUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AdminMaterial:                      q.AdminMaterial.WithContext(ctx),
		Book:                               q.Book.WithContext(ctx),
		BooksLesson:                        q.BooksLesson.WithContext(ctx),
		ComponentsEditorGrammer:            q.ComponentsEditorGrammer.WithContext(ctx),
		ComponentsFreeIsFree:               q.ComponentsFreeIsFree.WithContext(ctx),
		ComponentsMaterialPage:             q.ComponentsMaterialPage.WithContext(ctx),
		CoreStore:                          q.CoreStore.WithContext(ctx),
		DefaultFreeMaterial:                q.DefaultFreeMaterial.WithContext(ctx),
		DefaultFreeMaterialsAdminMaterial:  q.DefaultFreeMaterialsAdminMaterial.WithContext(ctx),
		EditorAudio:                        q.EditorAudio.WithContext(ctx),
		EditorAudiosCategorie:              q.EditorAudiosCategorie.WithContext(ctx),
		EditorBackground:                   q.EditorBackground.WithContext(ctx),
		EditorCategoryAudio:                q.EditorCategoryAudio.WithContext(ctx),
		EditorCategoryGrammer:              q.EditorCategoryGrammer.WithContext(ctx),
		EditorCategoryImage:                q.EditorCategoryImage.WithContext(ctx),
		EditorGrammer:                      q.EditorGrammer.WithContext(ctx),
		EditorGrammersCategorie:            q.EditorGrammersCategorie.WithContext(ctx),
		EditorImage:                        q.EditorImage.WithContext(ctx),
		EditorImagesCategorie:              q.EditorImagesCategorie.WithContext(ctx),
		EditorTheme:                        q.EditorTheme.WithContext(ctx),
		Grammer:                            q.Grammer.WithContext(ctx),
		GrammersComponent:                  q.GrammersComponent.WithContext(ctx),
		I18nLocale:                         q.I18nLocale.WithContext(ctx),
		LegalDocument:                      q.LegalDocument.WithContext(ctx),
		Lesson:                             q.Lesson.WithContext(ctx),
		LessonsGrammer:                     q.LessonsGrammer.WithContext(ctx),
		Material:                           q.Material.WithContext(ctx),
		MaterialContent:                    q.MaterialContent.WithContext(ctx),
		MaterialContentSchema:              q.MaterialContentSchema.WithContext(ctx),
		MaterialDefaultLog:                 q.MaterialDefaultLog.WithContext(ctx),
		MaterialElement:                    q.MaterialElement.WithContext(ctx),
		MaterialShare:                      q.MaterialShare.WithContext(ctx),
		MaterialTag:                        q.MaterialTag.WithContext(ctx),
		MaterialsComponent:                 q.MaterialsComponent.WithContext(ctx),
		Organization:                       q.Organization.WithContext(ctx),
		Plan:                               q.Plan.WithContext(ctx),
		ShopifyEvent:                       q.ShopifyEvent.WithContext(ctx),
		StrapiAdministrator:                q.StrapiAdministrator.WithContext(ctx),
		StrapiPermission:                   q.StrapiPermission.WithContext(ctx),
		StrapiRole:                         q.StrapiRole.WithContext(ctx),
		StrapiUsersRole:                    q.StrapiUsersRole.WithContext(ctx),
		StrapiWebhook:                      q.StrapiWebhook.WithContext(ctx),
		Subscription:                       q.Subscription.WithContext(ctx),
		TeacherRecommendation:              q.TeacherRecommendation.WithContext(ctx),
		TeacherRecommendationsLocalization: q.TeacherRecommendationsLocalization.WithContext(ctx),
		TempHeaderFooter:                   q.TempHeaderFooter.WithContext(ctx),
		UploadFile:                         q.UploadFile.WithContext(ctx),
		UploadFileMorph:                    q.UploadFileMorph.WithContext(ctx),
		UserProfile:                        q.UserProfile.WithContext(ctx),
		UsersPermissionsPermission:         q.UsersPermissionsPermission.WithContext(ctx),
		UsersPermissionsRole:               q.UsersPermissionsRole.WithContext(ctx),
		UsersPermissionsUser:               q.UsersPermissionsUser.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
