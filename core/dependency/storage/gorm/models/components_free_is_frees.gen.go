// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newComponentsFreeIsFree(db *gorm.DB, opts ...gen.DOOption) componentsFreeIsFree {
	_componentsFreeIsFree := componentsFreeIsFree{}

	_componentsFreeIsFree.componentsFreeIsFreeDo.UseDB(db, opts...)
	_componentsFreeIsFree.componentsFreeIsFreeDo.UseModel(&table.ComponentsFreeIsFree{})

	tableName := _componentsFreeIsFree.componentsFreeIsFreeDo.TableName()
	_componentsFreeIsFree.ALL = field.NewAsterisk(tableName)
	_componentsFreeIsFree.ID = field.NewInt32(tableName, "id")
	_componentsFreeIsFree.IsFree = field.NewBool(tableName, "IsFree")

	_componentsFreeIsFree.fillFieldMap()

	return _componentsFreeIsFree
}

type componentsFreeIsFree struct {
	componentsFreeIsFreeDo

	ALL    field.Asterisk
	ID     field.Int32
	IsFree field.Bool

	fieldMap map[string]field.Expr
}

func (c componentsFreeIsFree) Table(newTableName string) *componentsFreeIsFree {
	c.componentsFreeIsFreeDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c componentsFreeIsFree) As(alias string) *componentsFreeIsFree {
	c.componentsFreeIsFreeDo.DO = *(c.componentsFreeIsFreeDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *componentsFreeIsFree) updateTableName(table string) *componentsFreeIsFree {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.IsFree = field.NewBool(table, "IsFree")

	c.fillFieldMap()

	return c
}

func (c *componentsFreeIsFree) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *componentsFreeIsFree) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 2)
	c.fieldMap["id"] = c.ID
	c.fieldMap["IsFree"] = c.IsFree
}

func (c componentsFreeIsFree) clone(db *gorm.DB) componentsFreeIsFree {
	c.componentsFreeIsFreeDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c componentsFreeIsFree) replaceDB(db *gorm.DB) componentsFreeIsFree {
	c.componentsFreeIsFreeDo.ReplaceDB(db)
	return c
}

type componentsFreeIsFreeDo struct{ gen.DO }

type IComponentsFreeIsFreeDo interface {
	gen.SubQuery
	Debug() IComponentsFreeIsFreeDo
	WithContext(ctx context.Context) IComponentsFreeIsFreeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IComponentsFreeIsFreeDo
	WriteDB() IComponentsFreeIsFreeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IComponentsFreeIsFreeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IComponentsFreeIsFreeDo
	Not(conds ...gen.Condition) IComponentsFreeIsFreeDo
	Or(conds ...gen.Condition) IComponentsFreeIsFreeDo
	Select(conds ...field.Expr) IComponentsFreeIsFreeDo
	Where(conds ...gen.Condition) IComponentsFreeIsFreeDo
	Order(conds ...field.Expr) IComponentsFreeIsFreeDo
	Distinct(cols ...field.Expr) IComponentsFreeIsFreeDo
	Omit(cols ...field.Expr) IComponentsFreeIsFreeDo
	Join(table schema.Tabler, on ...field.Expr) IComponentsFreeIsFreeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IComponentsFreeIsFreeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IComponentsFreeIsFreeDo
	Group(cols ...field.Expr) IComponentsFreeIsFreeDo
	Having(conds ...gen.Condition) IComponentsFreeIsFreeDo
	Limit(limit int) IComponentsFreeIsFreeDo
	Offset(offset int) IComponentsFreeIsFreeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IComponentsFreeIsFreeDo
	Unscoped() IComponentsFreeIsFreeDo
	Create(values ...*table.ComponentsFreeIsFree) error
	CreateInBatches(values []*table.ComponentsFreeIsFree, batchSize int) error
	Save(values ...*table.ComponentsFreeIsFree) error
	First() (*table.ComponentsFreeIsFree, error)
	Take() (*table.ComponentsFreeIsFree, error)
	Last() (*table.ComponentsFreeIsFree, error)
	Find() ([]*table.ComponentsFreeIsFree, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.ComponentsFreeIsFree, err error)
	FindInBatches(result *[]*table.ComponentsFreeIsFree, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.ComponentsFreeIsFree) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IComponentsFreeIsFreeDo
	Assign(attrs ...field.AssignExpr) IComponentsFreeIsFreeDo
	Joins(fields ...field.RelationField) IComponentsFreeIsFreeDo
	Preload(fields ...field.RelationField) IComponentsFreeIsFreeDo
	FirstOrInit() (*table.ComponentsFreeIsFree, error)
	FirstOrCreate() (*table.ComponentsFreeIsFree, error)
	FindByPage(offset int, limit int) (result []*table.ComponentsFreeIsFree, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IComponentsFreeIsFreeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c componentsFreeIsFreeDo) Debug() IComponentsFreeIsFreeDo {
	return c.withDO(c.DO.Debug())
}

func (c componentsFreeIsFreeDo) WithContext(ctx context.Context) IComponentsFreeIsFreeDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c componentsFreeIsFreeDo) ReadDB() IComponentsFreeIsFreeDo {
	return c.Clauses(dbresolver.Read)
}

func (c componentsFreeIsFreeDo) WriteDB() IComponentsFreeIsFreeDo {
	return c.Clauses(dbresolver.Write)
}

func (c componentsFreeIsFreeDo) Session(config *gorm.Session) IComponentsFreeIsFreeDo {
	return c.withDO(c.DO.Session(config))
}

func (c componentsFreeIsFreeDo) Clauses(conds ...clause.Expression) IComponentsFreeIsFreeDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c componentsFreeIsFreeDo) Returning(value interface{}, columns ...string) IComponentsFreeIsFreeDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c componentsFreeIsFreeDo) Not(conds ...gen.Condition) IComponentsFreeIsFreeDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c componentsFreeIsFreeDo) Or(conds ...gen.Condition) IComponentsFreeIsFreeDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c componentsFreeIsFreeDo) Select(conds ...field.Expr) IComponentsFreeIsFreeDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c componentsFreeIsFreeDo) Where(conds ...gen.Condition) IComponentsFreeIsFreeDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c componentsFreeIsFreeDo) Order(conds ...field.Expr) IComponentsFreeIsFreeDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c componentsFreeIsFreeDo) Distinct(cols ...field.Expr) IComponentsFreeIsFreeDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c componentsFreeIsFreeDo) Omit(cols ...field.Expr) IComponentsFreeIsFreeDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c componentsFreeIsFreeDo) Join(table schema.Tabler, on ...field.Expr) IComponentsFreeIsFreeDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c componentsFreeIsFreeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IComponentsFreeIsFreeDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c componentsFreeIsFreeDo) RightJoin(table schema.Tabler, on ...field.Expr) IComponentsFreeIsFreeDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c componentsFreeIsFreeDo) Group(cols ...field.Expr) IComponentsFreeIsFreeDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c componentsFreeIsFreeDo) Having(conds ...gen.Condition) IComponentsFreeIsFreeDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c componentsFreeIsFreeDo) Limit(limit int) IComponentsFreeIsFreeDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c componentsFreeIsFreeDo) Offset(offset int) IComponentsFreeIsFreeDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c componentsFreeIsFreeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IComponentsFreeIsFreeDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c componentsFreeIsFreeDo) Unscoped() IComponentsFreeIsFreeDo {
	return c.withDO(c.DO.Unscoped())
}

func (c componentsFreeIsFreeDo) Create(values ...*table.ComponentsFreeIsFree) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c componentsFreeIsFreeDo) CreateInBatches(values []*table.ComponentsFreeIsFree, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c componentsFreeIsFreeDo) Save(values ...*table.ComponentsFreeIsFree) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c componentsFreeIsFreeDo) First() (*table.ComponentsFreeIsFree, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.ComponentsFreeIsFree), nil
	}
}

func (c componentsFreeIsFreeDo) Take() (*table.ComponentsFreeIsFree, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.ComponentsFreeIsFree), nil
	}
}

func (c componentsFreeIsFreeDo) Last() (*table.ComponentsFreeIsFree, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.ComponentsFreeIsFree), nil
	}
}

func (c componentsFreeIsFreeDo) Find() ([]*table.ComponentsFreeIsFree, error) {
	result, err := c.DO.Find()
	return result.([]*table.ComponentsFreeIsFree), err
}

func (c componentsFreeIsFreeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.ComponentsFreeIsFree, err error) {
	buf := make([]*table.ComponentsFreeIsFree, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c componentsFreeIsFreeDo) FindInBatches(result *[]*table.ComponentsFreeIsFree, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c componentsFreeIsFreeDo) Attrs(attrs ...field.AssignExpr) IComponentsFreeIsFreeDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c componentsFreeIsFreeDo) Assign(attrs ...field.AssignExpr) IComponentsFreeIsFreeDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c componentsFreeIsFreeDo) Joins(fields ...field.RelationField) IComponentsFreeIsFreeDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c componentsFreeIsFreeDo) Preload(fields ...field.RelationField) IComponentsFreeIsFreeDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c componentsFreeIsFreeDo) FirstOrInit() (*table.ComponentsFreeIsFree, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.ComponentsFreeIsFree), nil
	}
}

func (c componentsFreeIsFreeDo) FirstOrCreate() (*table.ComponentsFreeIsFree, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.ComponentsFreeIsFree), nil
	}
}

func (c componentsFreeIsFreeDo) FindByPage(offset int, limit int) (result []*table.ComponentsFreeIsFree, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c componentsFreeIsFreeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c componentsFreeIsFreeDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c componentsFreeIsFreeDo) Delete(models ...*table.ComponentsFreeIsFree) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *componentsFreeIsFreeDo) withDO(do gen.Dao) *componentsFreeIsFreeDo {
	c.DO = *do.(*gen.DO)
	return c
}
