// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newEditorImage(db *gorm.DB, opts ...gen.DOOption) editorImage {
	_editorImage := editorImage{}

	_editorImage.editorImageDo.UseDB(db, opts...)
	_editorImage.editorImageDo.UseModel(&table.EditorImage{})

	tableName := _editorImage.editorImageDo.TableName()
	_editorImage.ALL = field.NewAsterisk(tableName)
	_editorImage.ID = field.NewInt32(tableName, "id")
	_editorImage.Name = field.NewString(tableName, "name")
	_editorImage.Tag = field.NewString(tableName, "tag")
	_editorImage.Note = field.NewString(tableName, "note")
	_editorImage.PublishedAt = field.NewTime(tableName, "published_at")
	_editorImage.CreatedBy = field.NewInt32(tableName, "created_by")
	_editorImage.UpdatedBy = field.NewInt32(tableName, "updated_by")
	_editorImage.CreatedAt = field.NewTime(tableName, "created_at")
	_editorImage.UpdatedAt = field.NewTime(tableName, "updated_at")
	_editorImage.Category = field.NewInt32(tableName, "category")
	_editorImage.Organization = field.NewInt32(tableName, "organization")
	_editorImage.TagSimplify = field.NewString(tableName, "tag_simplify")

	_editorImage.fillFieldMap()

	return _editorImage
}

type editorImage struct {
	editorImageDo

	ALL          field.Asterisk
	ID           field.Int32
	Name         field.String
	Tag          field.String
	Note         field.String
	PublishedAt  field.Time
	CreatedBy    field.Int32
	UpdatedBy    field.Int32
	CreatedAt    field.Time
	UpdatedAt    field.Time
	Category     field.Int32
	Organization field.Int32
	TagSimplify  field.String

	fieldMap map[string]field.Expr
}

func (e editorImage) Table(newTableName string) *editorImage {
	e.editorImageDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e editorImage) As(alias string) *editorImage {
	e.editorImageDo.DO = *(e.editorImageDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *editorImage) updateTableName(table string) *editorImage {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Name = field.NewString(table, "name")
	e.Tag = field.NewString(table, "tag")
	e.Note = field.NewString(table, "note")
	e.PublishedAt = field.NewTime(table, "published_at")
	e.CreatedBy = field.NewInt32(table, "created_by")
	e.UpdatedBy = field.NewInt32(table, "updated_by")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.Category = field.NewInt32(table, "category")
	e.Organization = field.NewInt32(table, "organization")
	e.TagSimplify = field.NewString(table, "tag_simplify")

	e.fillFieldMap()

	return e
}

func (e *editorImage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *editorImage) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 12)
	e.fieldMap["id"] = e.ID
	e.fieldMap["name"] = e.Name
	e.fieldMap["tag"] = e.Tag
	e.fieldMap["note"] = e.Note
	e.fieldMap["published_at"] = e.PublishedAt
	e.fieldMap["created_by"] = e.CreatedBy
	e.fieldMap["updated_by"] = e.UpdatedBy
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["category"] = e.Category
	e.fieldMap["organization"] = e.Organization
	e.fieldMap["tag_simplify"] = e.TagSimplify
}

func (e editorImage) clone(db *gorm.DB) editorImage {
	e.editorImageDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e editorImage) replaceDB(db *gorm.DB) editorImage {
	e.editorImageDo.ReplaceDB(db)
	return e
}

type editorImageDo struct{ gen.DO }

type IEditorImageDo interface {
	gen.SubQuery
	Debug() IEditorImageDo
	WithContext(ctx context.Context) IEditorImageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEditorImageDo
	WriteDB() IEditorImageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEditorImageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEditorImageDo
	Not(conds ...gen.Condition) IEditorImageDo
	Or(conds ...gen.Condition) IEditorImageDo
	Select(conds ...field.Expr) IEditorImageDo
	Where(conds ...gen.Condition) IEditorImageDo
	Order(conds ...field.Expr) IEditorImageDo
	Distinct(cols ...field.Expr) IEditorImageDo
	Omit(cols ...field.Expr) IEditorImageDo
	Join(table schema.Tabler, on ...field.Expr) IEditorImageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEditorImageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEditorImageDo
	Group(cols ...field.Expr) IEditorImageDo
	Having(conds ...gen.Condition) IEditorImageDo
	Limit(limit int) IEditorImageDo
	Offset(offset int) IEditorImageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEditorImageDo
	Unscoped() IEditorImageDo
	Create(values ...*table.EditorImage) error
	CreateInBatches(values []*table.EditorImage, batchSize int) error
	Save(values ...*table.EditorImage) error
	First() (*table.EditorImage, error)
	Take() (*table.EditorImage, error)
	Last() (*table.EditorImage, error)
	Find() ([]*table.EditorImage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.EditorImage, err error)
	FindInBatches(result *[]*table.EditorImage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.EditorImage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEditorImageDo
	Assign(attrs ...field.AssignExpr) IEditorImageDo
	Joins(fields ...field.RelationField) IEditorImageDo
	Preload(fields ...field.RelationField) IEditorImageDo
	FirstOrInit() (*table.EditorImage, error)
	FirstOrCreate() (*table.EditorImage, error)
	FindByPage(offset int, limit int) (result []*table.EditorImage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEditorImageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e editorImageDo) Debug() IEditorImageDo {
	return e.withDO(e.DO.Debug())
}

func (e editorImageDo) WithContext(ctx context.Context) IEditorImageDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e editorImageDo) ReadDB() IEditorImageDo {
	return e.Clauses(dbresolver.Read)
}

func (e editorImageDo) WriteDB() IEditorImageDo {
	return e.Clauses(dbresolver.Write)
}

func (e editorImageDo) Session(config *gorm.Session) IEditorImageDo {
	return e.withDO(e.DO.Session(config))
}

func (e editorImageDo) Clauses(conds ...clause.Expression) IEditorImageDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e editorImageDo) Returning(value interface{}, columns ...string) IEditorImageDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e editorImageDo) Not(conds ...gen.Condition) IEditorImageDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e editorImageDo) Or(conds ...gen.Condition) IEditorImageDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e editorImageDo) Select(conds ...field.Expr) IEditorImageDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e editorImageDo) Where(conds ...gen.Condition) IEditorImageDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e editorImageDo) Order(conds ...field.Expr) IEditorImageDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e editorImageDo) Distinct(cols ...field.Expr) IEditorImageDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e editorImageDo) Omit(cols ...field.Expr) IEditorImageDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e editorImageDo) Join(table schema.Tabler, on ...field.Expr) IEditorImageDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e editorImageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEditorImageDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e editorImageDo) RightJoin(table schema.Tabler, on ...field.Expr) IEditorImageDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e editorImageDo) Group(cols ...field.Expr) IEditorImageDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e editorImageDo) Having(conds ...gen.Condition) IEditorImageDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e editorImageDo) Limit(limit int) IEditorImageDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e editorImageDo) Offset(offset int) IEditorImageDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e editorImageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEditorImageDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e editorImageDo) Unscoped() IEditorImageDo {
	return e.withDO(e.DO.Unscoped())
}

func (e editorImageDo) Create(values ...*table.EditorImage) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e editorImageDo) CreateInBatches(values []*table.EditorImage, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e editorImageDo) Save(values ...*table.EditorImage) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e editorImageDo) First() (*table.EditorImage, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorImage), nil
	}
}

func (e editorImageDo) Take() (*table.EditorImage, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorImage), nil
	}
}

func (e editorImageDo) Last() (*table.EditorImage, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorImage), nil
	}
}

func (e editorImageDo) Find() ([]*table.EditorImage, error) {
	result, err := e.DO.Find()
	return result.([]*table.EditorImage), err
}

func (e editorImageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.EditorImage, err error) {
	buf := make([]*table.EditorImage, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e editorImageDo) FindInBatches(result *[]*table.EditorImage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e editorImageDo) Attrs(attrs ...field.AssignExpr) IEditorImageDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e editorImageDo) Assign(attrs ...field.AssignExpr) IEditorImageDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e editorImageDo) Joins(fields ...field.RelationField) IEditorImageDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e editorImageDo) Preload(fields ...field.RelationField) IEditorImageDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e editorImageDo) FirstOrInit() (*table.EditorImage, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorImage), nil
	}
}

func (e editorImageDo) FirstOrCreate() (*table.EditorImage, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorImage), nil
	}
}

func (e editorImageDo) FindByPage(offset int, limit int) (result []*table.EditorImage, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e editorImageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e editorImageDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e editorImageDo) Delete(models ...*table.EditorImage) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *editorImageDo) withDO(do gen.Dao) *editorImageDo {
	e.DO = *do.(*gen.DO)
	return e
}
