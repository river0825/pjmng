// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newMaterialsComponent(db *gorm.DB, opts ...gen.DOOption) materialsComponent {
	_materialsComponent := materialsComponent{}

	_materialsComponent.materialsComponentDo.UseDB(db, opts...)
	_materialsComponent.materialsComponentDo.UseModel(&table.MaterialsComponent{})

	tableName := _materialsComponent.materialsComponentDo.TableName()
	_materialsComponent.ALL = field.NewAsterisk(tableName)
	_materialsComponent.ID = field.NewInt32(tableName, "id")
	_materialsComponent.Field = field.NewString(tableName, "field")
	_materialsComponent.Order_ = field.NewInt32(tableName, "order")
	_materialsComponent.ComponentType = field.NewString(tableName, "component_type")
	_materialsComponent.ComponentID = field.NewInt32(tableName, "component_id")
	_materialsComponent.MaterialID = field.NewInt32(tableName, "material_id")

	_materialsComponent.fillFieldMap()

	return _materialsComponent
}

type materialsComponent struct {
	materialsComponentDo

	ALL           field.Asterisk
	ID            field.Int32
	Field         field.String
	Order_        field.Int32
	ComponentType field.String
	ComponentID   field.Int32
	MaterialID    field.Int32

	fieldMap map[string]field.Expr
}

func (m materialsComponent) Table(newTableName string) *materialsComponent {
	m.materialsComponentDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m materialsComponent) As(alias string) *materialsComponent {
	m.materialsComponentDo.DO = *(m.materialsComponentDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *materialsComponent) updateTableName(table string) *materialsComponent {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.Field = field.NewString(table, "field")
	m.Order_ = field.NewInt32(table, "order")
	m.ComponentType = field.NewString(table, "component_type")
	m.ComponentID = field.NewInt32(table, "component_id")
	m.MaterialID = field.NewInt32(table, "material_id")

	m.fillFieldMap()

	return m
}

func (m *materialsComponent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *materialsComponent) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 6)
	m.fieldMap["id"] = m.ID
	m.fieldMap["field"] = m.Field
	m.fieldMap["order"] = m.Order_
	m.fieldMap["component_type"] = m.ComponentType
	m.fieldMap["component_id"] = m.ComponentID
	m.fieldMap["material_id"] = m.MaterialID
}

func (m materialsComponent) clone(db *gorm.DB) materialsComponent {
	m.materialsComponentDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m materialsComponent) replaceDB(db *gorm.DB) materialsComponent {
	m.materialsComponentDo.ReplaceDB(db)
	return m
}

type materialsComponentDo struct{ gen.DO }

type IMaterialsComponentDo interface {
	gen.SubQuery
	Debug() IMaterialsComponentDo
	WithContext(ctx context.Context) IMaterialsComponentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMaterialsComponentDo
	WriteDB() IMaterialsComponentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMaterialsComponentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMaterialsComponentDo
	Not(conds ...gen.Condition) IMaterialsComponentDo
	Or(conds ...gen.Condition) IMaterialsComponentDo
	Select(conds ...field.Expr) IMaterialsComponentDo
	Where(conds ...gen.Condition) IMaterialsComponentDo
	Order(conds ...field.Expr) IMaterialsComponentDo
	Distinct(cols ...field.Expr) IMaterialsComponentDo
	Omit(cols ...field.Expr) IMaterialsComponentDo
	Join(table schema.Tabler, on ...field.Expr) IMaterialsComponentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMaterialsComponentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMaterialsComponentDo
	Group(cols ...field.Expr) IMaterialsComponentDo
	Having(conds ...gen.Condition) IMaterialsComponentDo
	Limit(limit int) IMaterialsComponentDo
	Offset(offset int) IMaterialsComponentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMaterialsComponentDo
	Unscoped() IMaterialsComponentDo
	Create(values ...*table.MaterialsComponent) error
	CreateInBatches(values []*table.MaterialsComponent, batchSize int) error
	Save(values ...*table.MaterialsComponent) error
	First() (*table.MaterialsComponent, error)
	Take() (*table.MaterialsComponent, error)
	Last() (*table.MaterialsComponent, error)
	Find() ([]*table.MaterialsComponent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.MaterialsComponent, err error)
	FindInBatches(result *[]*table.MaterialsComponent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.MaterialsComponent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMaterialsComponentDo
	Assign(attrs ...field.AssignExpr) IMaterialsComponentDo
	Joins(fields ...field.RelationField) IMaterialsComponentDo
	Preload(fields ...field.RelationField) IMaterialsComponentDo
	FirstOrInit() (*table.MaterialsComponent, error)
	FirstOrCreate() (*table.MaterialsComponent, error)
	FindByPage(offset int, limit int) (result []*table.MaterialsComponent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMaterialsComponentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m materialsComponentDo) Debug() IMaterialsComponentDo {
	return m.withDO(m.DO.Debug())
}

func (m materialsComponentDo) WithContext(ctx context.Context) IMaterialsComponentDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m materialsComponentDo) ReadDB() IMaterialsComponentDo {
	return m.Clauses(dbresolver.Read)
}

func (m materialsComponentDo) WriteDB() IMaterialsComponentDo {
	return m.Clauses(dbresolver.Write)
}

func (m materialsComponentDo) Session(config *gorm.Session) IMaterialsComponentDo {
	return m.withDO(m.DO.Session(config))
}

func (m materialsComponentDo) Clauses(conds ...clause.Expression) IMaterialsComponentDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m materialsComponentDo) Returning(value interface{}, columns ...string) IMaterialsComponentDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m materialsComponentDo) Not(conds ...gen.Condition) IMaterialsComponentDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m materialsComponentDo) Or(conds ...gen.Condition) IMaterialsComponentDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m materialsComponentDo) Select(conds ...field.Expr) IMaterialsComponentDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m materialsComponentDo) Where(conds ...gen.Condition) IMaterialsComponentDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m materialsComponentDo) Order(conds ...field.Expr) IMaterialsComponentDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m materialsComponentDo) Distinct(cols ...field.Expr) IMaterialsComponentDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m materialsComponentDo) Omit(cols ...field.Expr) IMaterialsComponentDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m materialsComponentDo) Join(table schema.Tabler, on ...field.Expr) IMaterialsComponentDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m materialsComponentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMaterialsComponentDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m materialsComponentDo) RightJoin(table schema.Tabler, on ...field.Expr) IMaterialsComponentDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m materialsComponentDo) Group(cols ...field.Expr) IMaterialsComponentDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m materialsComponentDo) Having(conds ...gen.Condition) IMaterialsComponentDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m materialsComponentDo) Limit(limit int) IMaterialsComponentDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m materialsComponentDo) Offset(offset int) IMaterialsComponentDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m materialsComponentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMaterialsComponentDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m materialsComponentDo) Unscoped() IMaterialsComponentDo {
	return m.withDO(m.DO.Unscoped())
}

func (m materialsComponentDo) Create(values ...*table.MaterialsComponent) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m materialsComponentDo) CreateInBatches(values []*table.MaterialsComponent, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m materialsComponentDo) Save(values ...*table.MaterialsComponent) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m materialsComponentDo) First() (*table.MaterialsComponent, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.MaterialsComponent), nil
	}
}

func (m materialsComponentDo) Take() (*table.MaterialsComponent, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.MaterialsComponent), nil
	}
}

func (m materialsComponentDo) Last() (*table.MaterialsComponent, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.MaterialsComponent), nil
	}
}

func (m materialsComponentDo) Find() ([]*table.MaterialsComponent, error) {
	result, err := m.DO.Find()
	return result.([]*table.MaterialsComponent), err
}

func (m materialsComponentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.MaterialsComponent, err error) {
	buf := make([]*table.MaterialsComponent, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m materialsComponentDo) FindInBatches(result *[]*table.MaterialsComponent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m materialsComponentDo) Attrs(attrs ...field.AssignExpr) IMaterialsComponentDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m materialsComponentDo) Assign(attrs ...field.AssignExpr) IMaterialsComponentDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m materialsComponentDo) Joins(fields ...field.RelationField) IMaterialsComponentDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m materialsComponentDo) Preload(fields ...field.RelationField) IMaterialsComponentDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m materialsComponentDo) FirstOrInit() (*table.MaterialsComponent, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.MaterialsComponent), nil
	}
}

func (m materialsComponentDo) FirstOrCreate() (*table.MaterialsComponent, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.MaterialsComponent), nil
	}
}

func (m materialsComponentDo) FindByPage(offset int, limit int) (result []*table.MaterialsComponent, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m materialsComponentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m materialsComponentDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m materialsComponentDo) Delete(models ...*table.MaterialsComponent) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *materialsComponentDo) withDO(do gen.Dao) *materialsComponentDo {
	m.DO = *do.(*gen.DO)
	return m
}
