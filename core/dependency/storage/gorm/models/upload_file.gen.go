// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newUploadFile(db *gorm.DB, opts ...gen.DOOption) uploadFile {
	_uploadFile := uploadFile{}

	_uploadFile.uploadFileDo.UseDB(db, opts...)
	_uploadFile.uploadFileDo.UseModel(&table.UploadFile{})

	tableName := _uploadFile.uploadFileDo.TableName()
	_uploadFile.ALL = field.NewAsterisk(tableName)
	_uploadFile.ID = field.NewInt32(tableName, "id")
	_uploadFile.Name = field.NewString(tableName, "name")
	_uploadFile.AlternativeText = field.NewString(tableName, "alternativeText")
	_uploadFile.Caption = field.NewString(tableName, "caption")
	_uploadFile.Width = field.NewInt32(tableName, "width")
	_uploadFile.Height = field.NewInt32(tableName, "height")
	_uploadFile.Formats = field.NewField(tableName, "formats")
	_uploadFile.Hash = field.NewString(tableName, "hash")
	_uploadFile.Ext = field.NewString(tableName, "ext")
	_uploadFile.Mime = field.NewString(tableName, "mime")
	_uploadFile.Size = field.NewFloat64(tableName, "size")
	_uploadFile.URL = field.NewString(tableName, "url")
	_uploadFile.PreviewURL = field.NewString(tableName, "previewUrl")
	_uploadFile.Provider = field.NewString(tableName, "provider")
	_uploadFile.ProviderMetadata = field.NewField(tableName, "provider_metadata")
	_uploadFile.CreatedBy = field.NewInt32(tableName, "created_by")
	_uploadFile.UpdatedBy = field.NewInt32(tableName, "updated_by")
	_uploadFile.CreatedAt = field.NewTime(tableName, "created_at")
	_uploadFile.UpdatedAt = field.NewTime(tableName, "updated_at")

	_uploadFile.fillFieldMap()

	return _uploadFile
}

type uploadFile struct {
	uploadFileDo

	ALL              field.Asterisk
	ID               field.Int32
	Name             field.String
	AlternativeText  field.String
	Caption          field.String
	Width            field.Int32
	Height           field.Int32
	Formats          field.Field
	Hash             field.String
	Ext              field.String
	Mime             field.String
	Size             field.Float64
	URL              field.String
	PreviewURL       field.String
	Provider         field.String
	ProviderMetadata field.Field
	CreatedBy        field.Int32
	UpdatedBy        field.Int32
	CreatedAt        field.Time
	UpdatedAt        field.Time

	fieldMap map[string]field.Expr
}

func (u uploadFile) Table(newTableName string) *uploadFile {
	u.uploadFileDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u uploadFile) As(alias string) *uploadFile {
	u.uploadFileDo.DO = *(u.uploadFileDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *uploadFile) updateTableName(table string) *uploadFile {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.Name = field.NewString(table, "name")
	u.AlternativeText = field.NewString(table, "alternativeText")
	u.Caption = field.NewString(table, "caption")
	u.Width = field.NewInt32(table, "width")
	u.Height = field.NewInt32(table, "height")
	u.Formats = field.NewField(table, "formats")
	u.Hash = field.NewString(table, "hash")
	u.Ext = field.NewString(table, "ext")
	u.Mime = field.NewString(table, "mime")
	u.Size = field.NewFloat64(table, "size")
	u.URL = field.NewString(table, "url")
	u.PreviewURL = field.NewString(table, "previewUrl")
	u.Provider = field.NewString(table, "provider")
	u.ProviderMetadata = field.NewField(table, "provider_metadata")
	u.CreatedBy = field.NewInt32(table, "created_by")
	u.UpdatedBy = field.NewInt32(table, "updated_by")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *uploadFile) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *uploadFile) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 19)
	u.fieldMap["id"] = u.ID
	u.fieldMap["name"] = u.Name
	u.fieldMap["alternativeText"] = u.AlternativeText
	u.fieldMap["caption"] = u.Caption
	u.fieldMap["width"] = u.Width
	u.fieldMap["height"] = u.Height
	u.fieldMap["formats"] = u.Formats
	u.fieldMap["hash"] = u.Hash
	u.fieldMap["ext"] = u.Ext
	u.fieldMap["mime"] = u.Mime
	u.fieldMap["size"] = u.Size
	u.fieldMap["url"] = u.URL
	u.fieldMap["previewUrl"] = u.PreviewURL
	u.fieldMap["provider"] = u.Provider
	u.fieldMap["provider_metadata"] = u.ProviderMetadata
	u.fieldMap["created_by"] = u.CreatedBy
	u.fieldMap["updated_by"] = u.UpdatedBy
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u uploadFile) clone(db *gorm.DB) uploadFile {
	u.uploadFileDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u uploadFile) replaceDB(db *gorm.DB) uploadFile {
	u.uploadFileDo.ReplaceDB(db)
	return u
}

type uploadFileDo struct{ gen.DO }

type IUploadFileDo interface {
	gen.SubQuery
	Debug() IUploadFileDo
	WithContext(ctx context.Context) IUploadFileDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUploadFileDo
	WriteDB() IUploadFileDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUploadFileDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUploadFileDo
	Not(conds ...gen.Condition) IUploadFileDo
	Or(conds ...gen.Condition) IUploadFileDo
	Select(conds ...field.Expr) IUploadFileDo
	Where(conds ...gen.Condition) IUploadFileDo
	Order(conds ...field.Expr) IUploadFileDo
	Distinct(cols ...field.Expr) IUploadFileDo
	Omit(cols ...field.Expr) IUploadFileDo
	Join(table schema.Tabler, on ...field.Expr) IUploadFileDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUploadFileDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUploadFileDo
	Group(cols ...field.Expr) IUploadFileDo
	Having(conds ...gen.Condition) IUploadFileDo
	Limit(limit int) IUploadFileDo
	Offset(offset int) IUploadFileDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUploadFileDo
	Unscoped() IUploadFileDo
	Create(values ...*table.UploadFile) error
	CreateInBatches(values []*table.UploadFile, batchSize int) error
	Save(values ...*table.UploadFile) error
	First() (*table.UploadFile, error)
	Take() (*table.UploadFile, error)
	Last() (*table.UploadFile, error)
	Find() ([]*table.UploadFile, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.UploadFile, err error)
	FindInBatches(result *[]*table.UploadFile, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.UploadFile) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUploadFileDo
	Assign(attrs ...field.AssignExpr) IUploadFileDo
	Joins(fields ...field.RelationField) IUploadFileDo
	Preload(fields ...field.RelationField) IUploadFileDo
	FirstOrInit() (*table.UploadFile, error)
	FirstOrCreate() (*table.UploadFile, error)
	FindByPage(offset int, limit int) (result []*table.UploadFile, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUploadFileDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u uploadFileDo) Debug() IUploadFileDo {
	return u.withDO(u.DO.Debug())
}

func (u uploadFileDo) WithContext(ctx context.Context) IUploadFileDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u uploadFileDo) ReadDB() IUploadFileDo {
	return u.Clauses(dbresolver.Read)
}

func (u uploadFileDo) WriteDB() IUploadFileDo {
	return u.Clauses(dbresolver.Write)
}

func (u uploadFileDo) Session(config *gorm.Session) IUploadFileDo {
	return u.withDO(u.DO.Session(config))
}

func (u uploadFileDo) Clauses(conds ...clause.Expression) IUploadFileDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u uploadFileDo) Returning(value interface{}, columns ...string) IUploadFileDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u uploadFileDo) Not(conds ...gen.Condition) IUploadFileDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u uploadFileDo) Or(conds ...gen.Condition) IUploadFileDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u uploadFileDo) Select(conds ...field.Expr) IUploadFileDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u uploadFileDo) Where(conds ...gen.Condition) IUploadFileDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u uploadFileDo) Order(conds ...field.Expr) IUploadFileDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u uploadFileDo) Distinct(cols ...field.Expr) IUploadFileDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u uploadFileDo) Omit(cols ...field.Expr) IUploadFileDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u uploadFileDo) Join(table schema.Tabler, on ...field.Expr) IUploadFileDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u uploadFileDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUploadFileDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u uploadFileDo) RightJoin(table schema.Tabler, on ...field.Expr) IUploadFileDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u uploadFileDo) Group(cols ...field.Expr) IUploadFileDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u uploadFileDo) Having(conds ...gen.Condition) IUploadFileDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u uploadFileDo) Limit(limit int) IUploadFileDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u uploadFileDo) Offset(offset int) IUploadFileDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u uploadFileDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUploadFileDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u uploadFileDo) Unscoped() IUploadFileDo {
	return u.withDO(u.DO.Unscoped())
}

func (u uploadFileDo) Create(values ...*table.UploadFile) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u uploadFileDo) CreateInBatches(values []*table.UploadFile, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u uploadFileDo) Save(values ...*table.UploadFile) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u uploadFileDo) First() (*table.UploadFile, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.UploadFile), nil
	}
}

func (u uploadFileDo) Take() (*table.UploadFile, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.UploadFile), nil
	}
}

func (u uploadFileDo) Last() (*table.UploadFile, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.UploadFile), nil
	}
}

func (u uploadFileDo) Find() ([]*table.UploadFile, error) {
	result, err := u.DO.Find()
	return result.([]*table.UploadFile), err
}

func (u uploadFileDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.UploadFile, err error) {
	buf := make([]*table.UploadFile, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u uploadFileDo) FindInBatches(result *[]*table.UploadFile, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u uploadFileDo) Attrs(attrs ...field.AssignExpr) IUploadFileDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u uploadFileDo) Assign(attrs ...field.AssignExpr) IUploadFileDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u uploadFileDo) Joins(fields ...field.RelationField) IUploadFileDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u uploadFileDo) Preload(fields ...field.RelationField) IUploadFileDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u uploadFileDo) FirstOrInit() (*table.UploadFile, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.UploadFile), nil
	}
}

func (u uploadFileDo) FirstOrCreate() (*table.UploadFile, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.UploadFile), nil
	}
}

func (u uploadFileDo) FindByPage(offset int, limit int) (result []*table.UploadFile, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u uploadFileDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u uploadFileDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u uploadFileDo) Delete(models ...*table.UploadFile) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *uploadFileDo) withDO(do gen.Dao) *uploadFileDo {
	u.DO = *do.(*gen.DO)
	return u
}
