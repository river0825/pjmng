// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newBooksLesson(db *gorm.DB, opts ...gen.DOOption) booksLesson {
	_booksLesson := booksLesson{}

	_booksLesson.booksLessonDo.UseDB(db, opts...)
	_booksLesson.booksLessonDo.UseModel(&table.BooksLesson{})

	tableName := _booksLesson.booksLessonDo.TableName()
	_booksLesson.ALL = field.NewAsterisk(tableName)
	_booksLesson.ID = field.NewInt32(tableName, "id")
	_booksLesson.BookID = field.NewInt32(tableName, "book_id")
	_booksLesson.LessonID = field.NewInt32(tableName, "lesson_id")

	_booksLesson.fillFieldMap()

	return _booksLesson
}

type booksLesson struct {
	booksLessonDo

	ALL      field.Asterisk
	ID       field.Int32
	BookID   field.Int32
	LessonID field.Int32

	fieldMap map[string]field.Expr
}

func (b booksLesson) Table(newTableName string) *booksLesson {
	b.booksLessonDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b booksLesson) As(alias string) *booksLesson {
	b.booksLessonDo.DO = *(b.booksLessonDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *booksLesson) updateTableName(table string) *booksLesson {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt32(table, "id")
	b.BookID = field.NewInt32(table, "book_id")
	b.LessonID = field.NewInt32(table, "lesson_id")

	b.fillFieldMap()

	return b
}

func (b *booksLesson) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *booksLesson) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 3)
	b.fieldMap["id"] = b.ID
	b.fieldMap["book_id"] = b.BookID
	b.fieldMap["lesson_id"] = b.LessonID
}

func (b booksLesson) clone(db *gorm.DB) booksLesson {
	b.booksLessonDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b booksLesson) replaceDB(db *gorm.DB) booksLesson {
	b.booksLessonDo.ReplaceDB(db)
	return b
}

type booksLessonDo struct{ gen.DO }

type IBooksLessonDo interface {
	gen.SubQuery
	Debug() IBooksLessonDo
	WithContext(ctx context.Context) IBooksLessonDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBooksLessonDo
	WriteDB() IBooksLessonDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBooksLessonDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBooksLessonDo
	Not(conds ...gen.Condition) IBooksLessonDo
	Or(conds ...gen.Condition) IBooksLessonDo
	Select(conds ...field.Expr) IBooksLessonDo
	Where(conds ...gen.Condition) IBooksLessonDo
	Order(conds ...field.Expr) IBooksLessonDo
	Distinct(cols ...field.Expr) IBooksLessonDo
	Omit(cols ...field.Expr) IBooksLessonDo
	Join(table schema.Tabler, on ...field.Expr) IBooksLessonDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBooksLessonDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBooksLessonDo
	Group(cols ...field.Expr) IBooksLessonDo
	Having(conds ...gen.Condition) IBooksLessonDo
	Limit(limit int) IBooksLessonDo
	Offset(offset int) IBooksLessonDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBooksLessonDo
	Unscoped() IBooksLessonDo
	Create(values ...*table.BooksLesson) error
	CreateInBatches(values []*table.BooksLesson, batchSize int) error
	Save(values ...*table.BooksLesson) error
	First() (*table.BooksLesson, error)
	Take() (*table.BooksLesson, error)
	Last() (*table.BooksLesson, error)
	Find() ([]*table.BooksLesson, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.BooksLesson, err error)
	FindInBatches(result *[]*table.BooksLesson, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.BooksLesson) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBooksLessonDo
	Assign(attrs ...field.AssignExpr) IBooksLessonDo
	Joins(fields ...field.RelationField) IBooksLessonDo
	Preload(fields ...field.RelationField) IBooksLessonDo
	FirstOrInit() (*table.BooksLesson, error)
	FirstOrCreate() (*table.BooksLesson, error)
	FindByPage(offset int, limit int) (result []*table.BooksLesson, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBooksLessonDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b booksLessonDo) Debug() IBooksLessonDo {
	return b.withDO(b.DO.Debug())
}

func (b booksLessonDo) WithContext(ctx context.Context) IBooksLessonDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b booksLessonDo) ReadDB() IBooksLessonDo {
	return b.Clauses(dbresolver.Read)
}

func (b booksLessonDo) WriteDB() IBooksLessonDo {
	return b.Clauses(dbresolver.Write)
}

func (b booksLessonDo) Session(config *gorm.Session) IBooksLessonDo {
	return b.withDO(b.DO.Session(config))
}

func (b booksLessonDo) Clauses(conds ...clause.Expression) IBooksLessonDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b booksLessonDo) Returning(value interface{}, columns ...string) IBooksLessonDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b booksLessonDo) Not(conds ...gen.Condition) IBooksLessonDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b booksLessonDo) Or(conds ...gen.Condition) IBooksLessonDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b booksLessonDo) Select(conds ...field.Expr) IBooksLessonDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b booksLessonDo) Where(conds ...gen.Condition) IBooksLessonDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b booksLessonDo) Order(conds ...field.Expr) IBooksLessonDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b booksLessonDo) Distinct(cols ...field.Expr) IBooksLessonDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b booksLessonDo) Omit(cols ...field.Expr) IBooksLessonDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b booksLessonDo) Join(table schema.Tabler, on ...field.Expr) IBooksLessonDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b booksLessonDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBooksLessonDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b booksLessonDo) RightJoin(table schema.Tabler, on ...field.Expr) IBooksLessonDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b booksLessonDo) Group(cols ...field.Expr) IBooksLessonDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b booksLessonDo) Having(conds ...gen.Condition) IBooksLessonDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b booksLessonDo) Limit(limit int) IBooksLessonDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b booksLessonDo) Offset(offset int) IBooksLessonDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b booksLessonDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBooksLessonDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b booksLessonDo) Unscoped() IBooksLessonDo {
	return b.withDO(b.DO.Unscoped())
}

func (b booksLessonDo) Create(values ...*table.BooksLesson) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b booksLessonDo) CreateInBatches(values []*table.BooksLesson, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b booksLessonDo) Save(values ...*table.BooksLesson) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b booksLessonDo) First() (*table.BooksLesson, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.BooksLesson), nil
	}
}

func (b booksLessonDo) Take() (*table.BooksLesson, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.BooksLesson), nil
	}
}

func (b booksLessonDo) Last() (*table.BooksLesson, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.BooksLesson), nil
	}
}

func (b booksLessonDo) Find() ([]*table.BooksLesson, error) {
	result, err := b.DO.Find()
	return result.([]*table.BooksLesson), err
}

func (b booksLessonDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.BooksLesson, err error) {
	buf := make([]*table.BooksLesson, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b booksLessonDo) FindInBatches(result *[]*table.BooksLesson, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b booksLessonDo) Attrs(attrs ...field.AssignExpr) IBooksLessonDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b booksLessonDo) Assign(attrs ...field.AssignExpr) IBooksLessonDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b booksLessonDo) Joins(fields ...field.RelationField) IBooksLessonDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b booksLessonDo) Preload(fields ...field.RelationField) IBooksLessonDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b booksLessonDo) FirstOrInit() (*table.BooksLesson, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.BooksLesson), nil
	}
}

func (b booksLessonDo) FirstOrCreate() (*table.BooksLesson, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.BooksLesson), nil
	}
}

func (b booksLessonDo) FindByPage(offset int, limit int) (result []*table.BooksLesson, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b booksLessonDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b booksLessonDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b booksLessonDo) Delete(models ...*table.BooksLesson) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *booksLessonDo) withDO(do gen.Dao) *booksLessonDo {
	b.DO = *do.(*gen.DO)
	return b
}
