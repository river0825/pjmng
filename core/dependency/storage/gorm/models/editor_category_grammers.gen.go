// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newEditorCategoryGrammer(db *gorm.DB, opts ...gen.DOOption) editorCategoryGrammer {
	_editorCategoryGrammer := editorCategoryGrammer{}

	_editorCategoryGrammer.editorCategoryGrammerDo.UseDB(db, opts...)
	_editorCategoryGrammer.editorCategoryGrammerDo.UseModel(&table.EditorCategoryGrammer{})

	tableName := _editorCategoryGrammer.editorCategoryGrammerDo.TableName()
	_editorCategoryGrammer.ALL = field.NewAsterisk(tableName)
	_editorCategoryGrammer.ID = field.NewInt32(tableName, "id")
	_editorCategoryGrammer.Category = field.NewString(tableName, "category")
	_editorCategoryGrammer.PublishedAt = field.NewTime(tableName, "published_at")
	_editorCategoryGrammer.CreatedBy = field.NewInt32(tableName, "created_by")
	_editorCategoryGrammer.UpdatedBy = field.NewInt32(tableName, "updated_by")
	_editorCategoryGrammer.CreatedAt = field.NewTime(tableName, "created_at")
	_editorCategoryGrammer.UpdatedAt = field.NewTime(tableName, "updated_at")

	_editorCategoryGrammer.fillFieldMap()

	return _editorCategoryGrammer
}

type editorCategoryGrammer struct {
	editorCategoryGrammerDo

	ALL         field.Asterisk
	ID          field.Int32
	Category    field.String
	PublishedAt field.Time
	CreatedBy   field.Int32
	UpdatedBy   field.Int32
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (e editorCategoryGrammer) Table(newTableName string) *editorCategoryGrammer {
	e.editorCategoryGrammerDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e editorCategoryGrammer) As(alias string) *editorCategoryGrammer {
	e.editorCategoryGrammerDo.DO = *(e.editorCategoryGrammerDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *editorCategoryGrammer) updateTableName(table string) *editorCategoryGrammer {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Category = field.NewString(table, "category")
	e.PublishedAt = field.NewTime(table, "published_at")
	e.CreatedBy = field.NewInt32(table, "created_by")
	e.UpdatedBy = field.NewInt32(table, "updated_by")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")

	e.fillFieldMap()

	return e
}

func (e *editorCategoryGrammer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *editorCategoryGrammer) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 7)
	e.fieldMap["id"] = e.ID
	e.fieldMap["category"] = e.Category
	e.fieldMap["published_at"] = e.PublishedAt
	e.fieldMap["created_by"] = e.CreatedBy
	e.fieldMap["updated_by"] = e.UpdatedBy
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
}

func (e editorCategoryGrammer) clone(db *gorm.DB) editorCategoryGrammer {
	e.editorCategoryGrammerDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e editorCategoryGrammer) replaceDB(db *gorm.DB) editorCategoryGrammer {
	e.editorCategoryGrammerDo.ReplaceDB(db)
	return e
}

type editorCategoryGrammerDo struct{ gen.DO }

type IEditorCategoryGrammerDo interface {
	gen.SubQuery
	Debug() IEditorCategoryGrammerDo
	WithContext(ctx context.Context) IEditorCategoryGrammerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEditorCategoryGrammerDo
	WriteDB() IEditorCategoryGrammerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEditorCategoryGrammerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEditorCategoryGrammerDo
	Not(conds ...gen.Condition) IEditorCategoryGrammerDo
	Or(conds ...gen.Condition) IEditorCategoryGrammerDo
	Select(conds ...field.Expr) IEditorCategoryGrammerDo
	Where(conds ...gen.Condition) IEditorCategoryGrammerDo
	Order(conds ...field.Expr) IEditorCategoryGrammerDo
	Distinct(cols ...field.Expr) IEditorCategoryGrammerDo
	Omit(cols ...field.Expr) IEditorCategoryGrammerDo
	Join(table schema.Tabler, on ...field.Expr) IEditorCategoryGrammerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEditorCategoryGrammerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEditorCategoryGrammerDo
	Group(cols ...field.Expr) IEditorCategoryGrammerDo
	Having(conds ...gen.Condition) IEditorCategoryGrammerDo
	Limit(limit int) IEditorCategoryGrammerDo
	Offset(offset int) IEditorCategoryGrammerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEditorCategoryGrammerDo
	Unscoped() IEditorCategoryGrammerDo
	Create(values ...*table.EditorCategoryGrammer) error
	CreateInBatches(values []*table.EditorCategoryGrammer, batchSize int) error
	Save(values ...*table.EditorCategoryGrammer) error
	First() (*table.EditorCategoryGrammer, error)
	Take() (*table.EditorCategoryGrammer, error)
	Last() (*table.EditorCategoryGrammer, error)
	Find() ([]*table.EditorCategoryGrammer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.EditorCategoryGrammer, err error)
	FindInBatches(result *[]*table.EditorCategoryGrammer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.EditorCategoryGrammer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEditorCategoryGrammerDo
	Assign(attrs ...field.AssignExpr) IEditorCategoryGrammerDo
	Joins(fields ...field.RelationField) IEditorCategoryGrammerDo
	Preload(fields ...field.RelationField) IEditorCategoryGrammerDo
	FirstOrInit() (*table.EditorCategoryGrammer, error)
	FirstOrCreate() (*table.EditorCategoryGrammer, error)
	FindByPage(offset int, limit int) (result []*table.EditorCategoryGrammer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEditorCategoryGrammerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e editorCategoryGrammerDo) Debug() IEditorCategoryGrammerDo {
	return e.withDO(e.DO.Debug())
}

func (e editorCategoryGrammerDo) WithContext(ctx context.Context) IEditorCategoryGrammerDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e editorCategoryGrammerDo) ReadDB() IEditorCategoryGrammerDo {
	return e.Clauses(dbresolver.Read)
}

func (e editorCategoryGrammerDo) WriteDB() IEditorCategoryGrammerDo {
	return e.Clauses(dbresolver.Write)
}

func (e editorCategoryGrammerDo) Session(config *gorm.Session) IEditorCategoryGrammerDo {
	return e.withDO(e.DO.Session(config))
}

func (e editorCategoryGrammerDo) Clauses(conds ...clause.Expression) IEditorCategoryGrammerDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e editorCategoryGrammerDo) Returning(value interface{}, columns ...string) IEditorCategoryGrammerDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e editorCategoryGrammerDo) Not(conds ...gen.Condition) IEditorCategoryGrammerDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e editorCategoryGrammerDo) Or(conds ...gen.Condition) IEditorCategoryGrammerDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e editorCategoryGrammerDo) Select(conds ...field.Expr) IEditorCategoryGrammerDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e editorCategoryGrammerDo) Where(conds ...gen.Condition) IEditorCategoryGrammerDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e editorCategoryGrammerDo) Order(conds ...field.Expr) IEditorCategoryGrammerDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e editorCategoryGrammerDo) Distinct(cols ...field.Expr) IEditorCategoryGrammerDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e editorCategoryGrammerDo) Omit(cols ...field.Expr) IEditorCategoryGrammerDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e editorCategoryGrammerDo) Join(table schema.Tabler, on ...field.Expr) IEditorCategoryGrammerDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e editorCategoryGrammerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEditorCategoryGrammerDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e editorCategoryGrammerDo) RightJoin(table schema.Tabler, on ...field.Expr) IEditorCategoryGrammerDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e editorCategoryGrammerDo) Group(cols ...field.Expr) IEditorCategoryGrammerDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e editorCategoryGrammerDo) Having(conds ...gen.Condition) IEditorCategoryGrammerDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e editorCategoryGrammerDo) Limit(limit int) IEditorCategoryGrammerDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e editorCategoryGrammerDo) Offset(offset int) IEditorCategoryGrammerDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e editorCategoryGrammerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEditorCategoryGrammerDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e editorCategoryGrammerDo) Unscoped() IEditorCategoryGrammerDo {
	return e.withDO(e.DO.Unscoped())
}

func (e editorCategoryGrammerDo) Create(values ...*table.EditorCategoryGrammer) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e editorCategoryGrammerDo) CreateInBatches(values []*table.EditorCategoryGrammer, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e editorCategoryGrammerDo) Save(values ...*table.EditorCategoryGrammer) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e editorCategoryGrammerDo) First() (*table.EditorCategoryGrammer, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorCategoryGrammer), nil
	}
}

func (e editorCategoryGrammerDo) Take() (*table.EditorCategoryGrammer, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorCategoryGrammer), nil
	}
}

func (e editorCategoryGrammerDo) Last() (*table.EditorCategoryGrammer, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorCategoryGrammer), nil
	}
}

func (e editorCategoryGrammerDo) Find() ([]*table.EditorCategoryGrammer, error) {
	result, err := e.DO.Find()
	return result.([]*table.EditorCategoryGrammer), err
}

func (e editorCategoryGrammerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.EditorCategoryGrammer, err error) {
	buf := make([]*table.EditorCategoryGrammer, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e editorCategoryGrammerDo) FindInBatches(result *[]*table.EditorCategoryGrammer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e editorCategoryGrammerDo) Attrs(attrs ...field.AssignExpr) IEditorCategoryGrammerDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e editorCategoryGrammerDo) Assign(attrs ...field.AssignExpr) IEditorCategoryGrammerDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e editorCategoryGrammerDo) Joins(fields ...field.RelationField) IEditorCategoryGrammerDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e editorCategoryGrammerDo) Preload(fields ...field.RelationField) IEditorCategoryGrammerDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e editorCategoryGrammerDo) FirstOrInit() (*table.EditorCategoryGrammer, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorCategoryGrammer), nil
	}
}

func (e editorCategoryGrammerDo) FirstOrCreate() (*table.EditorCategoryGrammer, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorCategoryGrammer), nil
	}
}

func (e editorCategoryGrammerDo) FindByPage(offset int, limit int) (result []*table.EditorCategoryGrammer, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e editorCategoryGrammerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e editorCategoryGrammerDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e editorCategoryGrammerDo) Delete(models ...*table.EditorCategoryGrammer) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *editorCategoryGrammerDo) withDO(do gen.Dao) *editorCategoryGrammerDo {
	e.DO = *do.(*gen.DO)
	return e
}
