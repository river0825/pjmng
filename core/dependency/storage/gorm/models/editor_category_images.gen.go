// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newEditorCategoryImage(db *gorm.DB, opts ...gen.DOOption) editorCategoryImage {
	_editorCategoryImage := editorCategoryImage{}

	_editorCategoryImage.editorCategoryImageDo.UseDB(db, opts...)
	_editorCategoryImage.editorCategoryImageDo.UseModel(&table.EditorCategoryImage{})

	tableName := _editorCategoryImage.editorCategoryImageDo.TableName()
	_editorCategoryImage.ALL = field.NewAsterisk(tableName)
	_editorCategoryImage.ID = field.NewInt32(tableName, "id")
	_editorCategoryImage.Category = field.NewString(tableName, "category")
	_editorCategoryImage.PublishedAt = field.NewTime(tableName, "published_at")
	_editorCategoryImage.CreatedBy = field.NewInt32(tableName, "created_by")
	_editorCategoryImage.UpdatedBy = field.NewInt32(tableName, "updated_by")
	_editorCategoryImage.CreatedAt = field.NewTime(tableName, "created_at")
	_editorCategoryImage.UpdatedAt = field.NewTime(tableName, "updated_at")

	_editorCategoryImage.fillFieldMap()

	return _editorCategoryImage
}

type editorCategoryImage struct {
	editorCategoryImageDo

	ALL         field.Asterisk
	ID          field.Int32
	Category    field.String
	PublishedAt field.Time
	CreatedBy   field.Int32
	UpdatedBy   field.Int32
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (e editorCategoryImage) Table(newTableName string) *editorCategoryImage {
	e.editorCategoryImageDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e editorCategoryImage) As(alias string) *editorCategoryImage {
	e.editorCategoryImageDo.DO = *(e.editorCategoryImageDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *editorCategoryImage) updateTableName(table string) *editorCategoryImage {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Category = field.NewString(table, "category")
	e.PublishedAt = field.NewTime(table, "published_at")
	e.CreatedBy = field.NewInt32(table, "created_by")
	e.UpdatedBy = field.NewInt32(table, "updated_by")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")

	e.fillFieldMap()

	return e
}

func (e *editorCategoryImage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *editorCategoryImage) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 7)
	e.fieldMap["id"] = e.ID
	e.fieldMap["category"] = e.Category
	e.fieldMap["published_at"] = e.PublishedAt
	e.fieldMap["created_by"] = e.CreatedBy
	e.fieldMap["updated_by"] = e.UpdatedBy
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
}

func (e editorCategoryImage) clone(db *gorm.DB) editorCategoryImage {
	e.editorCategoryImageDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e editorCategoryImage) replaceDB(db *gorm.DB) editorCategoryImage {
	e.editorCategoryImageDo.ReplaceDB(db)
	return e
}

type editorCategoryImageDo struct{ gen.DO }

type IEditorCategoryImageDo interface {
	gen.SubQuery
	Debug() IEditorCategoryImageDo
	WithContext(ctx context.Context) IEditorCategoryImageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEditorCategoryImageDo
	WriteDB() IEditorCategoryImageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEditorCategoryImageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEditorCategoryImageDo
	Not(conds ...gen.Condition) IEditorCategoryImageDo
	Or(conds ...gen.Condition) IEditorCategoryImageDo
	Select(conds ...field.Expr) IEditorCategoryImageDo
	Where(conds ...gen.Condition) IEditorCategoryImageDo
	Order(conds ...field.Expr) IEditorCategoryImageDo
	Distinct(cols ...field.Expr) IEditorCategoryImageDo
	Omit(cols ...field.Expr) IEditorCategoryImageDo
	Join(table schema.Tabler, on ...field.Expr) IEditorCategoryImageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEditorCategoryImageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEditorCategoryImageDo
	Group(cols ...field.Expr) IEditorCategoryImageDo
	Having(conds ...gen.Condition) IEditorCategoryImageDo
	Limit(limit int) IEditorCategoryImageDo
	Offset(offset int) IEditorCategoryImageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEditorCategoryImageDo
	Unscoped() IEditorCategoryImageDo
	Create(values ...*table.EditorCategoryImage) error
	CreateInBatches(values []*table.EditorCategoryImage, batchSize int) error
	Save(values ...*table.EditorCategoryImage) error
	First() (*table.EditorCategoryImage, error)
	Take() (*table.EditorCategoryImage, error)
	Last() (*table.EditorCategoryImage, error)
	Find() ([]*table.EditorCategoryImage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.EditorCategoryImage, err error)
	FindInBatches(result *[]*table.EditorCategoryImage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.EditorCategoryImage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEditorCategoryImageDo
	Assign(attrs ...field.AssignExpr) IEditorCategoryImageDo
	Joins(fields ...field.RelationField) IEditorCategoryImageDo
	Preload(fields ...field.RelationField) IEditorCategoryImageDo
	FirstOrInit() (*table.EditorCategoryImage, error)
	FirstOrCreate() (*table.EditorCategoryImage, error)
	FindByPage(offset int, limit int) (result []*table.EditorCategoryImage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEditorCategoryImageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e editorCategoryImageDo) Debug() IEditorCategoryImageDo {
	return e.withDO(e.DO.Debug())
}

func (e editorCategoryImageDo) WithContext(ctx context.Context) IEditorCategoryImageDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e editorCategoryImageDo) ReadDB() IEditorCategoryImageDo {
	return e.Clauses(dbresolver.Read)
}

func (e editorCategoryImageDo) WriteDB() IEditorCategoryImageDo {
	return e.Clauses(dbresolver.Write)
}

func (e editorCategoryImageDo) Session(config *gorm.Session) IEditorCategoryImageDo {
	return e.withDO(e.DO.Session(config))
}

func (e editorCategoryImageDo) Clauses(conds ...clause.Expression) IEditorCategoryImageDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e editorCategoryImageDo) Returning(value interface{}, columns ...string) IEditorCategoryImageDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e editorCategoryImageDo) Not(conds ...gen.Condition) IEditorCategoryImageDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e editorCategoryImageDo) Or(conds ...gen.Condition) IEditorCategoryImageDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e editorCategoryImageDo) Select(conds ...field.Expr) IEditorCategoryImageDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e editorCategoryImageDo) Where(conds ...gen.Condition) IEditorCategoryImageDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e editorCategoryImageDo) Order(conds ...field.Expr) IEditorCategoryImageDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e editorCategoryImageDo) Distinct(cols ...field.Expr) IEditorCategoryImageDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e editorCategoryImageDo) Omit(cols ...field.Expr) IEditorCategoryImageDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e editorCategoryImageDo) Join(table schema.Tabler, on ...field.Expr) IEditorCategoryImageDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e editorCategoryImageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEditorCategoryImageDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e editorCategoryImageDo) RightJoin(table schema.Tabler, on ...field.Expr) IEditorCategoryImageDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e editorCategoryImageDo) Group(cols ...field.Expr) IEditorCategoryImageDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e editorCategoryImageDo) Having(conds ...gen.Condition) IEditorCategoryImageDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e editorCategoryImageDo) Limit(limit int) IEditorCategoryImageDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e editorCategoryImageDo) Offset(offset int) IEditorCategoryImageDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e editorCategoryImageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEditorCategoryImageDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e editorCategoryImageDo) Unscoped() IEditorCategoryImageDo {
	return e.withDO(e.DO.Unscoped())
}

func (e editorCategoryImageDo) Create(values ...*table.EditorCategoryImage) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e editorCategoryImageDo) CreateInBatches(values []*table.EditorCategoryImage, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e editorCategoryImageDo) Save(values ...*table.EditorCategoryImage) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e editorCategoryImageDo) First() (*table.EditorCategoryImage, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorCategoryImage), nil
	}
}

func (e editorCategoryImageDo) Take() (*table.EditorCategoryImage, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorCategoryImage), nil
	}
}

func (e editorCategoryImageDo) Last() (*table.EditorCategoryImage, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorCategoryImage), nil
	}
}

func (e editorCategoryImageDo) Find() ([]*table.EditorCategoryImage, error) {
	result, err := e.DO.Find()
	return result.([]*table.EditorCategoryImage), err
}

func (e editorCategoryImageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.EditorCategoryImage, err error) {
	buf := make([]*table.EditorCategoryImage, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e editorCategoryImageDo) FindInBatches(result *[]*table.EditorCategoryImage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e editorCategoryImageDo) Attrs(attrs ...field.AssignExpr) IEditorCategoryImageDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e editorCategoryImageDo) Assign(attrs ...field.AssignExpr) IEditorCategoryImageDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e editorCategoryImageDo) Joins(fields ...field.RelationField) IEditorCategoryImageDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e editorCategoryImageDo) Preload(fields ...field.RelationField) IEditorCategoryImageDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e editorCategoryImageDo) FirstOrInit() (*table.EditorCategoryImage, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorCategoryImage), nil
	}
}

func (e editorCategoryImageDo) FirstOrCreate() (*table.EditorCategoryImage, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorCategoryImage), nil
	}
}

func (e editorCategoryImageDo) FindByPage(offset int, limit int) (result []*table.EditorCategoryImage, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e editorCategoryImageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e editorCategoryImageDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e editorCategoryImageDo) Delete(models ...*table.EditorCategoryImage) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *editorCategoryImageDo) withDO(do gen.Dao) *editorCategoryImageDo {
	e.DO = *do.(*gen.DO)
	return e
}
