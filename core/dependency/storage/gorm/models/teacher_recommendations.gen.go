// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newTeacherRecommendation(db *gorm.DB, opts ...gen.DOOption) teacherRecommendation {
	_teacherRecommendation := teacherRecommendation{}

	_teacherRecommendation.teacherRecommendationDo.UseDB(db, opts...)
	_teacherRecommendation.teacherRecommendationDo.UseModel(&table.TeacherRecommendation{})

	tableName := _teacherRecommendation.teacherRecommendationDo.TableName()
	_teacherRecommendation.ALL = field.NewAsterisk(tableName)
	_teacherRecommendation.ID = field.NewInt32(tableName, "id")
	_teacherRecommendation.Name = field.NewString(tableName, "name")
	_teacherRecommendation.Location = field.NewString(tableName, "location")
	_teacherRecommendation.Recommendation = field.NewString(tableName, "recommendation")
	_teacherRecommendation.Locale = field.NewString(tableName, "locale")
	_teacherRecommendation.PublishedAt = field.NewTime(tableName, "published_at")
	_teacherRecommendation.CreatedBy = field.NewInt32(tableName, "created_by")
	_teacherRecommendation.UpdatedBy = field.NewInt32(tableName, "updated_by")
	_teacherRecommendation.CreatedAt = field.NewTime(tableName, "created_at")
	_teacherRecommendation.UpdatedAt = field.NewTime(tableName, "updated_at")
	_teacherRecommendation.Order_ = field.NewInt32(tableName, "order")

	_teacherRecommendation.fillFieldMap()

	return _teacherRecommendation
}

type teacherRecommendation struct {
	teacherRecommendationDo

	ALL            field.Asterisk
	ID             field.Int32
	Name           field.String
	Location       field.String
	Recommendation field.String
	Locale         field.String
	PublishedAt    field.Time
	CreatedBy      field.Int32
	UpdatedBy      field.Int32
	CreatedAt      field.Time
	UpdatedAt      field.Time
	Order_         field.Int32

	fieldMap map[string]field.Expr
}

func (t teacherRecommendation) Table(newTableName string) *teacherRecommendation {
	t.teacherRecommendationDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t teacherRecommendation) As(alias string) *teacherRecommendation {
	t.teacherRecommendationDo.DO = *(t.teacherRecommendationDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *teacherRecommendation) updateTableName(table string) *teacherRecommendation {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.Name = field.NewString(table, "name")
	t.Location = field.NewString(table, "location")
	t.Recommendation = field.NewString(table, "recommendation")
	t.Locale = field.NewString(table, "locale")
	t.PublishedAt = field.NewTime(table, "published_at")
	t.CreatedBy = field.NewInt32(table, "created_by")
	t.UpdatedBy = field.NewInt32(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.Order_ = field.NewInt32(table, "order")

	t.fillFieldMap()

	return t
}

func (t *teacherRecommendation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *teacherRecommendation) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["location"] = t.Location
	t.fieldMap["recommendation"] = t.Recommendation
	t.fieldMap["locale"] = t.Locale
	t.fieldMap["published_at"] = t.PublishedAt
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["order"] = t.Order_
}

func (t teacherRecommendation) clone(db *gorm.DB) teacherRecommendation {
	t.teacherRecommendationDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t teacherRecommendation) replaceDB(db *gorm.DB) teacherRecommendation {
	t.teacherRecommendationDo.ReplaceDB(db)
	return t
}

type teacherRecommendationDo struct{ gen.DO }

type ITeacherRecommendationDo interface {
	gen.SubQuery
	Debug() ITeacherRecommendationDo
	WithContext(ctx context.Context) ITeacherRecommendationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITeacherRecommendationDo
	WriteDB() ITeacherRecommendationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITeacherRecommendationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITeacherRecommendationDo
	Not(conds ...gen.Condition) ITeacherRecommendationDo
	Or(conds ...gen.Condition) ITeacherRecommendationDo
	Select(conds ...field.Expr) ITeacherRecommendationDo
	Where(conds ...gen.Condition) ITeacherRecommendationDo
	Order(conds ...field.Expr) ITeacherRecommendationDo
	Distinct(cols ...field.Expr) ITeacherRecommendationDo
	Omit(cols ...field.Expr) ITeacherRecommendationDo
	Join(table schema.Tabler, on ...field.Expr) ITeacherRecommendationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITeacherRecommendationDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITeacherRecommendationDo
	Group(cols ...field.Expr) ITeacherRecommendationDo
	Having(conds ...gen.Condition) ITeacherRecommendationDo
	Limit(limit int) ITeacherRecommendationDo
	Offset(offset int) ITeacherRecommendationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITeacherRecommendationDo
	Unscoped() ITeacherRecommendationDo
	Create(values ...*table.TeacherRecommendation) error
	CreateInBatches(values []*table.TeacherRecommendation, batchSize int) error
	Save(values ...*table.TeacherRecommendation) error
	First() (*table.TeacherRecommendation, error)
	Take() (*table.TeacherRecommendation, error)
	Last() (*table.TeacherRecommendation, error)
	Find() ([]*table.TeacherRecommendation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.TeacherRecommendation, err error)
	FindInBatches(result *[]*table.TeacherRecommendation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.TeacherRecommendation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITeacherRecommendationDo
	Assign(attrs ...field.AssignExpr) ITeacherRecommendationDo
	Joins(fields ...field.RelationField) ITeacherRecommendationDo
	Preload(fields ...field.RelationField) ITeacherRecommendationDo
	FirstOrInit() (*table.TeacherRecommendation, error)
	FirstOrCreate() (*table.TeacherRecommendation, error)
	FindByPage(offset int, limit int) (result []*table.TeacherRecommendation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITeacherRecommendationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t teacherRecommendationDo) Debug() ITeacherRecommendationDo {
	return t.withDO(t.DO.Debug())
}

func (t teacherRecommendationDo) WithContext(ctx context.Context) ITeacherRecommendationDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t teacherRecommendationDo) ReadDB() ITeacherRecommendationDo {
	return t.Clauses(dbresolver.Read)
}

func (t teacherRecommendationDo) WriteDB() ITeacherRecommendationDo {
	return t.Clauses(dbresolver.Write)
}

func (t teacherRecommendationDo) Session(config *gorm.Session) ITeacherRecommendationDo {
	return t.withDO(t.DO.Session(config))
}

func (t teacherRecommendationDo) Clauses(conds ...clause.Expression) ITeacherRecommendationDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t teacherRecommendationDo) Returning(value interface{}, columns ...string) ITeacherRecommendationDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t teacherRecommendationDo) Not(conds ...gen.Condition) ITeacherRecommendationDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t teacherRecommendationDo) Or(conds ...gen.Condition) ITeacherRecommendationDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t teacherRecommendationDo) Select(conds ...field.Expr) ITeacherRecommendationDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t teacherRecommendationDo) Where(conds ...gen.Condition) ITeacherRecommendationDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t teacherRecommendationDo) Order(conds ...field.Expr) ITeacherRecommendationDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t teacherRecommendationDo) Distinct(cols ...field.Expr) ITeacherRecommendationDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t teacherRecommendationDo) Omit(cols ...field.Expr) ITeacherRecommendationDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t teacherRecommendationDo) Join(table schema.Tabler, on ...field.Expr) ITeacherRecommendationDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t teacherRecommendationDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITeacherRecommendationDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t teacherRecommendationDo) RightJoin(table schema.Tabler, on ...field.Expr) ITeacherRecommendationDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t teacherRecommendationDo) Group(cols ...field.Expr) ITeacherRecommendationDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t teacherRecommendationDo) Having(conds ...gen.Condition) ITeacherRecommendationDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t teacherRecommendationDo) Limit(limit int) ITeacherRecommendationDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t teacherRecommendationDo) Offset(offset int) ITeacherRecommendationDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t teacherRecommendationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITeacherRecommendationDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t teacherRecommendationDo) Unscoped() ITeacherRecommendationDo {
	return t.withDO(t.DO.Unscoped())
}

func (t teacherRecommendationDo) Create(values ...*table.TeacherRecommendation) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t teacherRecommendationDo) CreateInBatches(values []*table.TeacherRecommendation, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t teacherRecommendationDo) Save(values ...*table.TeacherRecommendation) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t teacherRecommendationDo) First() (*table.TeacherRecommendation, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.TeacherRecommendation), nil
	}
}

func (t teacherRecommendationDo) Take() (*table.TeacherRecommendation, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.TeacherRecommendation), nil
	}
}

func (t teacherRecommendationDo) Last() (*table.TeacherRecommendation, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.TeacherRecommendation), nil
	}
}

func (t teacherRecommendationDo) Find() ([]*table.TeacherRecommendation, error) {
	result, err := t.DO.Find()
	return result.([]*table.TeacherRecommendation), err
}

func (t teacherRecommendationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.TeacherRecommendation, err error) {
	buf := make([]*table.TeacherRecommendation, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t teacherRecommendationDo) FindInBatches(result *[]*table.TeacherRecommendation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t teacherRecommendationDo) Attrs(attrs ...field.AssignExpr) ITeacherRecommendationDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t teacherRecommendationDo) Assign(attrs ...field.AssignExpr) ITeacherRecommendationDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t teacherRecommendationDo) Joins(fields ...field.RelationField) ITeacherRecommendationDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t teacherRecommendationDo) Preload(fields ...field.RelationField) ITeacherRecommendationDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t teacherRecommendationDo) FirstOrInit() (*table.TeacherRecommendation, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.TeacherRecommendation), nil
	}
}

func (t teacherRecommendationDo) FirstOrCreate() (*table.TeacherRecommendation, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.TeacherRecommendation), nil
	}
}

func (t teacherRecommendationDo) FindByPage(offset int, limit int) (result []*table.TeacherRecommendation, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t teacherRecommendationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t teacherRecommendationDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t teacherRecommendationDo) Delete(models ...*table.TeacherRecommendation) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *teacherRecommendationDo) withDO(do gen.Dao) *teacherRecommendationDo {
	t.DO = *do.(*gen.DO)
	return t
}
