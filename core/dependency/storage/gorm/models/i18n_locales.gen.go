// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newI18nLocale(db *gorm.DB, opts ...gen.DOOption) i18nLocale {
	_i18nLocale := i18nLocale{}

	_i18nLocale.i18nLocaleDo.UseDB(db, opts...)
	_i18nLocale.i18nLocaleDo.UseModel(&table.I18nLocale{})

	tableName := _i18nLocale.i18nLocaleDo.TableName()
	_i18nLocale.ALL = field.NewAsterisk(tableName)
	_i18nLocale.ID = field.NewInt32(tableName, "id")
	_i18nLocale.Name = field.NewString(tableName, "name")
	_i18nLocale.Code = field.NewString(tableName, "code")
	_i18nLocale.CreatedBy = field.NewInt32(tableName, "created_by")
	_i18nLocale.UpdatedBy = field.NewInt32(tableName, "updated_by")
	_i18nLocale.CreatedAt = field.NewTime(tableName, "created_at")
	_i18nLocale.UpdatedAt = field.NewTime(tableName, "updated_at")

	_i18nLocale.fillFieldMap()

	return _i18nLocale
}

type i18nLocale struct {
	i18nLocaleDo

	ALL       field.Asterisk
	ID        field.Int32
	Name      field.String
	Code      field.String
	CreatedBy field.Int32
	UpdatedBy field.Int32
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (i i18nLocale) Table(newTableName string) *i18nLocale {
	i.i18nLocaleDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i i18nLocale) As(alias string) *i18nLocale {
	i.i18nLocaleDo.DO = *(i.i18nLocaleDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *i18nLocale) updateTableName(table string) *i18nLocale {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt32(table, "id")
	i.Name = field.NewString(table, "name")
	i.Code = field.NewString(table, "code")
	i.CreatedBy = field.NewInt32(table, "created_by")
	i.UpdatedBy = field.NewInt32(table, "updated_by")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")

	i.fillFieldMap()

	return i
}

func (i *i18nLocale) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *i18nLocale) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 7)
	i.fieldMap["id"] = i.ID
	i.fieldMap["name"] = i.Name
	i.fieldMap["code"] = i.Code
	i.fieldMap["created_by"] = i.CreatedBy
	i.fieldMap["updated_by"] = i.UpdatedBy
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
}

func (i i18nLocale) clone(db *gorm.DB) i18nLocale {
	i.i18nLocaleDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i i18nLocale) replaceDB(db *gorm.DB) i18nLocale {
	i.i18nLocaleDo.ReplaceDB(db)
	return i
}

type i18nLocaleDo struct{ gen.DO }

type II18nLocaleDo interface {
	gen.SubQuery
	Debug() II18nLocaleDo
	WithContext(ctx context.Context) II18nLocaleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() II18nLocaleDo
	WriteDB() II18nLocaleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) II18nLocaleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) II18nLocaleDo
	Not(conds ...gen.Condition) II18nLocaleDo
	Or(conds ...gen.Condition) II18nLocaleDo
	Select(conds ...field.Expr) II18nLocaleDo
	Where(conds ...gen.Condition) II18nLocaleDo
	Order(conds ...field.Expr) II18nLocaleDo
	Distinct(cols ...field.Expr) II18nLocaleDo
	Omit(cols ...field.Expr) II18nLocaleDo
	Join(table schema.Tabler, on ...field.Expr) II18nLocaleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) II18nLocaleDo
	RightJoin(table schema.Tabler, on ...field.Expr) II18nLocaleDo
	Group(cols ...field.Expr) II18nLocaleDo
	Having(conds ...gen.Condition) II18nLocaleDo
	Limit(limit int) II18nLocaleDo
	Offset(offset int) II18nLocaleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) II18nLocaleDo
	Unscoped() II18nLocaleDo
	Create(values ...*table.I18nLocale) error
	CreateInBatches(values []*table.I18nLocale, batchSize int) error
	Save(values ...*table.I18nLocale) error
	First() (*table.I18nLocale, error)
	Take() (*table.I18nLocale, error)
	Last() (*table.I18nLocale, error)
	Find() ([]*table.I18nLocale, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.I18nLocale, err error)
	FindInBatches(result *[]*table.I18nLocale, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.I18nLocale) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) II18nLocaleDo
	Assign(attrs ...field.AssignExpr) II18nLocaleDo
	Joins(fields ...field.RelationField) II18nLocaleDo
	Preload(fields ...field.RelationField) II18nLocaleDo
	FirstOrInit() (*table.I18nLocale, error)
	FirstOrCreate() (*table.I18nLocale, error)
	FindByPage(offset int, limit int) (result []*table.I18nLocale, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) II18nLocaleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i i18nLocaleDo) Debug() II18nLocaleDo {
	return i.withDO(i.DO.Debug())
}

func (i i18nLocaleDo) WithContext(ctx context.Context) II18nLocaleDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i i18nLocaleDo) ReadDB() II18nLocaleDo {
	return i.Clauses(dbresolver.Read)
}

func (i i18nLocaleDo) WriteDB() II18nLocaleDo {
	return i.Clauses(dbresolver.Write)
}

func (i i18nLocaleDo) Session(config *gorm.Session) II18nLocaleDo {
	return i.withDO(i.DO.Session(config))
}

func (i i18nLocaleDo) Clauses(conds ...clause.Expression) II18nLocaleDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i i18nLocaleDo) Returning(value interface{}, columns ...string) II18nLocaleDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i i18nLocaleDo) Not(conds ...gen.Condition) II18nLocaleDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i i18nLocaleDo) Or(conds ...gen.Condition) II18nLocaleDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i i18nLocaleDo) Select(conds ...field.Expr) II18nLocaleDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i i18nLocaleDo) Where(conds ...gen.Condition) II18nLocaleDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i i18nLocaleDo) Order(conds ...field.Expr) II18nLocaleDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i i18nLocaleDo) Distinct(cols ...field.Expr) II18nLocaleDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i i18nLocaleDo) Omit(cols ...field.Expr) II18nLocaleDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i i18nLocaleDo) Join(table schema.Tabler, on ...field.Expr) II18nLocaleDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i i18nLocaleDo) LeftJoin(table schema.Tabler, on ...field.Expr) II18nLocaleDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i i18nLocaleDo) RightJoin(table schema.Tabler, on ...field.Expr) II18nLocaleDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i i18nLocaleDo) Group(cols ...field.Expr) II18nLocaleDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i i18nLocaleDo) Having(conds ...gen.Condition) II18nLocaleDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i i18nLocaleDo) Limit(limit int) II18nLocaleDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i i18nLocaleDo) Offset(offset int) II18nLocaleDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i i18nLocaleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) II18nLocaleDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i i18nLocaleDo) Unscoped() II18nLocaleDo {
	return i.withDO(i.DO.Unscoped())
}

func (i i18nLocaleDo) Create(values ...*table.I18nLocale) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i i18nLocaleDo) CreateInBatches(values []*table.I18nLocale, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i i18nLocaleDo) Save(values ...*table.I18nLocale) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i i18nLocaleDo) First() (*table.I18nLocale, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.I18nLocale), nil
	}
}

func (i i18nLocaleDo) Take() (*table.I18nLocale, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.I18nLocale), nil
	}
}

func (i i18nLocaleDo) Last() (*table.I18nLocale, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.I18nLocale), nil
	}
}

func (i i18nLocaleDo) Find() ([]*table.I18nLocale, error) {
	result, err := i.DO.Find()
	return result.([]*table.I18nLocale), err
}

func (i i18nLocaleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.I18nLocale, err error) {
	buf := make([]*table.I18nLocale, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i i18nLocaleDo) FindInBatches(result *[]*table.I18nLocale, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i i18nLocaleDo) Attrs(attrs ...field.AssignExpr) II18nLocaleDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i i18nLocaleDo) Assign(attrs ...field.AssignExpr) II18nLocaleDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i i18nLocaleDo) Joins(fields ...field.RelationField) II18nLocaleDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i i18nLocaleDo) Preload(fields ...field.RelationField) II18nLocaleDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i i18nLocaleDo) FirstOrInit() (*table.I18nLocale, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.I18nLocale), nil
	}
}

func (i i18nLocaleDo) FirstOrCreate() (*table.I18nLocale, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.I18nLocale), nil
	}
}

func (i i18nLocaleDo) FindByPage(offset int, limit int) (result []*table.I18nLocale, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i i18nLocaleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i i18nLocaleDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i i18nLocaleDo) Delete(models ...*table.I18nLocale) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *i18nLocaleDo) withDO(do gen.Dao) *i18nLocaleDo {
	i.DO = *do.(*gen.DO)
	return i
}
