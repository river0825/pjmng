// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newMaterialShare(db *gorm.DB, opts ...gen.DOOption) materialShare {
	_materialShare := materialShare{}

	_materialShare.materialShareDo.UseDB(db, opts...)
	_materialShare.materialShareDo.UseModel(&table.MaterialShare{})

	tableName := _materialShare.materialShareDo.TableName()
	_materialShare.ALL = field.NewAsterisk(tableName)
	_materialShare.ID = field.NewInt32(tableName, "id")
	_materialShare.Description = field.NewString(tableName, "description")
	_materialShare.ExpiredAt = field.NewTime(tableName, "expired_at")
	_materialShare.ShareID = field.NewString(tableName, "share_id")
	_materialShare.DeletedAt = field.NewField(tableName, "deleted_at")
	_materialShare.Material = field.NewInt32(tableName, "material")
	_materialShare.CreatedBy = field.NewInt32(tableName, "created_by")
	_materialShare.UpdatedBy = field.NewInt32(tableName, "updated_by")
	_materialShare.CreatedAt = field.NewTime(tableName, "created_at")
	_materialShare.UpdatedAt = field.NewTime(tableName, "updated_at")
	_materialShare.OwnerID = field.NewInt32(tableName, "owner_id")

	_materialShare.fillFieldMap()

	return _materialShare
}

type materialShare struct {
	materialShareDo

	ALL         field.Asterisk
	ID          field.Int32
	Description field.String
	ExpiredAt   field.Time
	ShareID     field.String
	DeletedAt   field.Field
	Material    field.Int32
	CreatedBy   field.Int32
	UpdatedBy   field.Int32
	CreatedAt   field.Time
	UpdatedAt   field.Time
	OwnerID     field.Int32

	fieldMap map[string]field.Expr
}

func (m materialShare) Table(newTableName string) *materialShare {
	m.materialShareDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m materialShare) As(alias string) *materialShare {
	m.materialShareDo.DO = *(m.materialShareDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *materialShare) updateTableName(table string) *materialShare {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.Description = field.NewString(table, "description")
	m.ExpiredAt = field.NewTime(table, "expired_at")
	m.ShareID = field.NewString(table, "share_id")
	m.DeletedAt = field.NewField(table, "deleted_at")
	m.Material = field.NewInt32(table, "material")
	m.CreatedBy = field.NewInt32(table, "created_by")
	m.UpdatedBy = field.NewInt32(table, "updated_by")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.OwnerID = field.NewInt32(table, "owner_id")

	m.fillFieldMap()

	return m
}

func (m *materialShare) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *materialShare) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 11)
	m.fieldMap["id"] = m.ID
	m.fieldMap["description"] = m.Description
	m.fieldMap["expired_at"] = m.ExpiredAt
	m.fieldMap["share_id"] = m.ShareID
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["material"] = m.Material
	m.fieldMap["created_by"] = m.CreatedBy
	m.fieldMap["updated_by"] = m.UpdatedBy
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["owner_id"] = m.OwnerID
}

func (m materialShare) clone(db *gorm.DB) materialShare {
	m.materialShareDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m materialShare) replaceDB(db *gorm.DB) materialShare {
	m.materialShareDo.ReplaceDB(db)
	return m
}

type materialShareDo struct{ gen.DO }

type IMaterialShareDo interface {
	gen.SubQuery
	Debug() IMaterialShareDo
	WithContext(ctx context.Context) IMaterialShareDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMaterialShareDo
	WriteDB() IMaterialShareDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMaterialShareDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMaterialShareDo
	Not(conds ...gen.Condition) IMaterialShareDo
	Or(conds ...gen.Condition) IMaterialShareDo
	Select(conds ...field.Expr) IMaterialShareDo
	Where(conds ...gen.Condition) IMaterialShareDo
	Order(conds ...field.Expr) IMaterialShareDo
	Distinct(cols ...field.Expr) IMaterialShareDo
	Omit(cols ...field.Expr) IMaterialShareDo
	Join(table schema.Tabler, on ...field.Expr) IMaterialShareDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMaterialShareDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMaterialShareDo
	Group(cols ...field.Expr) IMaterialShareDo
	Having(conds ...gen.Condition) IMaterialShareDo
	Limit(limit int) IMaterialShareDo
	Offset(offset int) IMaterialShareDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMaterialShareDo
	Unscoped() IMaterialShareDo
	Create(values ...*table.MaterialShare) error
	CreateInBatches(values []*table.MaterialShare, batchSize int) error
	Save(values ...*table.MaterialShare) error
	First() (*table.MaterialShare, error)
	Take() (*table.MaterialShare, error)
	Last() (*table.MaterialShare, error)
	Find() ([]*table.MaterialShare, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.MaterialShare, err error)
	FindInBatches(result *[]*table.MaterialShare, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.MaterialShare) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMaterialShareDo
	Assign(attrs ...field.AssignExpr) IMaterialShareDo
	Joins(fields ...field.RelationField) IMaterialShareDo
	Preload(fields ...field.RelationField) IMaterialShareDo
	FirstOrInit() (*table.MaterialShare, error)
	FirstOrCreate() (*table.MaterialShare, error)
	FindByPage(offset int, limit int) (result []*table.MaterialShare, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMaterialShareDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m materialShareDo) Debug() IMaterialShareDo {
	return m.withDO(m.DO.Debug())
}

func (m materialShareDo) WithContext(ctx context.Context) IMaterialShareDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m materialShareDo) ReadDB() IMaterialShareDo {
	return m.Clauses(dbresolver.Read)
}

func (m materialShareDo) WriteDB() IMaterialShareDo {
	return m.Clauses(dbresolver.Write)
}

func (m materialShareDo) Session(config *gorm.Session) IMaterialShareDo {
	return m.withDO(m.DO.Session(config))
}

func (m materialShareDo) Clauses(conds ...clause.Expression) IMaterialShareDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m materialShareDo) Returning(value interface{}, columns ...string) IMaterialShareDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m materialShareDo) Not(conds ...gen.Condition) IMaterialShareDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m materialShareDo) Or(conds ...gen.Condition) IMaterialShareDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m materialShareDo) Select(conds ...field.Expr) IMaterialShareDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m materialShareDo) Where(conds ...gen.Condition) IMaterialShareDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m materialShareDo) Order(conds ...field.Expr) IMaterialShareDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m materialShareDo) Distinct(cols ...field.Expr) IMaterialShareDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m materialShareDo) Omit(cols ...field.Expr) IMaterialShareDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m materialShareDo) Join(table schema.Tabler, on ...field.Expr) IMaterialShareDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m materialShareDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMaterialShareDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m materialShareDo) RightJoin(table schema.Tabler, on ...field.Expr) IMaterialShareDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m materialShareDo) Group(cols ...field.Expr) IMaterialShareDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m materialShareDo) Having(conds ...gen.Condition) IMaterialShareDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m materialShareDo) Limit(limit int) IMaterialShareDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m materialShareDo) Offset(offset int) IMaterialShareDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m materialShareDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMaterialShareDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m materialShareDo) Unscoped() IMaterialShareDo {
	return m.withDO(m.DO.Unscoped())
}

func (m materialShareDo) Create(values ...*table.MaterialShare) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m materialShareDo) CreateInBatches(values []*table.MaterialShare, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m materialShareDo) Save(values ...*table.MaterialShare) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m materialShareDo) First() (*table.MaterialShare, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.MaterialShare), nil
	}
}

func (m materialShareDo) Take() (*table.MaterialShare, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.MaterialShare), nil
	}
}

func (m materialShareDo) Last() (*table.MaterialShare, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.MaterialShare), nil
	}
}

func (m materialShareDo) Find() ([]*table.MaterialShare, error) {
	result, err := m.DO.Find()
	return result.([]*table.MaterialShare), err
}

func (m materialShareDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.MaterialShare, err error) {
	buf := make([]*table.MaterialShare, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m materialShareDo) FindInBatches(result *[]*table.MaterialShare, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m materialShareDo) Attrs(attrs ...field.AssignExpr) IMaterialShareDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m materialShareDo) Assign(attrs ...field.AssignExpr) IMaterialShareDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m materialShareDo) Joins(fields ...field.RelationField) IMaterialShareDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m materialShareDo) Preload(fields ...field.RelationField) IMaterialShareDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m materialShareDo) FirstOrInit() (*table.MaterialShare, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.MaterialShare), nil
	}
}

func (m materialShareDo) FirstOrCreate() (*table.MaterialShare, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.MaterialShare), nil
	}
}

func (m materialShareDo) FindByPage(offset int, limit int) (result []*table.MaterialShare, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m materialShareDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m materialShareDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m materialShareDo) Delete(models ...*table.MaterialShare) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *materialShareDo) withDO(do gen.Dao) *materialShareDo {
	m.DO = *do.(*gen.DO)
	return m
}
