// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newDefaultFreeMaterial(db *gorm.DB, opts ...gen.DOOption) defaultFreeMaterial {
	_defaultFreeMaterial := defaultFreeMaterial{}

	_defaultFreeMaterial.defaultFreeMaterialDo.UseDB(db, opts...)
	_defaultFreeMaterial.defaultFreeMaterialDo.UseModel(&table.DefaultFreeMaterial{})

	tableName := _defaultFreeMaterial.defaultFreeMaterialDo.TableName()
	_defaultFreeMaterial.ALL = field.NewAsterisk(tableName)
	_defaultFreeMaterial.ID = field.NewInt32(tableName, "id")
	_defaultFreeMaterial.CreatedBy = field.NewInt32(tableName, "created_by")
	_defaultFreeMaterial.UpdatedBy = field.NewInt32(tableName, "updated_by")
	_defaultFreeMaterial.CreatedAt = field.NewTime(tableName, "created_at")
	_defaultFreeMaterial.UpdatedAt = field.NewTime(tableName, "updated_at")

	_defaultFreeMaterial.fillFieldMap()

	return _defaultFreeMaterial
}

type defaultFreeMaterial struct {
	defaultFreeMaterialDo

	ALL       field.Asterisk
	ID        field.Int32
	CreatedBy field.Int32
	UpdatedBy field.Int32
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (d defaultFreeMaterial) Table(newTableName string) *defaultFreeMaterial {
	d.defaultFreeMaterialDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d defaultFreeMaterial) As(alias string) *defaultFreeMaterial {
	d.defaultFreeMaterialDo.DO = *(d.defaultFreeMaterialDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *defaultFreeMaterial) updateTableName(table string) *defaultFreeMaterial {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt32(table, "id")
	d.CreatedBy = field.NewInt32(table, "created_by")
	d.UpdatedBy = field.NewInt32(table, "updated_by")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")

	d.fillFieldMap()

	return d
}

func (d *defaultFreeMaterial) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *defaultFreeMaterial) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 5)
	d.fieldMap["id"] = d.ID
	d.fieldMap["created_by"] = d.CreatedBy
	d.fieldMap["updated_by"] = d.UpdatedBy
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
}

func (d defaultFreeMaterial) clone(db *gorm.DB) defaultFreeMaterial {
	d.defaultFreeMaterialDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d defaultFreeMaterial) replaceDB(db *gorm.DB) defaultFreeMaterial {
	d.defaultFreeMaterialDo.ReplaceDB(db)
	return d
}

type defaultFreeMaterialDo struct{ gen.DO }

type IDefaultFreeMaterialDo interface {
	gen.SubQuery
	Debug() IDefaultFreeMaterialDo
	WithContext(ctx context.Context) IDefaultFreeMaterialDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDefaultFreeMaterialDo
	WriteDB() IDefaultFreeMaterialDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDefaultFreeMaterialDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDefaultFreeMaterialDo
	Not(conds ...gen.Condition) IDefaultFreeMaterialDo
	Or(conds ...gen.Condition) IDefaultFreeMaterialDo
	Select(conds ...field.Expr) IDefaultFreeMaterialDo
	Where(conds ...gen.Condition) IDefaultFreeMaterialDo
	Order(conds ...field.Expr) IDefaultFreeMaterialDo
	Distinct(cols ...field.Expr) IDefaultFreeMaterialDo
	Omit(cols ...field.Expr) IDefaultFreeMaterialDo
	Join(table schema.Tabler, on ...field.Expr) IDefaultFreeMaterialDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDefaultFreeMaterialDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDefaultFreeMaterialDo
	Group(cols ...field.Expr) IDefaultFreeMaterialDo
	Having(conds ...gen.Condition) IDefaultFreeMaterialDo
	Limit(limit int) IDefaultFreeMaterialDo
	Offset(offset int) IDefaultFreeMaterialDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDefaultFreeMaterialDo
	Unscoped() IDefaultFreeMaterialDo
	Create(values ...*table.DefaultFreeMaterial) error
	CreateInBatches(values []*table.DefaultFreeMaterial, batchSize int) error
	Save(values ...*table.DefaultFreeMaterial) error
	First() (*table.DefaultFreeMaterial, error)
	Take() (*table.DefaultFreeMaterial, error)
	Last() (*table.DefaultFreeMaterial, error)
	Find() ([]*table.DefaultFreeMaterial, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.DefaultFreeMaterial, err error)
	FindInBatches(result *[]*table.DefaultFreeMaterial, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.DefaultFreeMaterial) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDefaultFreeMaterialDo
	Assign(attrs ...field.AssignExpr) IDefaultFreeMaterialDo
	Joins(fields ...field.RelationField) IDefaultFreeMaterialDo
	Preload(fields ...field.RelationField) IDefaultFreeMaterialDo
	FirstOrInit() (*table.DefaultFreeMaterial, error)
	FirstOrCreate() (*table.DefaultFreeMaterial, error)
	FindByPage(offset int, limit int) (result []*table.DefaultFreeMaterial, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDefaultFreeMaterialDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d defaultFreeMaterialDo) Debug() IDefaultFreeMaterialDo {
	return d.withDO(d.DO.Debug())
}

func (d defaultFreeMaterialDo) WithContext(ctx context.Context) IDefaultFreeMaterialDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d defaultFreeMaterialDo) ReadDB() IDefaultFreeMaterialDo {
	return d.Clauses(dbresolver.Read)
}

func (d defaultFreeMaterialDo) WriteDB() IDefaultFreeMaterialDo {
	return d.Clauses(dbresolver.Write)
}

func (d defaultFreeMaterialDo) Session(config *gorm.Session) IDefaultFreeMaterialDo {
	return d.withDO(d.DO.Session(config))
}

func (d defaultFreeMaterialDo) Clauses(conds ...clause.Expression) IDefaultFreeMaterialDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d defaultFreeMaterialDo) Returning(value interface{}, columns ...string) IDefaultFreeMaterialDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d defaultFreeMaterialDo) Not(conds ...gen.Condition) IDefaultFreeMaterialDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d defaultFreeMaterialDo) Or(conds ...gen.Condition) IDefaultFreeMaterialDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d defaultFreeMaterialDo) Select(conds ...field.Expr) IDefaultFreeMaterialDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d defaultFreeMaterialDo) Where(conds ...gen.Condition) IDefaultFreeMaterialDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d defaultFreeMaterialDo) Order(conds ...field.Expr) IDefaultFreeMaterialDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d defaultFreeMaterialDo) Distinct(cols ...field.Expr) IDefaultFreeMaterialDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d defaultFreeMaterialDo) Omit(cols ...field.Expr) IDefaultFreeMaterialDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d defaultFreeMaterialDo) Join(table schema.Tabler, on ...field.Expr) IDefaultFreeMaterialDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d defaultFreeMaterialDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDefaultFreeMaterialDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d defaultFreeMaterialDo) RightJoin(table schema.Tabler, on ...field.Expr) IDefaultFreeMaterialDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d defaultFreeMaterialDo) Group(cols ...field.Expr) IDefaultFreeMaterialDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d defaultFreeMaterialDo) Having(conds ...gen.Condition) IDefaultFreeMaterialDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d defaultFreeMaterialDo) Limit(limit int) IDefaultFreeMaterialDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d defaultFreeMaterialDo) Offset(offset int) IDefaultFreeMaterialDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d defaultFreeMaterialDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDefaultFreeMaterialDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d defaultFreeMaterialDo) Unscoped() IDefaultFreeMaterialDo {
	return d.withDO(d.DO.Unscoped())
}

func (d defaultFreeMaterialDo) Create(values ...*table.DefaultFreeMaterial) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d defaultFreeMaterialDo) CreateInBatches(values []*table.DefaultFreeMaterial, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d defaultFreeMaterialDo) Save(values ...*table.DefaultFreeMaterial) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d defaultFreeMaterialDo) First() (*table.DefaultFreeMaterial, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.DefaultFreeMaterial), nil
	}
}

func (d defaultFreeMaterialDo) Take() (*table.DefaultFreeMaterial, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.DefaultFreeMaterial), nil
	}
}

func (d defaultFreeMaterialDo) Last() (*table.DefaultFreeMaterial, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.DefaultFreeMaterial), nil
	}
}

func (d defaultFreeMaterialDo) Find() ([]*table.DefaultFreeMaterial, error) {
	result, err := d.DO.Find()
	return result.([]*table.DefaultFreeMaterial), err
}

func (d defaultFreeMaterialDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.DefaultFreeMaterial, err error) {
	buf := make([]*table.DefaultFreeMaterial, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d defaultFreeMaterialDo) FindInBatches(result *[]*table.DefaultFreeMaterial, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d defaultFreeMaterialDo) Attrs(attrs ...field.AssignExpr) IDefaultFreeMaterialDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d defaultFreeMaterialDo) Assign(attrs ...field.AssignExpr) IDefaultFreeMaterialDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d defaultFreeMaterialDo) Joins(fields ...field.RelationField) IDefaultFreeMaterialDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d defaultFreeMaterialDo) Preload(fields ...field.RelationField) IDefaultFreeMaterialDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d defaultFreeMaterialDo) FirstOrInit() (*table.DefaultFreeMaterial, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.DefaultFreeMaterial), nil
	}
}

func (d defaultFreeMaterialDo) FirstOrCreate() (*table.DefaultFreeMaterial, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.DefaultFreeMaterial), nil
	}
}

func (d defaultFreeMaterialDo) FindByPage(offset int, limit int) (result []*table.DefaultFreeMaterial, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d defaultFreeMaterialDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d defaultFreeMaterialDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d defaultFreeMaterialDo) Delete(models ...*table.DefaultFreeMaterial) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *defaultFreeMaterialDo) withDO(do gen.Dao) *defaultFreeMaterialDo {
	d.DO = *do.(*gen.DO)
	return d
}
