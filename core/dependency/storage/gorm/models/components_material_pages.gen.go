// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newComponentsMaterialPage(db *gorm.DB, opts ...gen.DOOption) componentsMaterialPage {
	_componentsMaterialPage := componentsMaterialPage{}

	_componentsMaterialPage.componentsMaterialPageDo.UseDB(db, opts...)
	_componentsMaterialPage.componentsMaterialPageDo.UseModel(&table.ComponentsMaterialPage{})

	tableName := _componentsMaterialPage.componentsMaterialPageDo.TableName()
	_componentsMaterialPage.ALL = field.NewAsterisk(tableName)
	_componentsMaterialPage.ID = field.NewInt32(tableName, "id")
	_componentsMaterialPage.Priority = field.NewInt32(tableName, "priority")
	_componentsMaterialPage.Annotation = field.NewString(tableName, "annotation")
	_componentsMaterialPage.Content = field.NewString(tableName, "content")

	_componentsMaterialPage.fillFieldMap()

	return _componentsMaterialPage
}

type componentsMaterialPage struct {
	componentsMaterialPageDo

	ALL        field.Asterisk
	ID         field.Int32
	Priority   field.Int32
	Annotation field.String
	Content    field.String

	fieldMap map[string]field.Expr
}

func (c componentsMaterialPage) Table(newTableName string) *componentsMaterialPage {
	c.componentsMaterialPageDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c componentsMaterialPage) As(alias string) *componentsMaterialPage {
	c.componentsMaterialPageDo.DO = *(c.componentsMaterialPageDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *componentsMaterialPage) updateTableName(table string) *componentsMaterialPage {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.Priority = field.NewInt32(table, "priority")
	c.Annotation = field.NewString(table, "annotation")
	c.Content = field.NewString(table, "content")

	c.fillFieldMap()

	return c
}

func (c *componentsMaterialPage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *componentsMaterialPage) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 4)
	c.fieldMap["id"] = c.ID
	c.fieldMap["priority"] = c.Priority
	c.fieldMap["annotation"] = c.Annotation
	c.fieldMap["content"] = c.Content
}

func (c componentsMaterialPage) clone(db *gorm.DB) componentsMaterialPage {
	c.componentsMaterialPageDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c componentsMaterialPage) replaceDB(db *gorm.DB) componentsMaterialPage {
	c.componentsMaterialPageDo.ReplaceDB(db)
	return c
}

type componentsMaterialPageDo struct{ gen.DO }

type IComponentsMaterialPageDo interface {
	gen.SubQuery
	Debug() IComponentsMaterialPageDo
	WithContext(ctx context.Context) IComponentsMaterialPageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IComponentsMaterialPageDo
	WriteDB() IComponentsMaterialPageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IComponentsMaterialPageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IComponentsMaterialPageDo
	Not(conds ...gen.Condition) IComponentsMaterialPageDo
	Or(conds ...gen.Condition) IComponentsMaterialPageDo
	Select(conds ...field.Expr) IComponentsMaterialPageDo
	Where(conds ...gen.Condition) IComponentsMaterialPageDo
	Order(conds ...field.Expr) IComponentsMaterialPageDo
	Distinct(cols ...field.Expr) IComponentsMaterialPageDo
	Omit(cols ...field.Expr) IComponentsMaterialPageDo
	Join(table schema.Tabler, on ...field.Expr) IComponentsMaterialPageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IComponentsMaterialPageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IComponentsMaterialPageDo
	Group(cols ...field.Expr) IComponentsMaterialPageDo
	Having(conds ...gen.Condition) IComponentsMaterialPageDo
	Limit(limit int) IComponentsMaterialPageDo
	Offset(offset int) IComponentsMaterialPageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IComponentsMaterialPageDo
	Unscoped() IComponentsMaterialPageDo
	Create(values ...*table.ComponentsMaterialPage) error
	CreateInBatches(values []*table.ComponentsMaterialPage, batchSize int) error
	Save(values ...*table.ComponentsMaterialPage) error
	First() (*table.ComponentsMaterialPage, error)
	Take() (*table.ComponentsMaterialPage, error)
	Last() (*table.ComponentsMaterialPage, error)
	Find() ([]*table.ComponentsMaterialPage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.ComponentsMaterialPage, err error)
	FindInBatches(result *[]*table.ComponentsMaterialPage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.ComponentsMaterialPage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IComponentsMaterialPageDo
	Assign(attrs ...field.AssignExpr) IComponentsMaterialPageDo
	Joins(fields ...field.RelationField) IComponentsMaterialPageDo
	Preload(fields ...field.RelationField) IComponentsMaterialPageDo
	FirstOrInit() (*table.ComponentsMaterialPage, error)
	FirstOrCreate() (*table.ComponentsMaterialPage, error)
	FindByPage(offset int, limit int) (result []*table.ComponentsMaterialPage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IComponentsMaterialPageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c componentsMaterialPageDo) Debug() IComponentsMaterialPageDo {
	return c.withDO(c.DO.Debug())
}

func (c componentsMaterialPageDo) WithContext(ctx context.Context) IComponentsMaterialPageDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c componentsMaterialPageDo) ReadDB() IComponentsMaterialPageDo {
	return c.Clauses(dbresolver.Read)
}

func (c componentsMaterialPageDo) WriteDB() IComponentsMaterialPageDo {
	return c.Clauses(dbresolver.Write)
}

func (c componentsMaterialPageDo) Session(config *gorm.Session) IComponentsMaterialPageDo {
	return c.withDO(c.DO.Session(config))
}

func (c componentsMaterialPageDo) Clauses(conds ...clause.Expression) IComponentsMaterialPageDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c componentsMaterialPageDo) Returning(value interface{}, columns ...string) IComponentsMaterialPageDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c componentsMaterialPageDo) Not(conds ...gen.Condition) IComponentsMaterialPageDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c componentsMaterialPageDo) Or(conds ...gen.Condition) IComponentsMaterialPageDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c componentsMaterialPageDo) Select(conds ...field.Expr) IComponentsMaterialPageDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c componentsMaterialPageDo) Where(conds ...gen.Condition) IComponentsMaterialPageDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c componentsMaterialPageDo) Order(conds ...field.Expr) IComponentsMaterialPageDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c componentsMaterialPageDo) Distinct(cols ...field.Expr) IComponentsMaterialPageDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c componentsMaterialPageDo) Omit(cols ...field.Expr) IComponentsMaterialPageDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c componentsMaterialPageDo) Join(table schema.Tabler, on ...field.Expr) IComponentsMaterialPageDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c componentsMaterialPageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IComponentsMaterialPageDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c componentsMaterialPageDo) RightJoin(table schema.Tabler, on ...field.Expr) IComponentsMaterialPageDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c componentsMaterialPageDo) Group(cols ...field.Expr) IComponentsMaterialPageDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c componentsMaterialPageDo) Having(conds ...gen.Condition) IComponentsMaterialPageDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c componentsMaterialPageDo) Limit(limit int) IComponentsMaterialPageDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c componentsMaterialPageDo) Offset(offset int) IComponentsMaterialPageDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c componentsMaterialPageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IComponentsMaterialPageDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c componentsMaterialPageDo) Unscoped() IComponentsMaterialPageDo {
	return c.withDO(c.DO.Unscoped())
}

func (c componentsMaterialPageDo) Create(values ...*table.ComponentsMaterialPage) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c componentsMaterialPageDo) CreateInBatches(values []*table.ComponentsMaterialPage, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c componentsMaterialPageDo) Save(values ...*table.ComponentsMaterialPage) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c componentsMaterialPageDo) First() (*table.ComponentsMaterialPage, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.ComponentsMaterialPage), nil
	}
}

func (c componentsMaterialPageDo) Take() (*table.ComponentsMaterialPage, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.ComponentsMaterialPage), nil
	}
}

func (c componentsMaterialPageDo) Last() (*table.ComponentsMaterialPage, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.ComponentsMaterialPage), nil
	}
}

func (c componentsMaterialPageDo) Find() ([]*table.ComponentsMaterialPage, error) {
	result, err := c.DO.Find()
	return result.([]*table.ComponentsMaterialPage), err
}

func (c componentsMaterialPageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.ComponentsMaterialPage, err error) {
	buf := make([]*table.ComponentsMaterialPage, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c componentsMaterialPageDo) FindInBatches(result *[]*table.ComponentsMaterialPage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c componentsMaterialPageDo) Attrs(attrs ...field.AssignExpr) IComponentsMaterialPageDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c componentsMaterialPageDo) Assign(attrs ...field.AssignExpr) IComponentsMaterialPageDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c componentsMaterialPageDo) Joins(fields ...field.RelationField) IComponentsMaterialPageDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c componentsMaterialPageDo) Preload(fields ...field.RelationField) IComponentsMaterialPageDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c componentsMaterialPageDo) FirstOrInit() (*table.ComponentsMaterialPage, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.ComponentsMaterialPage), nil
	}
}

func (c componentsMaterialPageDo) FirstOrCreate() (*table.ComponentsMaterialPage, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.ComponentsMaterialPage), nil
	}
}

func (c componentsMaterialPageDo) FindByPage(offset int, limit int) (result []*table.ComponentsMaterialPage, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c componentsMaterialPageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c componentsMaterialPageDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c componentsMaterialPageDo) Delete(models ...*table.ComponentsMaterialPage) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *componentsMaterialPageDo) withDO(do gen.Dao) *componentsMaterialPageDo {
	c.DO = *do.(*gen.DO)
	return c
}
