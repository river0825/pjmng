// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newUsersPermissionsRole(db *gorm.DB, opts ...gen.DOOption) usersPermissionsRole {
	_usersPermissionsRole := usersPermissionsRole{}

	_usersPermissionsRole.usersPermissionsRoleDo.UseDB(db, opts...)
	_usersPermissionsRole.usersPermissionsRoleDo.UseModel(&table.UsersPermissionsRole{})

	tableName := _usersPermissionsRole.usersPermissionsRoleDo.TableName()
	_usersPermissionsRole.ALL = field.NewAsterisk(tableName)
	_usersPermissionsRole.ID = field.NewInt32(tableName, "id")
	_usersPermissionsRole.Name = field.NewString(tableName, "name")
	_usersPermissionsRole.Description = field.NewString(tableName, "description")
	_usersPermissionsRole.Type = field.NewString(tableName, "type")
	_usersPermissionsRole.CreatedBy = field.NewInt32(tableName, "created_by")
	_usersPermissionsRole.UpdatedBy = field.NewInt32(tableName, "updated_by")

	_usersPermissionsRole.fillFieldMap()

	return _usersPermissionsRole
}

type usersPermissionsRole struct {
	usersPermissionsRoleDo

	ALL         field.Asterisk
	ID          field.Int32
	Name        field.String
	Description field.String
	Type        field.String
	CreatedBy   field.Int32
	UpdatedBy   field.Int32

	fieldMap map[string]field.Expr
}

func (u usersPermissionsRole) Table(newTableName string) *usersPermissionsRole {
	u.usersPermissionsRoleDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u usersPermissionsRole) As(alias string) *usersPermissionsRole {
	u.usersPermissionsRoleDo.DO = *(u.usersPermissionsRoleDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *usersPermissionsRole) updateTableName(table string) *usersPermissionsRole {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.Name = field.NewString(table, "name")
	u.Description = field.NewString(table, "description")
	u.Type = field.NewString(table, "type")
	u.CreatedBy = field.NewInt32(table, "created_by")
	u.UpdatedBy = field.NewInt32(table, "updated_by")

	u.fillFieldMap()

	return u
}

func (u *usersPermissionsRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *usersPermissionsRole) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["name"] = u.Name
	u.fieldMap["description"] = u.Description
	u.fieldMap["type"] = u.Type
	u.fieldMap["created_by"] = u.CreatedBy
	u.fieldMap["updated_by"] = u.UpdatedBy
}

func (u usersPermissionsRole) clone(db *gorm.DB) usersPermissionsRole {
	u.usersPermissionsRoleDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u usersPermissionsRole) replaceDB(db *gorm.DB) usersPermissionsRole {
	u.usersPermissionsRoleDo.ReplaceDB(db)
	return u
}

type usersPermissionsRoleDo struct{ gen.DO }

type IUsersPermissionsRoleDo interface {
	gen.SubQuery
	Debug() IUsersPermissionsRoleDo
	WithContext(ctx context.Context) IUsersPermissionsRoleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUsersPermissionsRoleDo
	WriteDB() IUsersPermissionsRoleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUsersPermissionsRoleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUsersPermissionsRoleDo
	Not(conds ...gen.Condition) IUsersPermissionsRoleDo
	Or(conds ...gen.Condition) IUsersPermissionsRoleDo
	Select(conds ...field.Expr) IUsersPermissionsRoleDo
	Where(conds ...gen.Condition) IUsersPermissionsRoleDo
	Order(conds ...field.Expr) IUsersPermissionsRoleDo
	Distinct(cols ...field.Expr) IUsersPermissionsRoleDo
	Omit(cols ...field.Expr) IUsersPermissionsRoleDo
	Join(table schema.Tabler, on ...field.Expr) IUsersPermissionsRoleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUsersPermissionsRoleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUsersPermissionsRoleDo
	Group(cols ...field.Expr) IUsersPermissionsRoleDo
	Having(conds ...gen.Condition) IUsersPermissionsRoleDo
	Limit(limit int) IUsersPermissionsRoleDo
	Offset(offset int) IUsersPermissionsRoleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUsersPermissionsRoleDo
	Unscoped() IUsersPermissionsRoleDo
	Create(values ...*table.UsersPermissionsRole) error
	CreateInBatches(values []*table.UsersPermissionsRole, batchSize int) error
	Save(values ...*table.UsersPermissionsRole) error
	First() (*table.UsersPermissionsRole, error)
	Take() (*table.UsersPermissionsRole, error)
	Last() (*table.UsersPermissionsRole, error)
	Find() ([]*table.UsersPermissionsRole, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.UsersPermissionsRole, err error)
	FindInBatches(result *[]*table.UsersPermissionsRole, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.UsersPermissionsRole) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUsersPermissionsRoleDo
	Assign(attrs ...field.AssignExpr) IUsersPermissionsRoleDo
	Joins(fields ...field.RelationField) IUsersPermissionsRoleDo
	Preload(fields ...field.RelationField) IUsersPermissionsRoleDo
	FirstOrInit() (*table.UsersPermissionsRole, error)
	FirstOrCreate() (*table.UsersPermissionsRole, error)
	FindByPage(offset int, limit int) (result []*table.UsersPermissionsRole, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUsersPermissionsRoleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u usersPermissionsRoleDo) Debug() IUsersPermissionsRoleDo {
	return u.withDO(u.DO.Debug())
}

func (u usersPermissionsRoleDo) WithContext(ctx context.Context) IUsersPermissionsRoleDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u usersPermissionsRoleDo) ReadDB() IUsersPermissionsRoleDo {
	return u.Clauses(dbresolver.Read)
}

func (u usersPermissionsRoleDo) WriteDB() IUsersPermissionsRoleDo {
	return u.Clauses(dbresolver.Write)
}

func (u usersPermissionsRoleDo) Session(config *gorm.Session) IUsersPermissionsRoleDo {
	return u.withDO(u.DO.Session(config))
}

func (u usersPermissionsRoleDo) Clauses(conds ...clause.Expression) IUsersPermissionsRoleDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u usersPermissionsRoleDo) Returning(value interface{}, columns ...string) IUsersPermissionsRoleDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u usersPermissionsRoleDo) Not(conds ...gen.Condition) IUsersPermissionsRoleDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u usersPermissionsRoleDo) Or(conds ...gen.Condition) IUsersPermissionsRoleDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u usersPermissionsRoleDo) Select(conds ...field.Expr) IUsersPermissionsRoleDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u usersPermissionsRoleDo) Where(conds ...gen.Condition) IUsersPermissionsRoleDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u usersPermissionsRoleDo) Order(conds ...field.Expr) IUsersPermissionsRoleDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u usersPermissionsRoleDo) Distinct(cols ...field.Expr) IUsersPermissionsRoleDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u usersPermissionsRoleDo) Omit(cols ...field.Expr) IUsersPermissionsRoleDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u usersPermissionsRoleDo) Join(table schema.Tabler, on ...field.Expr) IUsersPermissionsRoleDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u usersPermissionsRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUsersPermissionsRoleDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u usersPermissionsRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) IUsersPermissionsRoleDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u usersPermissionsRoleDo) Group(cols ...field.Expr) IUsersPermissionsRoleDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u usersPermissionsRoleDo) Having(conds ...gen.Condition) IUsersPermissionsRoleDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u usersPermissionsRoleDo) Limit(limit int) IUsersPermissionsRoleDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u usersPermissionsRoleDo) Offset(offset int) IUsersPermissionsRoleDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u usersPermissionsRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUsersPermissionsRoleDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u usersPermissionsRoleDo) Unscoped() IUsersPermissionsRoleDo {
	return u.withDO(u.DO.Unscoped())
}

func (u usersPermissionsRoleDo) Create(values ...*table.UsersPermissionsRole) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u usersPermissionsRoleDo) CreateInBatches(values []*table.UsersPermissionsRole, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u usersPermissionsRoleDo) Save(values ...*table.UsersPermissionsRole) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u usersPermissionsRoleDo) First() (*table.UsersPermissionsRole, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.UsersPermissionsRole), nil
	}
}

func (u usersPermissionsRoleDo) Take() (*table.UsersPermissionsRole, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.UsersPermissionsRole), nil
	}
}

func (u usersPermissionsRoleDo) Last() (*table.UsersPermissionsRole, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.UsersPermissionsRole), nil
	}
}

func (u usersPermissionsRoleDo) Find() ([]*table.UsersPermissionsRole, error) {
	result, err := u.DO.Find()
	return result.([]*table.UsersPermissionsRole), err
}

func (u usersPermissionsRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.UsersPermissionsRole, err error) {
	buf := make([]*table.UsersPermissionsRole, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u usersPermissionsRoleDo) FindInBatches(result *[]*table.UsersPermissionsRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u usersPermissionsRoleDo) Attrs(attrs ...field.AssignExpr) IUsersPermissionsRoleDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u usersPermissionsRoleDo) Assign(attrs ...field.AssignExpr) IUsersPermissionsRoleDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u usersPermissionsRoleDo) Joins(fields ...field.RelationField) IUsersPermissionsRoleDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u usersPermissionsRoleDo) Preload(fields ...field.RelationField) IUsersPermissionsRoleDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u usersPermissionsRoleDo) FirstOrInit() (*table.UsersPermissionsRole, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.UsersPermissionsRole), nil
	}
}

func (u usersPermissionsRoleDo) FirstOrCreate() (*table.UsersPermissionsRole, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.UsersPermissionsRole), nil
	}
}

func (u usersPermissionsRoleDo) FindByPage(offset int, limit int) (result []*table.UsersPermissionsRole, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u usersPermissionsRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u usersPermissionsRoleDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u usersPermissionsRoleDo) Delete(models ...*table.UsersPermissionsRole) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *usersPermissionsRoleDo) withDO(do gen.Dao) *usersPermissionsRoleDo {
	u.DO = *do.(*gen.DO)
	return u
}
