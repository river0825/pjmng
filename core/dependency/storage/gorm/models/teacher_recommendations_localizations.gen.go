// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newTeacherRecommendationsLocalization(db *gorm.DB, opts ...gen.DOOption) teacherRecommendationsLocalization {
	_teacherRecommendationsLocalization := teacherRecommendationsLocalization{}

	_teacherRecommendationsLocalization.teacherRecommendationsLocalizationDo.UseDB(db, opts...)
	_teacherRecommendationsLocalization.teacherRecommendationsLocalizationDo.UseModel(&table.TeacherRecommendationsLocalization{})

	tableName := _teacherRecommendationsLocalization.teacherRecommendationsLocalizationDo.TableName()
	_teacherRecommendationsLocalization.ALL = field.NewAsterisk(tableName)
	_teacherRecommendationsLocalization.ID = field.NewInt32(tableName, "id")
	_teacherRecommendationsLocalization.TeacherRecommendationID2 = field.NewInt32(tableName, "teacher_recommendation_id")
	_teacherRecommendationsLocalization.TeacherRecommendationID = field.NewInt32(tableName, "teacher-recommendation_id")

	_teacherRecommendationsLocalization.fillFieldMap()

	return _teacherRecommendationsLocalization
}

type teacherRecommendationsLocalization struct {
	teacherRecommendationsLocalizationDo

	ALL                      field.Asterisk
	ID                       field.Int32
	TeacherRecommendationID2 field.Int32
	TeacherRecommendationID  field.Int32

	fieldMap map[string]field.Expr
}

func (t teacherRecommendationsLocalization) Table(newTableName string) *teacherRecommendationsLocalization {
	t.teacherRecommendationsLocalizationDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t teacherRecommendationsLocalization) As(alias string) *teacherRecommendationsLocalization {
	t.teacherRecommendationsLocalizationDo.DO = *(t.teacherRecommendationsLocalizationDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *teacherRecommendationsLocalization) updateTableName(table string) *teacherRecommendationsLocalization {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.TeacherRecommendationID2 = field.NewInt32(table, "teacher_recommendation_id")
	t.TeacherRecommendationID = field.NewInt32(table, "teacher-recommendation_id")

	t.fillFieldMap()

	return t
}

func (t *teacherRecommendationsLocalization) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *teacherRecommendationsLocalization) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["id"] = t.ID
	t.fieldMap["teacher_recommendation_id"] = t.TeacherRecommendationID2
	t.fieldMap["teacher-recommendation_id"] = t.TeacherRecommendationID
}

func (t teacherRecommendationsLocalization) clone(db *gorm.DB) teacherRecommendationsLocalization {
	t.teacherRecommendationsLocalizationDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t teacherRecommendationsLocalization) replaceDB(db *gorm.DB) teacherRecommendationsLocalization {
	t.teacherRecommendationsLocalizationDo.ReplaceDB(db)
	return t
}

type teacherRecommendationsLocalizationDo struct{ gen.DO }

type ITeacherRecommendationsLocalizationDo interface {
	gen.SubQuery
	Debug() ITeacherRecommendationsLocalizationDo
	WithContext(ctx context.Context) ITeacherRecommendationsLocalizationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITeacherRecommendationsLocalizationDo
	WriteDB() ITeacherRecommendationsLocalizationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITeacherRecommendationsLocalizationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITeacherRecommendationsLocalizationDo
	Not(conds ...gen.Condition) ITeacherRecommendationsLocalizationDo
	Or(conds ...gen.Condition) ITeacherRecommendationsLocalizationDo
	Select(conds ...field.Expr) ITeacherRecommendationsLocalizationDo
	Where(conds ...gen.Condition) ITeacherRecommendationsLocalizationDo
	Order(conds ...field.Expr) ITeacherRecommendationsLocalizationDo
	Distinct(cols ...field.Expr) ITeacherRecommendationsLocalizationDo
	Omit(cols ...field.Expr) ITeacherRecommendationsLocalizationDo
	Join(table schema.Tabler, on ...field.Expr) ITeacherRecommendationsLocalizationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITeacherRecommendationsLocalizationDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITeacherRecommendationsLocalizationDo
	Group(cols ...field.Expr) ITeacherRecommendationsLocalizationDo
	Having(conds ...gen.Condition) ITeacherRecommendationsLocalizationDo
	Limit(limit int) ITeacherRecommendationsLocalizationDo
	Offset(offset int) ITeacherRecommendationsLocalizationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITeacherRecommendationsLocalizationDo
	Unscoped() ITeacherRecommendationsLocalizationDo
	Create(values ...*table.TeacherRecommendationsLocalization) error
	CreateInBatches(values []*table.TeacherRecommendationsLocalization, batchSize int) error
	Save(values ...*table.TeacherRecommendationsLocalization) error
	First() (*table.TeacherRecommendationsLocalization, error)
	Take() (*table.TeacherRecommendationsLocalization, error)
	Last() (*table.TeacherRecommendationsLocalization, error)
	Find() ([]*table.TeacherRecommendationsLocalization, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.TeacherRecommendationsLocalization, err error)
	FindInBatches(result *[]*table.TeacherRecommendationsLocalization, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.TeacherRecommendationsLocalization) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITeacherRecommendationsLocalizationDo
	Assign(attrs ...field.AssignExpr) ITeacherRecommendationsLocalizationDo
	Joins(fields ...field.RelationField) ITeacherRecommendationsLocalizationDo
	Preload(fields ...field.RelationField) ITeacherRecommendationsLocalizationDo
	FirstOrInit() (*table.TeacherRecommendationsLocalization, error)
	FirstOrCreate() (*table.TeacherRecommendationsLocalization, error)
	FindByPage(offset int, limit int) (result []*table.TeacherRecommendationsLocalization, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITeacherRecommendationsLocalizationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t teacherRecommendationsLocalizationDo) Debug() ITeacherRecommendationsLocalizationDo {
	return t.withDO(t.DO.Debug())
}

func (t teacherRecommendationsLocalizationDo) WithContext(ctx context.Context) ITeacherRecommendationsLocalizationDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t teacherRecommendationsLocalizationDo) ReadDB() ITeacherRecommendationsLocalizationDo {
	return t.Clauses(dbresolver.Read)
}

func (t teacherRecommendationsLocalizationDo) WriteDB() ITeacherRecommendationsLocalizationDo {
	return t.Clauses(dbresolver.Write)
}

func (t teacherRecommendationsLocalizationDo) Session(config *gorm.Session) ITeacherRecommendationsLocalizationDo {
	return t.withDO(t.DO.Session(config))
}

func (t teacherRecommendationsLocalizationDo) Clauses(conds ...clause.Expression) ITeacherRecommendationsLocalizationDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t teacherRecommendationsLocalizationDo) Returning(value interface{}, columns ...string) ITeacherRecommendationsLocalizationDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t teacherRecommendationsLocalizationDo) Not(conds ...gen.Condition) ITeacherRecommendationsLocalizationDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t teacherRecommendationsLocalizationDo) Or(conds ...gen.Condition) ITeacherRecommendationsLocalizationDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t teacherRecommendationsLocalizationDo) Select(conds ...field.Expr) ITeacherRecommendationsLocalizationDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t teacherRecommendationsLocalizationDo) Where(conds ...gen.Condition) ITeacherRecommendationsLocalizationDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t teacherRecommendationsLocalizationDo) Order(conds ...field.Expr) ITeacherRecommendationsLocalizationDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t teacherRecommendationsLocalizationDo) Distinct(cols ...field.Expr) ITeacherRecommendationsLocalizationDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t teacherRecommendationsLocalizationDo) Omit(cols ...field.Expr) ITeacherRecommendationsLocalizationDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t teacherRecommendationsLocalizationDo) Join(table schema.Tabler, on ...field.Expr) ITeacherRecommendationsLocalizationDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t teacherRecommendationsLocalizationDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITeacherRecommendationsLocalizationDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t teacherRecommendationsLocalizationDo) RightJoin(table schema.Tabler, on ...field.Expr) ITeacherRecommendationsLocalizationDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t teacherRecommendationsLocalizationDo) Group(cols ...field.Expr) ITeacherRecommendationsLocalizationDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t teacherRecommendationsLocalizationDo) Having(conds ...gen.Condition) ITeacherRecommendationsLocalizationDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t teacherRecommendationsLocalizationDo) Limit(limit int) ITeacherRecommendationsLocalizationDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t teacherRecommendationsLocalizationDo) Offset(offset int) ITeacherRecommendationsLocalizationDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t teacherRecommendationsLocalizationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITeacherRecommendationsLocalizationDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t teacherRecommendationsLocalizationDo) Unscoped() ITeacherRecommendationsLocalizationDo {
	return t.withDO(t.DO.Unscoped())
}

func (t teacherRecommendationsLocalizationDo) Create(values ...*table.TeacherRecommendationsLocalization) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t teacherRecommendationsLocalizationDo) CreateInBatches(values []*table.TeacherRecommendationsLocalization, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t teacherRecommendationsLocalizationDo) Save(values ...*table.TeacherRecommendationsLocalization) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t teacherRecommendationsLocalizationDo) First() (*table.TeacherRecommendationsLocalization, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.TeacherRecommendationsLocalization), nil
	}
}

func (t teacherRecommendationsLocalizationDo) Take() (*table.TeacherRecommendationsLocalization, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.TeacherRecommendationsLocalization), nil
	}
}

func (t teacherRecommendationsLocalizationDo) Last() (*table.TeacherRecommendationsLocalization, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.TeacherRecommendationsLocalization), nil
	}
}

func (t teacherRecommendationsLocalizationDo) Find() ([]*table.TeacherRecommendationsLocalization, error) {
	result, err := t.DO.Find()
	return result.([]*table.TeacherRecommendationsLocalization), err
}

func (t teacherRecommendationsLocalizationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.TeacherRecommendationsLocalization, err error) {
	buf := make([]*table.TeacherRecommendationsLocalization, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t teacherRecommendationsLocalizationDo) FindInBatches(result *[]*table.TeacherRecommendationsLocalization, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t teacherRecommendationsLocalizationDo) Attrs(attrs ...field.AssignExpr) ITeacherRecommendationsLocalizationDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t teacherRecommendationsLocalizationDo) Assign(attrs ...field.AssignExpr) ITeacherRecommendationsLocalizationDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t teacherRecommendationsLocalizationDo) Joins(fields ...field.RelationField) ITeacherRecommendationsLocalizationDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t teacherRecommendationsLocalizationDo) Preload(fields ...field.RelationField) ITeacherRecommendationsLocalizationDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t teacherRecommendationsLocalizationDo) FirstOrInit() (*table.TeacherRecommendationsLocalization, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.TeacherRecommendationsLocalization), nil
	}
}

func (t teacherRecommendationsLocalizationDo) FirstOrCreate() (*table.TeacherRecommendationsLocalization, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.TeacherRecommendationsLocalization), nil
	}
}

func (t teacherRecommendationsLocalizationDo) FindByPage(offset int, limit int) (result []*table.TeacherRecommendationsLocalization, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t teacherRecommendationsLocalizationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t teacherRecommendationsLocalizationDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t teacherRecommendationsLocalizationDo) Delete(models ...*table.TeacherRecommendationsLocalization) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *teacherRecommendationsLocalizationDo) withDO(do gen.Dao) *teacherRecommendationsLocalizationDo {
	t.DO = *do.(*gen.DO)
	return t
}
