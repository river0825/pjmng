// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newEditorAudio(db *gorm.DB, opts ...gen.DOOption) editorAudio {
	_editorAudio := editorAudio{}

	_editorAudio.editorAudioDo.UseDB(db, opts...)
	_editorAudio.editorAudioDo.UseModel(&table.EditorAudio{})

	tableName := _editorAudio.editorAudioDo.TableName()
	_editorAudio.ALL = field.NewAsterisk(tableName)
	_editorAudio.ID = field.NewInt32(tableName, "id")
	_editorAudio.Name = field.NewString(tableName, "name")
	_editorAudio.Tag = field.NewString(tableName, "tag")
	_editorAudio.PublishedAt = field.NewTime(tableName, "published_at")
	_editorAudio.CreatedBy = field.NewInt32(tableName, "created_by")
	_editorAudio.UpdatedBy = field.NewInt32(tableName, "updated_by")
	_editorAudio.CreatedAt = field.NewTime(tableName, "created_at")
	_editorAudio.UpdatedAt = field.NewTime(tableName, "updated_at")
	_editorAudio.Category = field.NewInt32(tableName, "category")
	_editorAudio.TagSimplify = field.NewString(tableName, "tag_simplify")

	_editorAudio.fillFieldMap()

	return _editorAudio
}

type editorAudio struct {
	editorAudioDo

	ALL         field.Asterisk
	ID          field.Int32
	Name        field.String
	Tag         field.String
	PublishedAt field.Time
	CreatedBy   field.Int32
	UpdatedBy   field.Int32
	CreatedAt   field.Time
	UpdatedAt   field.Time
	Category    field.Int32
	TagSimplify field.String

	fieldMap map[string]field.Expr
}

func (e editorAudio) Table(newTableName string) *editorAudio {
	e.editorAudioDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e editorAudio) As(alias string) *editorAudio {
	e.editorAudioDo.DO = *(e.editorAudioDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *editorAudio) updateTableName(table string) *editorAudio {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Name = field.NewString(table, "name")
	e.Tag = field.NewString(table, "tag")
	e.PublishedAt = field.NewTime(table, "published_at")
	e.CreatedBy = field.NewInt32(table, "created_by")
	e.UpdatedBy = field.NewInt32(table, "updated_by")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.Category = field.NewInt32(table, "category")
	e.TagSimplify = field.NewString(table, "tag_simplify")

	e.fillFieldMap()

	return e
}

func (e *editorAudio) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *editorAudio) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 10)
	e.fieldMap["id"] = e.ID
	e.fieldMap["name"] = e.Name
	e.fieldMap["tag"] = e.Tag
	e.fieldMap["published_at"] = e.PublishedAt
	e.fieldMap["created_by"] = e.CreatedBy
	e.fieldMap["updated_by"] = e.UpdatedBy
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["category"] = e.Category
	e.fieldMap["tag_simplify"] = e.TagSimplify
}

func (e editorAudio) clone(db *gorm.DB) editorAudio {
	e.editorAudioDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e editorAudio) replaceDB(db *gorm.DB) editorAudio {
	e.editorAudioDo.ReplaceDB(db)
	return e
}

type editorAudioDo struct{ gen.DO }

type IEditorAudioDo interface {
	gen.SubQuery
	Debug() IEditorAudioDo
	WithContext(ctx context.Context) IEditorAudioDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEditorAudioDo
	WriteDB() IEditorAudioDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEditorAudioDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEditorAudioDo
	Not(conds ...gen.Condition) IEditorAudioDo
	Or(conds ...gen.Condition) IEditorAudioDo
	Select(conds ...field.Expr) IEditorAudioDo
	Where(conds ...gen.Condition) IEditorAudioDo
	Order(conds ...field.Expr) IEditorAudioDo
	Distinct(cols ...field.Expr) IEditorAudioDo
	Omit(cols ...field.Expr) IEditorAudioDo
	Join(table schema.Tabler, on ...field.Expr) IEditorAudioDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEditorAudioDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEditorAudioDo
	Group(cols ...field.Expr) IEditorAudioDo
	Having(conds ...gen.Condition) IEditorAudioDo
	Limit(limit int) IEditorAudioDo
	Offset(offset int) IEditorAudioDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEditorAudioDo
	Unscoped() IEditorAudioDo
	Create(values ...*table.EditorAudio) error
	CreateInBatches(values []*table.EditorAudio, batchSize int) error
	Save(values ...*table.EditorAudio) error
	First() (*table.EditorAudio, error)
	Take() (*table.EditorAudio, error)
	Last() (*table.EditorAudio, error)
	Find() ([]*table.EditorAudio, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.EditorAudio, err error)
	FindInBatches(result *[]*table.EditorAudio, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.EditorAudio) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEditorAudioDo
	Assign(attrs ...field.AssignExpr) IEditorAudioDo
	Joins(fields ...field.RelationField) IEditorAudioDo
	Preload(fields ...field.RelationField) IEditorAudioDo
	FirstOrInit() (*table.EditorAudio, error)
	FirstOrCreate() (*table.EditorAudio, error)
	FindByPage(offset int, limit int) (result []*table.EditorAudio, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEditorAudioDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e editorAudioDo) Debug() IEditorAudioDo {
	return e.withDO(e.DO.Debug())
}

func (e editorAudioDo) WithContext(ctx context.Context) IEditorAudioDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e editorAudioDo) ReadDB() IEditorAudioDo {
	return e.Clauses(dbresolver.Read)
}

func (e editorAudioDo) WriteDB() IEditorAudioDo {
	return e.Clauses(dbresolver.Write)
}

func (e editorAudioDo) Session(config *gorm.Session) IEditorAudioDo {
	return e.withDO(e.DO.Session(config))
}

func (e editorAudioDo) Clauses(conds ...clause.Expression) IEditorAudioDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e editorAudioDo) Returning(value interface{}, columns ...string) IEditorAudioDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e editorAudioDo) Not(conds ...gen.Condition) IEditorAudioDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e editorAudioDo) Or(conds ...gen.Condition) IEditorAudioDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e editorAudioDo) Select(conds ...field.Expr) IEditorAudioDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e editorAudioDo) Where(conds ...gen.Condition) IEditorAudioDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e editorAudioDo) Order(conds ...field.Expr) IEditorAudioDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e editorAudioDo) Distinct(cols ...field.Expr) IEditorAudioDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e editorAudioDo) Omit(cols ...field.Expr) IEditorAudioDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e editorAudioDo) Join(table schema.Tabler, on ...field.Expr) IEditorAudioDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e editorAudioDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEditorAudioDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e editorAudioDo) RightJoin(table schema.Tabler, on ...field.Expr) IEditorAudioDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e editorAudioDo) Group(cols ...field.Expr) IEditorAudioDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e editorAudioDo) Having(conds ...gen.Condition) IEditorAudioDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e editorAudioDo) Limit(limit int) IEditorAudioDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e editorAudioDo) Offset(offset int) IEditorAudioDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e editorAudioDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEditorAudioDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e editorAudioDo) Unscoped() IEditorAudioDo {
	return e.withDO(e.DO.Unscoped())
}

func (e editorAudioDo) Create(values ...*table.EditorAudio) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e editorAudioDo) CreateInBatches(values []*table.EditorAudio, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e editorAudioDo) Save(values ...*table.EditorAudio) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e editorAudioDo) First() (*table.EditorAudio, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorAudio), nil
	}
}

func (e editorAudioDo) Take() (*table.EditorAudio, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorAudio), nil
	}
}

func (e editorAudioDo) Last() (*table.EditorAudio, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorAudio), nil
	}
}

func (e editorAudioDo) Find() ([]*table.EditorAudio, error) {
	result, err := e.DO.Find()
	return result.([]*table.EditorAudio), err
}

func (e editorAudioDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.EditorAudio, err error) {
	buf := make([]*table.EditorAudio, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e editorAudioDo) FindInBatches(result *[]*table.EditorAudio, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e editorAudioDo) Attrs(attrs ...field.AssignExpr) IEditorAudioDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e editorAudioDo) Assign(attrs ...field.AssignExpr) IEditorAudioDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e editorAudioDo) Joins(fields ...field.RelationField) IEditorAudioDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e editorAudioDo) Preload(fields ...field.RelationField) IEditorAudioDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e editorAudioDo) FirstOrInit() (*table.EditorAudio, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorAudio), nil
	}
}

func (e editorAudioDo) FirstOrCreate() (*table.EditorAudio, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorAudio), nil
	}
}

func (e editorAudioDo) FindByPage(offset int, limit int) (result []*table.EditorAudio, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e editorAudioDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e editorAudioDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e editorAudioDo) Delete(models ...*table.EditorAudio) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *editorAudioDo) withDO(do gen.Dao) *editorAudioDo {
	e.DO = *do.(*gen.DO)
	return e
}
