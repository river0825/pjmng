// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newEditorGrammer(db *gorm.DB, opts ...gen.DOOption) editorGrammer {
	_editorGrammer := editorGrammer{}

	_editorGrammer.editorGrammerDo.UseDB(db, opts...)
	_editorGrammer.editorGrammerDo.UseModel(&table.EditorGrammer{})

	tableName := _editorGrammer.editorGrammerDo.TableName()
	_editorGrammer.ALL = field.NewAsterisk(tableName)
	_editorGrammer.ID = field.NewInt32(tableName, "id")
	_editorGrammer.Content = field.NewString(tableName, "content")
	_editorGrammer.Name = field.NewString(tableName, "name")
	_editorGrammer.Tag = field.NewString(tableName, "tag")
	_editorGrammer.PublishedAt = field.NewTime(tableName, "published_at")
	_editorGrammer.CreatedBy = field.NewInt32(tableName, "created_by")
	_editorGrammer.UpdatedBy = field.NewInt32(tableName, "updated_by")
	_editorGrammer.CreatedAt = field.NewTime(tableName, "created_at")
	_editorGrammer.UpdatedAt = field.NewTime(tableName, "updated_at")
	_editorGrammer.Category = field.NewInt32(tableName, "category")
	_editorGrammer.TagSimplify = field.NewString(tableName, "tag_simplify")

	_editorGrammer.fillFieldMap()

	return _editorGrammer
}

type editorGrammer struct {
	editorGrammerDo

	ALL         field.Asterisk
	ID          field.Int32
	Content     field.String
	Name        field.String
	Tag         field.String
	PublishedAt field.Time
	CreatedBy   field.Int32
	UpdatedBy   field.Int32
	CreatedAt   field.Time
	UpdatedAt   field.Time
	Category    field.Int32
	TagSimplify field.String

	fieldMap map[string]field.Expr
}

func (e editorGrammer) Table(newTableName string) *editorGrammer {
	e.editorGrammerDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e editorGrammer) As(alias string) *editorGrammer {
	e.editorGrammerDo.DO = *(e.editorGrammerDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *editorGrammer) updateTableName(table string) *editorGrammer {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Content = field.NewString(table, "content")
	e.Name = field.NewString(table, "name")
	e.Tag = field.NewString(table, "tag")
	e.PublishedAt = field.NewTime(table, "published_at")
	e.CreatedBy = field.NewInt32(table, "created_by")
	e.UpdatedBy = field.NewInt32(table, "updated_by")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.Category = field.NewInt32(table, "category")
	e.TagSimplify = field.NewString(table, "tag_simplify")

	e.fillFieldMap()

	return e
}

func (e *editorGrammer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *editorGrammer) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 11)
	e.fieldMap["id"] = e.ID
	e.fieldMap["content"] = e.Content
	e.fieldMap["name"] = e.Name
	e.fieldMap["tag"] = e.Tag
	e.fieldMap["published_at"] = e.PublishedAt
	e.fieldMap["created_by"] = e.CreatedBy
	e.fieldMap["updated_by"] = e.UpdatedBy
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["category"] = e.Category
	e.fieldMap["tag_simplify"] = e.TagSimplify
}

func (e editorGrammer) clone(db *gorm.DB) editorGrammer {
	e.editorGrammerDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e editorGrammer) replaceDB(db *gorm.DB) editorGrammer {
	e.editorGrammerDo.ReplaceDB(db)
	return e
}

type editorGrammerDo struct{ gen.DO }

type IEditorGrammerDo interface {
	gen.SubQuery
	Debug() IEditorGrammerDo
	WithContext(ctx context.Context) IEditorGrammerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEditorGrammerDo
	WriteDB() IEditorGrammerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEditorGrammerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEditorGrammerDo
	Not(conds ...gen.Condition) IEditorGrammerDo
	Or(conds ...gen.Condition) IEditorGrammerDo
	Select(conds ...field.Expr) IEditorGrammerDo
	Where(conds ...gen.Condition) IEditorGrammerDo
	Order(conds ...field.Expr) IEditorGrammerDo
	Distinct(cols ...field.Expr) IEditorGrammerDo
	Omit(cols ...field.Expr) IEditorGrammerDo
	Join(table schema.Tabler, on ...field.Expr) IEditorGrammerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEditorGrammerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEditorGrammerDo
	Group(cols ...field.Expr) IEditorGrammerDo
	Having(conds ...gen.Condition) IEditorGrammerDo
	Limit(limit int) IEditorGrammerDo
	Offset(offset int) IEditorGrammerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEditorGrammerDo
	Unscoped() IEditorGrammerDo
	Create(values ...*table.EditorGrammer) error
	CreateInBatches(values []*table.EditorGrammer, batchSize int) error
	Save(values ...*table.EditorGrammer) error
	First() (*table.EditorGrammer, error)
	Take() (*table.EditorGrammer, error)
	Last() (*table.EditorGrammer, error)
	Find() ([]*table.EditorGrammer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.EditorGrammer, err error)
	FindInBatches(result *[]*table.EditorGrammer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.EditorGrammer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEditorGrammerDo
	Assign(attrs ...field.AssignExpr) IEditorGrammerDo
	Joins(fields ...field.RelationField) IEditorGrammerDo
	Preload(fields ...field.RelationField) IEditorGrammerDo
	FirstOrInit() (*table.EditorGrammer, error)
	FirstOrCreate() (*table.EditorGrammer, error)
	FindByPage(offset int, limit int) (result []*table.EditorGrammer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEditorGrammerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e editorGrammerDo) Debug() IEditorGrammerDo {
	return e.withDO(e.DO.Debug())
}

func (e editorGrammerDo) WithContext(ctx context.Context) IEditorGrammerDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e editorGrammerDo) ReadDB() IEditorGrammerDo {
	return e.Clauses(dbresolver.Read)
}

func (e editorGrammerDo) WriteDB() IEditorGrammerDo {
	return e.Clauses(dbresolver.Write)
}

func (e editorGrammerDo) Session(config *gorm.Session) IEditorGrammerDo {
	return e.withDO(e.DO.Session(config))
}

func (e editorGrammerDo) Clauses(conds ...clause.Expression) IEditorGrammerDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e editorGrammerDo) Returning(value interface{}, columns ...string) IEditorGrammerDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e editorGrammerDo) Not(conds ...gen.Condition) IEditorGrammerDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e editorGrammerDo) Or(conds ...gen.Condition) IEditorGrammerDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e editorGrammerDo) Select(conds ...field.Expr) IEditorGrammerDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e editorGrammerDo) Where(conds ...gen.Condition) IEditorGrammerDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e editorGrammerDo) Order(conds ...field.Expr) IEditorGrammerDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e editorGrammerDo) Distinct(cols ...field.Expr) IEditorGrammerDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e editorGrammerDo) Omit(cols ...field.Expr) IEditorGrammerDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e editorGrammerDo) Join(table schema.Tabler, on ...field.Expr) IEditorGrammerDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e editorGrammerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEditorGrammerDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e editorGrammerDo) RightJoin(table schema.Tabler, on ...field.Expr) IEditorGrammerDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e editorGrammerDo) Group(cols ...field.Expr) IEditorGrammerDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e editorGrammerDo) Having(conds ...gen.Condition) IEditorGrammerDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e editorGrammerDo) Limit(limit int) IEditorGrammerDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e editorGrammerDo) Offset(offset int) IEditorGrammerDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e editorGrammerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEditorGrammerDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e editorGrammerDo) Unscoped() IEditorGrammerDo {
	return e.withDO(e.DO.Unscoped())
}

func (e editorGrammerDo) Create(values ...*table.EditorGrammer) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e editorGrammerDo) CreateInBatches(values []*table.EditorGrammer, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e editorGrammerDo) Save(values ...*table.EditorGrammer) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e editorGrammerDo) First() (*table.EditorGrammer, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorGrammer), nil
	}
}

func (e editorGrammerDo) Take() (*table.EditorGrammer, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorGrammer), nil
	}
}

func (e editorGrammerDo) Last() (*table.EditorGrammer, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorGrammer), nil
	}
}

func (e editorGrammerDo) Find() ([]*table.EditorGrammer, error) {
	result, err := e.DO.Find()
	return result.([]*table.EditorGrammer), err
}

func (e editorGrammerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.EditorGrammer, err error) {
	buf := make([]*table.EditorGrammer, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e editorGrammerDo) FindInBatches(result *[]*table.EditorGrammer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e editorGrammerDo) Attrs(attrs ...field.AssignExpr) IEditorGrammerDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e editorGrammerDo) Assign(attrs ...field.AssignExpr) IEditorGrammerDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e editorGrammerDo) Joins(fields ...field.RelationField) IEditorGrammerDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e editorGrammerDo) Preload(fields ...field.RelationField) IEditorGrammerDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e editorGrammerDo) FirstOrInit() (*table.EditorGrammer, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorGrammer), nil
	}
}

func (e editorGrammerDo) FirstOrCreate() (*table.EditorGrammer, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorGrammer), nil
	}
}

func (e editorGrammerDo) FindByPage(offset int, limit int) (result []*table.EditorGrammer, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e editorGrammerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e editorGrammerDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e editorGrammerDo) Delete(models ...*table.EditorGrammer) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *editorGrammerDo) withDO(do gen.Dao) *editorGrammerDo {
	e.DO = *do.(*gen.DO)
	return e
}
