// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newEditorAudiosCategorie(db *gorm.DB, opts ...gen.DOOption) editorAudiosCategorie {
	_editorAudiosCategorie := editorAudiosCategorie{}

	_editorAudiosCategorie.editorAudiosCategorieDo.UseDB(db, opts...)
	_editorAudiosCategorie.editorAudiosCategorieDo.UseModel(&table.EditorAudiosCategorie{})

	tableName := _editorAudiosCategorie.editorAudiosCategorieDo.TableName()
	_editorAudiosCategorie.ALL = field.NewAsterisk(tableName)
	_editorAudiosCategorie.ID = field.NewInt32(tableName, "id")
	_editorAudiosCategorie.EditorAudioID = field.NewInt32(tableName, "editor_audio_id")
	_editorAudiosCategorie.EditorCategoryAudioID = field.NewInt32(tableName, "editor-category-audio_id")

	_editorAudiosCategorie.fillFieldMap()

	return _editorAudiosCategorie
}

type editorAudiosCategorie struct {
	editorAudiosCategorieDo

	ALL                   field.Asterisk
	ID                    field.Int32
	EditorAudioID         field.Int32
	EditorCategoryAudioID field.Int32

	fieldMap map[string]field.Expr
}

func (e editorAudiosCategorie) Table(newTableName string) *editorAudiosCategorie {
	e.editorAudiosCategorieDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e editorAudiosCategorie) As(alias string) *editorAudiosCategorie {
	e.editorAudiosCategorieDo.DO = *(e.editorAudiosCategorieDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *editorAudiosCategorie) updateTableName(table string) *editorAudiosCategorie {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.EditorAudioID = field.NewInt32(table, "editor_audio_id")
	e.EditorCategoryAudioID = field.NewInt32(table, "editor-category-audio_id")

	e.fillFieldMap()

	return e
}

func (e *editorAudiosCategorie) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *editorAudiosCategorie) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 3)
	e.fieldMap["id"] = e.ID
	e.fieldMap["editor_audio_id"] = e.EditorAudioID
	e.fieldMap["editor-category-audio_id"] = e.EditorCategoryAudioID
}

func (e editorAudiosCategorie) clone(db *gorm.DB) editorAudiosCategorie {
	e.editorAudiosCategorieDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e editorAudiosCategorie) replaceDB(db *gorm.DB) editorAudiosCategorie {
	e.editorAudiosCategorieDo.ReplaceDB(db)
	return e
}

type editorAudiosCategorieDo struct{ gen.DO }

type IEditorAudiosCategorieDo interface {
	gen.SubQuery
	Debug() IEditorAudiosCategorieDo
	WithContext(ctx context.Context) IEditorAudiosCategorieDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEditorAudiosCategorieDo
	WriteDB() IEditorAudiosCategorieDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEditorAudiosCategorieDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEditorAudiosCategorieDo
	Not(conds ...gen.Condition) IEditorAudiosCategorieDo
	Or(conds ...gen.Condition) IEditorAudiosCategorieDo
	Select(conds ...field.Expr) IEditorAudiosCategorieDo
	Where(conds ...gen.Condition) IEditorAudiosCategorieDo
	Order(conds ...field.Expr) IEditorAudiosCategorieDo
	Distinct(cols ...field.Expr) IEditorAudiosCategorieDo
	Omit(cols ...field.Expr) IEditorAudiosCategorieDo
	Join(table schema.Tabler, on ...field.Expr) IEditorAudiosCategorieDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEditorAudiosCategorieDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEditorAudiosCategorieDo
	Group(cols ...field.Expr) IEditorAudiosCategorieDo
	Having(conds ...gen.Condition) IEditorAudiosCategorieDo
	Limit(limit int) IEditorAudiosCategorieDo
	Offset(offset int) IEditorAudiosCategorieDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEditorAudiosCategorieDo
	Unscoped() IEditorAudiosCategorieDo
	Create(values ...*table.EditorAudiosCategorie) error
	CreateInBatches(values []*table.EditorAudiosCategorie, batchSize int) error
	Save(values ...*table.EditorAudiosCategorie) error
	First() (*table.EditorAudiosCategorie, error)
	Take() (*table.EditorAudiosCategorie, error)
	Last() (*table.EditorAudiosCategorie, error)
	Find() ([]*table.EditorAudiosCategorie, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.EditorAudiosCategorie, err error)
	FindInBatches(result *[]*table.EditorAudiosCategorie, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.EditorAudiosCategorie) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEditorAudiosCategorieDo
	Assign(attrs ...field.AssignExpr) IEditorAudiosCategorieDo
	Joins(fields ...field.RelationField) IEditorAudiosCategorieDo
	Preload(fields ...field.RelationField) IEditorAudiosCategorieDo
	FirstOrInit() (*table.EditorAudiosCategorie, error)
	FirstOrCreate() (*table.EditorAudiosCategorie, error)
	FindByPage(offset int, limit int) (result []*table.EditorAudiosCategorie, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEditorAudiosCategorieDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e editorAudiosCategorieDo) Debug() IEditorAudiosCategorieDo {
	return e.withDO(e.DO.Debug())
}

func (e editorAudiosCategorieDo) WithContext(ctx context.Context) IEditorAudiosCategorieDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e editorAudiosCategorieDo) ReadDB() IEditorAudiosCategorieDo {
	return e.Clauses(dbresolver.Read)
}

func (e editorAudiosCategorieDo) WriteDB() IEditorAudiosCategorieDo {
	return e.Clauses(dbresolver.Write)
}

func (e editorAudiosCategorieDo) Session(config *gorm.Session) IEditorAudiosCategorieDo {
	return e.withDO(e.DO.Session(config))
}

func (e editorAudiosCategorieDo) Clauses(conds ...clause.Expression) IEditorAudiosCategorieDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e editorAudiosCategorieDo) Returning(value interface{}, columns ...string) IEditorAudiosCategorieDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e editorAudiosCategorieDo) Not(conds ...gen.Condition) IEditorAudiosCategorieDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e editorAudiosCategorieDo) Or(conds ...gen.Condition) IEditorAudiosCategorieDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e editorAudiosCategorieDo) Select(conds ...field.Expr) IEditorAudiosCategorieDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e editorAudiosCategorieDo) Where(conds ...gen.Condition) IEditorAudiosCategorieDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e editorAudiosCategorieDo) Order(conds ...field.Expr) IEditorAudiosCategorieDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e editorAudiosCategorieDo) Distinct(cols ...field.Expr) IEditorAudiosCategorieDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e editorAudiosCategorieDo) Omit(cols ...field.Expr) IEditorAudiosCategorieDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e editorAudiosCategorieDo) Join(table schema.Tabler, on ...field.Expr) IEditorAudiosCategorieDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e editorAudiosCategorieDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEditorAudiosCategorieDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e editorAudiosCategorieDo) RightJoin(table schema.Tabler, on ...field.Expr) IEditorAudiosCategorieDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e editorAudiosCategorieDo) Group(cols ...field.Expr) IEditorAudiosCategorieDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e editorAudiosCategorieDo) Having(conds ...gen.Condition) IEditorAudiosCategorieDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e editorAudiosCategorieDo) Limit(limit int) IEditorAudiosCategorieDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e editorAudiosCategorieDo) Offset(offset int) IEditorAudiosCategorieDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e editorAudiosCategorieDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEditorAudiosCategorieDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e editorAudiosCategorieDo) Unscoped() IEditorAudiosCategorieDo {
	return e.withDO(e.DO.Unscoped())
}

func (e editorAudiosCategorieDo) Create(values ...*table.EditorAudiosCategorie) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e editorAudiosCategorieDo) CreateInBatches(values []*table.EditorAudiosCategorie, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e editorAudiosCategorieDo) Save(values ...*table.EditorAudiosCategorie) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e editorAudiosCategorieDo) First() (*table.EditorAudiosCategorie, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorAudiosCategorie), nil
	}
}

func (e editorAudiosCategorieDo) Take() (*table.EditorAudiosCategorie, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorAudiosCategorie), nil
	}
}

func (e editorAudiosCategorieDo) Last() (*table.EditorAudiosCategorie, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorAudiosCategorie), nil
	}
}

func (e editorAudiosCategorieDo) Find() ([]*table.EditorAudiosCategorie, error) {
	result, err := e.DO.Find()
	return result.([]*table.EditorAudiosCategorie), err
}

func (e editorAudiosCategorieDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.EditorAudiosCategorie, err error) {
	buf := make([]*table.EditorAudiosCategorie, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e editorAudiosCategorieDo) FindInBatches(result *[]*table.EditorAudiosCategorie, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e editorAudiosCategorieDo) Attrs(attrs ...field.AssignExpr) IEditorAudiosCategorieDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e editorAudiosCategorieDo) Assign(attrs ...field.AssignExpr) IEditorAudiosCategorieDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e editorAudiosCategorieDo) Joins(fields ...field.RelationField) IEditorAudiosCategorieDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e editorAudiosCategorieDo) Preload(fields ...field.RelationField) IEditorAudiosCategorieDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e editorAudiosCategorieDo) FirstOrInit() (*table.EditorAudiosCategorie, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorAudiosCategorie), nil
	}
}

func (e editorAudiosCategorieDo) FirstOrCreate() (*table.EditorAudiosCategorie, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorAudiosCategorie), nil
	}
}

func (e editorAudiosCategorieDo) FindByPage(offset int, limit int) (result []*table.EditorAudiosCategorie, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e editorAudiosCategorieDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e editorAudiosCategorieDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e editorAudiosCategorieDo) Delete(models ...*table.EditorAudiosCategorie) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *editorAudiosCategorieDo) withDO(do gen.Dao) *editorAudiosCategorieDo {
	e.DO = *do.(*gen.DO)
	return e
}
