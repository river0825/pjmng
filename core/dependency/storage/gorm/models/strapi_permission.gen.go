// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newStrapiPermission(db *gorm.DB, opts ...gen.DOOption) strapiPermission {
	_strapiPermission := strapiPermission{}

	_strapiPermission.strapiPermissionDo.UseDB(db, opts...)
	_strapiPermission.strapiPermissionDo.UseModel(&table.StrapiPermission{})

	tableName := _strapiPermission.strapiPermissionDo.TableName()
	_strapiPermission.ALL = field.NewAsterisk(tableName)
	_strapiPermission.ID = field.NewInt32(tableName, "id")
	_strapiPermission.Action = field.NewString(tableName, "action")
	_strapiPermission.Subject = field.NewString(tableName, "subject")
	_strapiPermission.Properties = field.NewField(tableName, "properties")
	_strapiPermission.Conditions = field.NewField(tableName, "conditions")
	_strapiPermission.Role = field.NewInt32(tableName, "role")
	_strapiPermission.CreatedAt = field.NewTime(tableName, "created_at")
	_strapiPermission.UpdatedAt = field.NewTime(tableName, "updated_at")

	_strapiPermission.fillFieldMap()

	return _strapiPermission
}

type strapiPermission struct {
	strapiPermissionDo

	ALL        field.Asterisk
	ID         field.Int32
	Action     field.String
	Subject    field.String
	Properties field.Field
	Conditions field.Field
	Role       field.Int32
	CreatedAt  field.Time
	UpdatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (s strapiPermission) Table(newTableName string) *strapiPermission {
	s.strapiPermissionDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s strapiPermission) As(alias string) *strapiPermission {
	s.strapiPermissionDo.DO = *(s.strapiPermissionDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *strapiPermission) updateTableName(table string) *strapiPermission {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Action = field.NewString(table, "action")
	s.Subject = field.NewString(table, "subject")
	s.Properties = field.NewField(table, "properties")
	s.Conditions = field.NewField(table, "conditions")
	s.Role = field.NewInt32(table, "role")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *strapiPermission) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *strapiPermission) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["action"] = s.Action
	s.fieldMap["subject"] = s.Subject
	s.fieldMap["properties"] = s.Properties
	s.fieldMap["conditions"] = s.Conditions
	s.fieldMap["role"] = s.Role
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s strapiPermission) clone(db *gorm.DB) strapiPermission {
	s.strapiPermissionDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s strapiPermission) replaceDB(db *gorm.DB) strapiPermission {
	s.strapiPermissionDo.ReplaceDB(db)
	return s
}

type strapiPermissionDo struct{ gen.DO }

type IStrapiPermissionDo interface {
	gen.SubQuery
	Debug() IStrapiPermissionDo
	WithContext(ctx context.Context) IStrapiPermissionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStrapiPermissionDo
	WriteDB() IStrapiPermissionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStrapiPermissionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStrapiPermissionDo
	Not(conds ...gen.Condition) IStrapiPermissionDo
	Or(conds ...gen.Condition) IStrapiPermissionDo
	Select(conds ...field.Expr) IStrapiPermissionDo
	Where(conds ...gen.Condition) IStrapiPermissionDo
	Order(conds ...field.Expr) IStrapiPermissionDo
	Distinct(cols ...field.Expr) IStrapiPermissionDo
	Omit(cols ...field.Expr) IStrapiPermissionDo
	Join(table schema.Tabler, on ...field.Expr) IStrapiPermissionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStrapiPermissionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStrapiPermissionDo
	Group(cols ...field.Expr) IStrapiPermissionDo
	Having(conds ...gen.Condition) IStrapiPermissionDo
	Limit(limit int) IStrapiPermissionDo
	Offset(offset int) IStrapiPermissionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStrapiPermissionDo
	Unscoped() IStrapiPermissionDo
	Create(values ...*table.StrapiPermission) error
	CreateInBatches(values []*table.StrapiPermission, batchSize int) error
	Save(values ...*table.StrapiPermission) error
	First() (*table.StrapiPermission, error)
	Take() (*table.StrapiPermission, error)
	Last() (*table.StrapiPermission, error)
	Find() ([]*table.StrapiPermission, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.StrapiPermission, err error)
	FindInBatches(result *[]*table.StrapiPermission, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.StrapiPermission) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStrapiPermissionDo
	Assign(attrs ...field.AssignExpr) IStrapiPermissionDo
	Joins(fields ...field.RelationField) IStrapiPermissionDo
	Preload(fields ...field.RelationField) IStrapiPermissionDo
	FirstOrInit() (*table.StrapiPermission, error)
	FirstOrCreate() (*table.StrapiPermission, error)
	FindByPage(offset int, limit int) (result []*table.StrapiPermission, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStrapiPermissionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s strapiPermissionDo) Debug() IStrapiPermissionDo {
	return s.withDO(s.DO.Debug())
}

func (s strapiPermissionDo) WithContext(ctx context.Context) IStrapiPermissionDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s strapiPermissionDo) ReadDB() IStrapiPermissionDo {
	return s.Clauses(dbresolver.Read)
}

func (s strapiPermissionDo) WriteDB() IStrapiPermissionDo {
	return s.Clauses(dbresolver.Write)
}

func (s strapiPermissionDo) Session(config *gorm.Session) IStrapiPermissionDo {
	return s.withDO(s.DO.Session(config))
}

func (s strapiPermissionDo) Clauses(conds ...clause.Expression) IStrapiPermissionDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s strapiPermissionDo) Returning(value interface{}, columns ...string) IStrapiPermissionDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s strapiPermissionDo) Not(conds ...gen.Condition) IStrapiPermissionDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s strapiPermissionDo) Or(conds ...gen.Condition) IStrapiPermissionDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s strapiPermissionDo) Select(conds ...field.Expr) IStrapiPermissionDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s strapiPermissionDo) Where(conds ...gen.Condition) IStrapiPermissionDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s strapiPermissionDo) Order(conds ...field.Expr) IStrapiPermissionDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s strapiPermissionDo) Distinct(cols ...field.Expr) IStrapiPermissionDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s strapiPermissionDo) Omit(cols ...field.Expr) IStrapiPermissionDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s strapiPermissionDo) Join(table schema.Tabler, on ...field.Expr) IStrapiPermissionDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s strapiPermissionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStrapiPermissionDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s strapiPermissionDo) RightJoin(table schema.Tabler, on ...field.Expr) IStrapiPermissionDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s strapiPermissionDo) Group(cols ...field.Expr) IStrapiPermissionDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s strapiPermissionDo) Having(conds ...gen.Condition) IStrapiPermissionDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s strapiPermissionDo) Limit(limit int) IStrapiPermissionDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s strapiPermissionDo) Offset(offset int) IStrapiPermissionDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s strapiPermissionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStrapiPermissionDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s strapiPermissionDo) Unscoped() IStrapiPermissionDo {
	return s.withDO(s.DO.Unscoped())
}

func (s strapiPermissionDo) Create(values ...*table.StrapiPermission) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s strapiPermissionDo) CreateInBatches(values []*table.StrapiPermission, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s strapiPermissionDo) Save(values ...*table.StrapiPermission) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s strapiPermissionDo) First() (*table.StrapiPermission, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.StrapiPermission), nil
	}
}

func (s strapiPermissionDo) Take() (*table.StrapiPermission, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.StrapiPermission), nil
	}
}

func (s strapiPermissionDo) Last() (*table.StrapiPermission, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.StrapiPermission), nil
	}
}

func (s strapiPermissionDo) Find() ([]*table.StrapiPermission, error) {
	result, err := s.DO.Find()
	return result.([]*table.StrapiPermission), err
}

func (s strapiPermissionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.StrapiPermission, err error) {
	buf := make([]*table.StrapiPermission, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s strapiPermissionDo) FindInBatches(result *[]*table.StrapiPermission, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s strapiPermissionDo) Attrs(attrs ...field.AssignExpr) IStrapiPermissionDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s strapiPermissionDo) Assign(attrs ...field.AssignExpr) IStrapiPermissionDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s strapiPermissionDo) Joins(fields ...field.RelationField) IStrapiPermissionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s strapiPermissionDo) Preload(fields ...field.RelationField) IStrapiPermissionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s strapiPermissionDo) FirstOrInit() (*table.StrapiPermission, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.StrapiPermission), nil
	}
}

func (s strapiPermissionDo) FirstOrCreate() (*table.StrapiPermission, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.StrapiPermission), nil
	}
}

func (s strapiPermissionDo) FindByPage(offset int, limit int) (result []*table.StrapiPermission, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s strapiPermissionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s strapiPermissionDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s strapiPermissionDo) Delete(models ...*table.StrapiPermission) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *strapiPermissionDo) withDO(do gen.Dao) *strapiPermissionDo {
	s.DO = *do.(*gen.DO)
	return s
}
