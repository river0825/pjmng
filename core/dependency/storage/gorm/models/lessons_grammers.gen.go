// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newLessonsGrammer(db *gorm.DB, opts ...gen.DOOption) lessonsGrammer {
	_lessonsGrammer := lessonsGrammer{}

	_lessonsGrammer.lessonsGrammerDo.UseDB(db, opts...)
	_lessonsGrammer.lessonsGrammerDo.UseModel(&table.LessonsGrammer{})

	tableName := _lessonsGrammer.lessonsGrammerDo.TableName()
	_lessonsGrammer.ALL = field.NewAsterisk(tableName)
	_lessonsGrammer.ID = field.NewInt32(tableName, "id")
	_lessonsGrammer.LessonID = field.NewInt32(tableName, "lesson_id")
	_lessonsGrammer.GrammerID = field.NewInt32(tableName, "grammer_id")

	_lessonsGrammer.fillFieldMap()

	return _lessonsGrammer
}

type lessonsGrammer struct {
	lessonsGrammerDo

	ALL       field.Asterisk
	ID        field.Int32
	LessonID  field.Int32
	GrammerID field.Int32

	fieldMap map[string]field.Expr
}

func (l lessonsGrammer) Table(newTableName string) *lessonsGrammer {
	l.lessonsGrammerDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lessonsGrammer) As(alias string) *lessonsGrammer {
	l.lessonsGrammerDo.DO = *(l.lessonsGrammerDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lessonsGrammer) updateTableName(table string) *lessonsGrammer {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt32(table, "id")
	l.LessonID = field.NewInt32(table, "lesson_id")
	l.GrammerID = field.NewInt32(table, "grammer_id")

	l.fillFieldMap()

	return l
}

func (l *lessonsGrammer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lessonsGrammer) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 3)
	l.fieldMap["id"] = l.ID
	l.fieldMap["lesson_id"] = l.LessonID
	l.fieldMap["grammer_id"] = l.GrammerID
}

func (l lessonsGrammer) clone(db *gorm.DB) lessonsGrammer {
	l.lessonsGrammerDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lessonsGrammer) replaceDB(db *gorm.DB) lessonsGrammer {
	l.lessonsGrammerDo.ReplaceDB(db)
	return l
}

type lessonsGrammerDo struct{ gen.DO }

type ILessonsGrammerDo interface {
	gen.SubQuery
	Debug() ILessonsGrammerDo
	WithContext(ctx context.Context) ILessonsGrammerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILessonsGrammerDo
	WriteDB() ILessonsGrammerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILessonsGrammerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILessonsGrammerDo
	Not(conds ...gen.Condition) ILessonsGrammerDo
	Or(conds ...gen.Condition) ILessonsGrammerDo
	Select(conds ...field.Expr) ILessonsGrammerDo
	Where(conds ...gen.Condition) ILessonsGrammerDo
	Order(conds ...field.Expr) ILessonsGrammerDo
	Distinct(cols ...field.Expr) ILessonsGrammerDo
	Omit(cols ...field.Expr) ILessonsGrammerDo
	Join(table schema.Tabler, on ...field.Expr) ILessonsGrammerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILessonsGrammerDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILessonsGrammerDo
	Group(cols ...field.Expr) ILessonsGrammerDo
	Having(conds ...gen.Condition) ILessonsGrammerDo
	Limit(limit int) ILessonsGrammerDo
	Offset(offset int) ILessonsGrammerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILessonsGrammerDo
	Unscoped() ILessonsGrammerDo
	Create(values ...*table.LessonsGrammer) error
	CreateInBatches(values []*table.LessonsGrammer, batchSize int) error
	Save(values ...*table.LessonsGrammer) error
	First() (*table.LessonsGrammer, error)
	Take() (*table.LessonsGrammer, error)
	Last() (*table.LessonsGrammer, error)
	Find() ([]*table.LessonsGrammer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.LessonsGrammer, err error)
	FindInBatches(result *[]*table.LessonsGrammer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.LessonsGrammer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILessonsGrammerDo
	Assign(attrs ...field.AssignExpr) ILessonsGrammerDo
	Joins(fields ...field.RelationField) ILessonsGrammerDo
	Preload(fields ...field.RelationField) ILessonsGrammerDo
	FirstOrInit() (*table.LessonsGrammer, error)
	FirstOrCreate() (*table.LessonsGrammer, error)
	FindByPage(offset int, limit int) (result []*table.LessonsGrammer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILessonsGrammerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lessonsGrammerDo) Debug() ILessonsGrammerDo {
	return l.withDO(l.DO.Debug())
}

func (l lessonsGrammerDo) WithContext(ctx context.Context) ILessonsGrammerDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lessonsGrammerDo) ReadDB() ILessonsGrammerDo {
	return l.Clauses(dbresolver.Read)
}

func (l lessonsGrammerDo) WriteDB() ILessonsGrammerDo {
	return l.Clauses(dbresolver.Write)
}

func (l lessonsGrammerDo) Session(config *gorm.Session) ILessonsGrammerDo {
	return l.withDO(l.DO.Session(config))
}

func (l lessonsGrammerDo) Clauses(conds ...clause.Expression) ILessonsGrammerDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lessonsGrammerDo) Returning(value interface{}, columns ...string) ILessonsGrammerDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lessonsGrammerDo) Not(conds ...gen.Condition) ILessonsGrammerDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lessonsGrammerDo) Or(conds ...gen.Condition) ILessonsGrammerDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lessonsGrammerDo) Select(conds ...field.Expr) ILessonsGrammerDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lessonsGrammerDo) Where(conds ...gen.Condition) ILessonsGrammerDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lessonsGrammerDo) Order(conds ...field.Expr) ILessonsGrammerDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lessonsGrammerDo) Distinct(cols ...field.Expr) ILessonsGrammerDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lessonsGrammerDo) Omit(cols ...field.Expr) ILessonsGrammerDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lessonsGrammerDo) Join(table schema.Tabler, on ...field.Expr) ILessonsGrammerDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lessonsGrammerDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILessonsGrammerDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lessonsGrammerDo) RightJoin(table schema.Tabler, on ...field.Expr) ILessonsGrammerDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lessonsGrammerDo) Group(cols ...field.Expr) ILessonsGrammerDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lessonsGrammerDo) Having(conds ...gen.Condition) ILessonsGrammerDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lessonsGrammerDo) Limit(limit int) ILessonsGrammerDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lessonsGrammerDo) Offset(offset int) ILessonsGrammerDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lessonsGrammerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILessonsGrammerDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lessonsGrammerDo) Unscoped() ILessonsGrammerDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lessonsGrammerDo) Create(values ...*table.LessonsGrammer) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lessonsGrammerDo) CreateInBatches(values []*table.LessonsGrammer, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lessonsGrammerDo) Save(values ...*table.LessonsGrammer) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lessonsGrammerDo) First() (*table.LessonsGrammer, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.LessonsGrammer), nil
	}
}

func (l lessonsGrammerDo) Take() (*table.LessonsGrammer, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.LessonsGrammer), nil
	}
}

func (l lessonsGrammerDo) Last() (*table.LessonsGrammer, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.LessonsGrammer), nil
	}
}

func (l lessonsGrammerDo) Find() ([]*table.LessonsGrammer, error) {
	result, err := l.DO.Find()
	return result.([]*table.LessonsGrammer), err
}

func (l lessonsGrammerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.LessonsGrammer, err error) {
	buf := make([]*table.LessonsGrammer, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lessonsGrammerDo) FindInBatches(result *[]*table.LessonsGrammer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lessonsGrammerDo) Attrs(attrs ...field.AssignExpr) ILessonsGrammerDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lessonsGrammerDo) Assign(attrs ...field.AssignExpr) ILessonsGrammerDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lessonsGrammerDo) Joins(fields ...field.RelationField) ILessonsGrammerDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lessonsGrammerDo) Preload(fields ...field.RelationField) ILessonsGrammerDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lessonsGrammerDo) FirstOrInit() (*table.LessonsGrammer, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.LessonsGrammer), nil
	}
}

func (l lessonsGrammerDo) FirstOrCreate() (*table.LessonsGrammer, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.LessonsGrammer), nil
	}
}

func (l lessonsGrammerDo) FindByPage(offset int, limit int) (result []*table.LessonsGrammer, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lessonsGrammerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lessonsGrammerDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lessonsGrammerDo) Delete(models ...*table.LessonsGrammer) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lessonsGrammerDo) withDO(do gen.Dao) *lessonsGrammerDo {
	l.DO = *do.(*gen.DO)
	return l
}
