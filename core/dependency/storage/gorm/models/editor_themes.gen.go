// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newEditorTheme(db *gorm.DB, opts ...gen.DOOption) editorTheme {
	_editorTheme := editorTheme{}

	_editorTheme.editorThemeDo.UseDB(db, opts...)
	_editorTheme.editorThemeDo.UseModel(&table.EditorTheme{})

	tableName := _editorTheme.editorThemeDo.TableName()
	_editorTheme.ALL = field.NewAsterisk(tableName)
	_editorTheme.ID = field.NewInt32(tableName, "id")
	_editorTheme.Name = field.NewString(tableName, "name")
	_editorTheme.Tag = field.NewString(tableName, "tag")
	_editorTheme.Content = field.NewField(tableName, "content")
	_editorTheme.PublishedAt = field.NewTime(tableName, "published_at")
	_editorTheme.CreatedBy = field.NewInt32(tableName, "created_by")
	_editorTheme.UpdatedBy = field.NewInt32(tableName, "updated_by")
	_editorTheme.CreatedAt = field.NewTime(tableName, "created_at")
	_editorTheme.UpdatedAt = field.NewTime(tableName, "updated_at")
	_editorTheme.Organization = field.NewInt32(tableName, "organization")

	_editorTheme.fillFieldMap()

	return _editorTheme
}

type editorTheme struct {
	editorThemeDo

	ALL          field.Asterisk
	ID           field.Int32
	Name         field.String
	Tag          field.String
	Content      field.Field
	PublishedAt  field.Time
	CreatedBy    field.Int32
	UpdatedBy    field.Int32
	CreatedAt    field.Time
	UpdatedAt    field.Time
	Organization field.Int32

	fieldMap map[string]field.Expr
}

func (e editorTheme) Table(newTableName string) *editorTheme {
	e.editorThemeDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e editorTheme) As(alias string) *editorTheme {
	e.editorThemeDo.DO = *(e.editorThemeDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *editorTheme) updateTableName(table string) *editorTheme {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Name = field.NewString(table, "name")
	e.Tag = field.NewString(table, "tag")
	e.Content = field.NewField(table, "content")
	e.PublishedAt = field.NewTime(table, "published_at")
	e.CreatedBy = field.NewInt32(table, "created_by")
	e.UpdatedBy = field.NewInt32(table, "updated_by")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.Organization = field.NewInt32(table, "organization")

	e.fillFieldMap()

	return e
}

func (e *editorTheme) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *editorTheme) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 10)
	e.fieldMap["id"] = e.ID
	e.fieldMap["name"] = e.Name
	e.fieldMap["tag"] = e.Tag
	e.fieldMap["content"] = e.Content
	e.fieldMap["published_at"] = e.PublishedAt
	e.fieldMap["created_by"] = e.CreatedBy
	e.fieldMap["updated_by"] = e.UpdatedBy
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["organization"] = e.Organization
}

func (e editorTheme) clone(db *gorm.DB) editorTheme {
	e.editorThemeDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e editorTheme) replaceDB(db *gorm.DB) editorTheme {
	e.editorThemeDo.ReplaceDB(db)
	return e
}

type editorThemeDo struct{ gen.DO }

type IEditorThemeDo interface {
	gen.SubQuery
	Debug() IEditorThemeDo
	WithContext(ctx context.Context) IEditorThemeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEditorThemeDo
	WriteDB() IEditorThemeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEditorThemeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEditorThemeDo
	Not(conds ...gen.Condition) IEditorThemeDo
	Or(conds ...gen.Condition) IEditorThemeDo
	Select(conds ...field.Expr) IEditorThemeDo
	Where(conds ...gen.Condition) IEditorThemeDo
	Order(conds ...field.Expr) IEditorThemeDo
	Distinct(cols ...field.Expr) IEditorThemeDo
	Omit(cols ...field.Expr) IEditorThemeDo
	Join(table schema.Tabler, on ...field.Expr) IEditorThemeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEditorThemeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEditorThemeDo
	Group(cols ...field.Expr) IEditorThemeDo
	Having(conds ...gen.Condition) IEditorThemeDo
	Limit(limit int) IEditorThemeDo
	Offset(offset int) IEditorThemeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEditorThemeDo
	Unscoped() IEditorThemeDo
	Create(values ...*table.EditorTheme) error
	CreateInBatches(values []*table.EditorTheme, batchSize int) error
	Save(values ...*table.EditorTheme) error
	First() (*table.EditorTheme, error)
	Take() (*table.EditorTheme, error)
	Last() (*table.EditorTheme, error)
	Find() ([]*table.EditorTheme, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.EditorTheme, err error)
	FindInBatches(result *[]*table.EditorTheme, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.EditorTheme) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEditorThemeDo
	Assign(attrs ...field.AssignExpr) IEditorThemeDo
	Joins(fields ...field.RelationField) IEditorThemeDo
	Preload(fields ...field.RelationField) IEditorThemeDo
	FirstOrInit() (*table.EditorTheme, error)
	FirstOrCreate() (*table.EditorTheme, error)
	FindByPage(offset int, limit int) (result []*table.EditorTheme, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEditorThemeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e editorThemeDo) Debug() IEditorThemeDo {
	return e.withDO(e.DO.Debug())
}

func (e editorThemeDo) WithContext(ctx context.Context) IEditorThemeDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e editorThemeDo) ReadDB() IEditorThemeDo {
	return e.Clauses(dbresolver.Read)
}

func (e editorThemeDo) WriteDB() IEditorThemeDo {
	return e.Clauses(dbresolver.Write)
}

func (e editorThemeDo) Session(config *gorm.Session) IEditorThemeDo {
	return e.withDO(e.DO.Session(config))
}

func (e editorThemeDo) Clauses(conds ...clause.Expression) IEditorThemeDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e editorThemeDo) Returning(value interface{}, columns ...string) IEditorThemeDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e editorThemeDo) Not(conds ...gen.Condition) IEditorThemeDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e editorThemeDo) Or(conds ...gen.Condition) IEditorThemeDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e editorThemeDo) Select(conds ...field.Expr) IEditorThemeDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e editorThemeDo) Where(conds ...gen.Condition) IEditorThemeDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e editorThemeDo) Order(conds ...field.Expr) IEditorThemeDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e editorThemeDo) Distinct(cols ...field.Expr) IEditorThemeDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e editorThemeDo) Omit(cols ...field.Expr) IEditorThemeDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e editorThemeDo) Join(table schema.Tabler, on ...field.Expr) IEditorThemeDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e editorThemeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEditorThemeDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e editorThemeDo) RightJoin(table schema.Tabler, on ...field.Expr) IEditorThemeDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e editorThemeDo) Group(cols ...field.Expr) IEditorThemeDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e editorThemeDo) Having(conds ...gen.Condition) IEditorThemeDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e editorThemeDo) Limit(limit int) IEditorThemeDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e editorThemeDo) Offset(offset int) IEditorThemeDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e editorThemeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEditorThemeDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e editorThemeDo) Unscoped() IEditorThemeDo {
	return e.withDO(e.DO.Unscoped())
}

func (e editorThemeDo) Create(values ...*table.EditorTheme) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e editorThemeDo) CreateInBatches(values []*table.EditorTheme, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e editorThemeDo) Save(values ...*table.EditorTheme) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e editorThemeDo) First() (*table.EditorTheme, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorTheme), nil
	}
}

func (e editorThemeDo) Take() (*table.EditorTheme, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorTheme), nil
	}
}

func (e editorThemeDo) Last() (*table.EditorTheme, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorTheme), nil
	}
}

func (e editorThemeDo) Find() ([]*table.EditorTheme, error) {
	result, err := e.DO.Find()
	return result.([]*table.EditorTheme), err
}

func (e editorThemeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.EditorTheme, err error) {
	buf := make([]*table.EditorTheme, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e editorThemeDo) FindInBatches(result *[]*table.EditorTheme, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e editorThemeDo) Attrs(attrs ...field.AssignExpr) IEditorThemeDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e editorThemeDo) Assign(attrs ...field.AssignExpr) IEditorThemeDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e editorThemeDo) Joins(fields ...field.RelationField) IEditorThemeDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e editorThemeDo) Preload(fields ...field.RelationField) IEditorThemeDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e editorThemeDo) FirstOrInit() (*table.EditorTheme, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorTheme), nil
	}
}

func (e editorThemeDo) FirstOrCreate() (*table.EditorTheme, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorTheme), nil
	}
}

func (e editorThemeDo) FindByPage(offset int, limit int) (result []*table.EditorTheme, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e editorThemeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e editorThemeDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e editorThemeDo) Delete(models ...*table.EditorTheme) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *editorThemeDo) withDO(do gen.Dao) *editorThemeDo {
	e.DO = *do.(*gen.DO)
	return e
}
