// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newShopifyEvent(db *gorm.DB, opts ...gen.DOOption) shopifyEvent {
	_shopifyEvent := shopifyEvent{}

	_shopifyEvent.shopifyEventDo.UseDB(db, opts...)
	_shopifyEvent.shopifyEventDo.UseModel(&table.ShopifyEvent{})

	tableName := _shopifyEvent.shopifyEventDo.TableName()
	_shopifyEvent.ALL = field.NewAsterisk(tableName)
	_shopifyEvent.ID = field.NewInt32(tableName, "id")
	_shopifyEvent.EventID = field.NewString(tableName, "event_id")
	_shopifyEvent.Status = field.NewString(tableName, "status")
	_shopifyEvent.EventBody = field.NewField(tableName, "event_body")
	_shopifyEvent.CreatedBy = field.NewInt32(tableName, "created_by")
	_shopifyEvent.UpdatedBy = field.NewInt32(tableName, "updated_by")
	_shopifyEvent.CreatedAt = field.NewTime(tableName, "created_at")
	_shopifyEvent.UpdatedAt = field.NewTime(tableName, "updated_at")

	_shopifyEvent.fillFieldMap()

	return _shopifyEvent
}

type shopifyEvent struct {
	shopifyEventDo

	ALL       field.Asterisk
	ID        field.Int32
	EventID   field.String
	Status    field.String
	EventBody field.Field
	CreatedBy field.Int32
	UpdatedBy field.Int32
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (s shopifyEvent) Table(newTableName string) *shopifyEvent {
	s.shopifyEventDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s shopifyEvent) As(alias string) *shopifyEvent {
	s.shopifyEventDo.DO = *(s.shopifyEventDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *shopifyEvent) updateTableName(table string) *shopifyEvent {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.EventID = field.NewString(table, "event_id")
	s.Status = field.NewString(table, "status")
	s.EventBody = field.NewField(table, "event_body")
	s.CreatedBy = field.NewInt32(table, "created_by")
	s.UpdatedBy = field.NewInt32(table, "updated_by")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *shopifyEvent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *shopifyEvent) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["event_id"] = s.EventID
	s.fieldMap["status"] = s.Status
	s.fieldMap["event_body"] = s.EventBody
	s.fieldMap["created_by"] = s.CreatedBy
	s.fieldMap["updated_by"] = s.UpdatedBy
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s shopifyEvent) clone(db *gorm.DB) shopifyEvent {
	s.shopifyEventDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s shopifyEvent) replaceDB(db *gorm.DB) shopifyEvent {
	s.shopifyEventDo.ReplaceDB(db)
	return s
}

type shopifyEventDo struct{ gen.DO }

type IShopifyEventDo interface {
	gen.SubQuery
	Debug() IShopifyEventDo
	WithContext(ctx context.Context) IShopifyEventDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IShopifyEventDo
	WriteDB() IShopifyEventDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IShopifyEventDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IShopifyEventDo
	Not(conds ...gen.Condition) IShopifyEventDo
	Or(conds ...gen.Condition) IShopifyEventDo
	Select(conds ...field.Expr) IShopifyEventDo
	Where(conds ...gen.Condition) IShopifyEventDo
	Order(conds ...field.Expr) IShopifyEventDo
	Distinct(cols ...field.Expr) IShopifyEventDo
	Omit(cols ...field.Expr) IShopifyEventDo
	Join(table schema.Tabler, on ...field.Expr) IShopifyEventDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IShopifyEventDo
	RightJoin(table schema.Tabler, on ...field.Expr) IShopifyEventDo
	Group(cols ...field.Expr) IShopifyEventDo
	Having(conds ...gen.Condition) IShopifyEventDo
	Limit(limit int) IShopifyEventDo
	Offset(offset int) IShopifyEventDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IShopifyEventDo
	Unscoped() IShopifyEventDo
	Create(values ...*table.ShopifyEvent) error
	CreateInBatches(values []*table.ShopifyEvent, batchSize int) error
	Save(values ...*table.ShopifyEvent) error
	First() (*table.ShopifyEvent, error)
	Take() (*table.ShopifyEvent, error)
	Last() (*table.ShopifyEvent, error)
	Find() ([]*table.ShopifyEvent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.ShopifyEvent, err error)
	FindInBatches(result *[]*table.ShopifyEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.ShopifyEvent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IShopifyEventDo
	Assign(attrs ...field.AssignExpr) IShopifyEventDo
	Joins(fields ...field.RelationField) IShopifyEventDo
	Preload(fields ...field.RelationField) IShopifyEventDo
	FirstOrInit() (*table.ShopifyEvent, error)
	FirstOrCreate() (*table.ShopifyEvent, error)
	FindByPage(offset int, limit int) (result []*table.ShopifyEvent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IShopifyEventDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s shopifyEventDo) Debug() IShopifyEventDo {
	return s.withDO(s.DO.Debug())
}

func (s shopifyEventDo) WithContext(ctx context.Context) IShopifyEventDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s shopifyEventDo) ReadDB() IShopifyEventDo {
	return s.Clauses(dbresolver.Read)
}

func (s shopifyEventDo) WriteDB() IShopifyEventDo {
	return s.Clauses(dbresolver.Write)
}

func (s shopifyEventDo) Session(config *gorm.Session) IShopifyEventDo {
	return s.withDO(s.DO.Session(config))
}

func (s shopifyEventDo) Clauses(conds ...clause.Expression) IShopifyEventDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s shopifyEventDo) Returning(value interface{}, columns ...string) IShopifyEventDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s shopifyEventDo) Not(conds ...gen.Condition) IShopifyEventDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s shopifyEventDo) Or(conds ...gen.Condition) IShopifyEventDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s shopifyEventDo) Select(conds ...field.Expr) IShopifyEventDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s shopifyEventDo) Where(conds ...gen.Condition) IShopifyEventDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s shopifyEventDo) Order(conds ...field.Expr) IShopifyEventDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s shopifyEventDo) Distinct(cols ...field.Expr) IShopifyEventDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s shopifyEventDo) Omit(cols ...field.Expr) IShopifyEventDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s shopifyEventDo) Join(table schema.Tabler, on ...field.Expr) IShopifyEventDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s shopifyEventDo) LeftJoin(table schema.Tabler, on ...field.Expr) IShopifyEventDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s shopifyEventDo) RightJoin(table schema.Tabler, on ...field.Expr) IShopifyEventDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s shopifyEventDo) Group(cols ...field.Expr) IShopifyEventDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s shopifyEventDo) Having(conds ...gen.Condition) IShopifyEventDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s shopifyEventDo) Limit(limit int) IShopifyEventDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s shopifyEventDo) Offset(offset int) IShopifyEventDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s shopifyEventDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IShopifyEventDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s shopifyEventDo) Unscoped() IShopifyEventDo {
	return s.withDO(s.DO.Unscoped())
}

func (s shopifyEventDo) Create(values ...*table.ShopifyEvent) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s shopifyEventDo) CreateInBatches(values []*table.ShopifyEvent, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s shopifyEventDo) Save(values ...*table.ShopifyEvent) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s shopifyEventDo) First() (*table.ShopifyEvent, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.ShopifyEvent), nil
	}
}

func (s shopifyEventDo) Take() (*table.ShopifyEvent, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.ShopifyEvent), nil
	}
}

func (s shopifyEventDo) Last() (*table.ShopifyEvent, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.ShopifyEvent), nil
	}
}

func (s shopifyEventDo) Find() ([]*table.ShopifyEvent, error) {
	result, err := s.DO.Find()
	return result.([]*table.ShopifyEvent), err
}

func (s shopifyEventDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.ShopifyEvent, err error) {
	buf := make([]*table.ShopifyEvent, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s shopifyEventDo) FindInBatches(result *[]*table.ShopifyEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s shopifyEventDo) Attrs(attrs ...field.AssignExpr) IShopifyEventDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s shopifyEventDo) Assign(attrs ...field.AssignExpr) IShopifyEventDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s shopifyEventDo) Joins(fields ...field.RelationField) IShopifyEventDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s shopifyEventDo) Preload(fields ...field.RelationField) IShopifyEventDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s shopifyEventDo) FirstOrInit() (*table.ShopifyEvent, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.ShopifyEvent), nil
	}
}

func (s shopifyEventDo) FirstOrCreate() (*table.ShopifyEvent, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.ShopifyEvent), nil
	}
}

func (s shopifyEventDo) FindByPage(offset int, limit int) (result []*table.ShopifyEvent, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s shopifyEventDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s shopifyEventDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s shopifyEventDo) Delete(models ...*table.ShopifyEvent) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *shopifyEventDo) withDO(do gen.Dao) *shopifyEventDo {
	s.DO = *do.(*gen.DO)
	return s
}
