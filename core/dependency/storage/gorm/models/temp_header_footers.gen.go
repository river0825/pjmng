// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newTempHeaderFooter(db *gorm.DB, opts ...gen.DOOption) tempHeaderFooter {
	_tempHeaderFooter := tempHeaderFooter{}

	_tempHeaderFooter.tempHeaderFooterDo.UseDB(db, opts...)
	_tempHeaderFooter.tempHeaderFooterDo.UseModel(&table.TempHeaderFooter{})

	tableName := _tempHeaderFooter.tempHeaderFooterDo.TableName()
	_tempHeaderFooter.ALL = field.NewAsterisk(tableName)
	_tempHeaderFooter.ID = field.NewInt32(tableName, "id")
	_tempHeaderFooter.PublishedAt = field.NewTime(tableName, "published_at")
	_tempHeaderFooter.CreatedBy = field.NewInt32(tableName, "created_by")
	_tempHeaderFooter.UpdatedBy = field.NewInt32(tableName, "updated_by")
	_tempHeaderFooter.CreatedAt = field.NewTime(tableName, "created_at")
	_tempHeaderFooter.UpdatedAt = field.NewTime(tableName, "updated_at")

	_tempHeaderFooter.fillFieldMap()

	return _tempHeaderFooter
}

type tempHeaderFooter struct {
	tempHeaderFooterDo

	ALL         field.Asterisk
	ID          field.Int32
	PublishedAt field.Time
	CreatedBy   field.Int32
	UpdatedBy   field.Int32
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (t tempHeaderFooter) Table(newTableName string) *tempHeaderFooter {
	t.tempHeaderFooterDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tempHeaderFooter) As(alias string) *tempHeaderFooter {
	t.tempHeaderFooterDo.DO = *(t.tempHeaderFooterDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tempHeaderFooter) updateTableName(table string) *tempHeaderFooter {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.PublishedAt = field.NewTime(table, "published_at")
	t.CreatedBy = field.NewInt32(table, "created_by")
	t.UpdatedBy = field.NewInt32(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *tempHeaderFooter) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tempHeaderFooter) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.ID
	t.fieldMap["published_at"] = t.PublishedAt
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t tempHeaderFooter) clone(db *gorm.DB) tempHeaderFooter {
	t.tempHeaderFooterDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tempHeaderFooter) replaceDB(db *gorm.DB) tempHeaderFooter {
	t.tempHeaderFooterDo.ReplaceDB(db)
	return t
}

type tempHeaderFooterDo struct{ gen.DO }

type ITempHeaderFooterDo interface {
	gen.SubQuery
	Debug() ITempHeaderFooterDo
	WithContext(ctx context.Context) ITempHeaderFooterDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITempHeaderFooterDo
	WriteDB() ITempHeaderFooterDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITempHeaderFooterDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITempHeaderFooterDo
	Not(conds ...gen.Condition) ITempHeaderFooterDo
	Or(conds ...gen.Condition) ITempHeaderFooterDo
	Select(conds ...field.Expr) ITempHeaderFooterDo
	Where(conds ...gen.Condition) ITempHeaderFooterDo
	Order(conds ...field.Expr) ITempHeaderFooterDo
	Distinct(cols ...field.Expr) ITempHeaderFooterDo
	Omit(cols ...field.Expr) ITempHeaderFooterDo
	Join(table schema.Tabler, on ...field.Expr) ITempHeaderFooterDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITempHeaderFooterDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITempHeaderFooterDo
	Group(cols ...field.Expr) ITempHeaderFooterDo
	Having(conds ...gen.Condition) ITempHeaderFooterDo
	Limit(limit int) ITempHeaderFooterDo
	Offset(offset int) ITempHeaderFooterDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITempHeaderFooterDo
	Unscoped() ITempHeaderFooterDo
	Create(values ...*table.TempHeaderFooter) error
	CreateInBatches(values []*table.TempHeaderFooter, batchSize int) error
	Save(values ...*table.TempHeaderFooter) error
	First() (*table.TempHeaderFooter, error)
	Take() (*table.TempHeaderFooter, error)
	Last() (*table.TempHeaderFooter, error)
	Find() ([]*table.TempHeaderFooter, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.TempHeaderFooter, err error)
	FindInBatches(result *[]*table.TempHeaderFooter, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.TempHeaderFooter) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITempHeaderFooterDo
	Assign(attrs ...field.AssignExpr) ITempHeaderFooterDo
	Joins(fields ...field.RelationField) ITempHeaderFooterDo
	Preload(fields ...field.RelationField) ITempHeaderFooterDo
	FirstOrInit() (*table.TempHeaderFooter, error)
	FirstOrCreate() (*table.TempHeaderFooter, error)
	FindByPage(offset int, limit int) (result []*table.TempHeaderFooter, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITempHeaderFooterDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tempHeaderFooterDo) Debug() ITempHeaderFooterDo {
	return t.withDO(t.DO.Debug())
}

func (t tempHeaderFooterDo) WithContext(ctx context.Context) ITempHeaderFooterDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tempHeaderFooterDo) ReadDB() ITempHeaderFooterDo {
	return t.Clauses(dbresolver.Read)
}

func (t tempHeaderFooterDo) WriteDB() ITempHeaderFooterDo {
	return t.Clauses(dbresolver.Write)
}

func (t tempHeaderFooterDo) Session(config *gorm.Session) ITempHeaderFooterDo {
	return t.withDO(t.DO.Session(config))
}

func (t tempHeaderFooterDo) Clauses(conds ...clause.Expression) ITempHeaderFooterDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tempHeaderFooterDo) Returning(value interface{}, columns ...string) ITempHeaderFooterDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tempHeaderFooterDo) Not(conds ...gen.Condition) ITempHeaderFooterDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tempHeaderFooterDo) Or(conds ...gen.Condition) ITempHeaderFooterDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tempHeaderFooterDo) Select(conds ...field.Expr) ITempHeaderFooterDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tempHeaderFooterDo) Where(conds ...gen.Condition) ITempHeaderFooterDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tempHeaderFooterDo) Order(conds ...field.Expr) ITempHeaderFooterDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tempHeaderFooterDo) Distinct(cols ...field.Expr) ITempHeaderFooterDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tempHeaderFooterDo) Omit(cols ...field.Expr) ITempHeaderFooterDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tempHeaderFooterDo) Join(table schema.Tabler, on ...field.Expr) ITempHeaderFooterDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tempHeaderFooterDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITempHeaderFooterDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tempHeaderFooterDo) RightJoin(table schema.Tabler, on ...field.Expr) ITempHeaderFooterDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tempHeaderFooterDo) Group(cols ...field.Expr) ITempHeaderFooterDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tempHeaderFooterDo) Having(conds ...gen.Condition) ITempHeaderFooterDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tempHeaderFooterDo) Limit(limit int) ITempHeaderFooterDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tempHeaderFooterDo) Offset(offset int) ITempHeaderFooterDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tempHeaderFooterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITempHeaderFooterDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tempHeaderFooterDo) Unscoped() ITempHeaderFooterDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tempHeaderFooterDo) Create(values ...*table.TempHeaderFooter) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tempHeaderFooterDo) CreateInBatches(values []*table.TempHeaderFooter, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tempHeaderFooterDo) Save(values ...*table.TempHeaderFooter) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tempHeaderFooterDo) First() (*table.TempHeaderFooter, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.TempHeaderFooter), nil
	}
}

func (t tempHeaderFooterDo) Take() (*table.TempHeaderFooter, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.TempHeaderFooter), nil
	}
}

func (t tempHeaderFooterDo) Last() (*table.TempHeaderFooter, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.TempHeaderFooter), nil
	}
}

func (t tempHeaderFooterDo) Find() ([]*table.TempHeaderFooter, error) {
	result, err := t.DO.Find()
	return result.([]*table.TempHeaderFooter), err
}

func (t tempHeaderFooterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.TempHeaderFooter, err error) {
	buf := make([]*table.TempHeaderFooter, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tempHeaderFooterDo) FindInBatches(result *[]*table.TempHeaderFooter, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tempHeaderFooterDo) Attrs(attrs ...field.AssignExpr) ITempHeaderFooterDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tempHeaderFooterDo) Assign(attrs ...field.AssignExpr) ITempHeaderFooterDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tempHeaderFooterDo) Joins(fields ...field.RelationField) ITempHeaderFooterDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tempHeaderFooterDo) Preload(fields ...field.RelationField) ITempHeaderFooterDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tempHeaderFooterDo) FirstOrInit() (*table.TempHeaderFooter, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.TempHeaderFooter), nil
	}
}

func (t tempHeaderFooterDo) FirstOrCreate() (*table.TempHeaderFooter, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.TempHeaderFooter), nil
	}
}

func (t tempHeaderFooterDo) FindByPage(offset int, limit int) (result []*table.TempHeaderFooter, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tempHeaderFooterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tempHeaderFooterDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tempHeaderFooterDo) Delete(models ...*table.TempHeaderFooter) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tempHeaderFooterDo) withDO(do gen.Dao) *tempHeaderFooterDo {
	t.DO = *do.(*gen.DO)
	return t
}
