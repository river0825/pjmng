// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newEditorImagesCategorie(db *gorm.DB, opts ...gen.DOOption) editorImagesCategorie {
	_editorImagesCategorie := editorImagesCategorie{}

	_editorImagesCategorie.editorImagesCategorieDo.UseDB(db, opts...)
	_editorImagesCategorie.editorImagesCategorieDo.UseModel(&table.EditorImagesCategorie{})

	tableName := _editorImagesCategorie.editorImagesCategorieDo.TableName()
	_editorImagesCategorie.ALL = field.NewAsterisk(tableName)
	_editorImagesCategorie.ID = field.NewInt32(tableName, "id")
	_editorImagesCategorie.EditorImageID = field.NewInt32(tableName, "editor_image_id")
	_editorImagesCategorie.EditorCategoryImageID = field.NewInt32(tableName, "editor-category-image_id")

	_editorImagesCategorie.fillFieldMap()

	return _editorImagesCategorie
}

type editorImagesCategorie struct {
	editorImagesCategorieDo

	ALL                   field.Asterisk
	ID                    field.Int32
	EditorImageID         field.Int32
	EditorCategoryImageID field.Int32

	fieldMap map[string]field.Expr
}

func (e editorImagesCategorie) Table(newTableName string) *editorImagesCategorie {
	e.editorImagesCategorieDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e editorImagesCategorie) As(alias string) *editorImagesCategorie {
	e.editorImagesCategorieDo.DO = *(e.editorImagesCategorieDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *editorImagesCategorie) updateTableName(table string) *editorImagesCategorie {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.EditorImageID = field.NewInt32(table, "editor_image_id")
	e.EditorCategoryImageID = field.NewInt32(table, "editor-category-image_id")

	e.fillFieldMap()

	return e
}

func (e *editorImagesCategorie) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *editorImagesCategorie) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 3)
	e.fieldMap["id"] = e.ID
	e.fieldMap["editor_image_id"] = e.EditorImageID
	e.fieldMap["editor-category-image_id"] = e.EditorCategoryImageID
}

func (e editorImagesCategorie) clone(db *gorm.DB) editorImagesCategorie {
	e.editorImagesCategorieDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e editorImagesCategorie) replaceDB(db *gorm.DB) editorImagesCategorie {
	e.editorImagesCategorieDo.ReplaceDB(db)
	return e
}

type editorImagesCategorieDo struct{ gen.DO }

type IEditorImagesCategorieDo interface {
	gen.SubQuery
	Debug() IEditorImagesCategorieDo
	WithContext(ctx context.Context) IEditorImagesCategorieDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEditorImagesCategorieDo
	WriteDB() IEditorImagesCategorieDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEditorImagesCategorieDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEditorImagesCategorieDo
	Not(conds ...gen.Condition) IEditorImagesCategorieDo
	Or(conds ...gen.Condition) IEditorImagesCategorieDo
	Select(conds ...field.Expr) IEditorImagesCategorieDo
	Where(conds ...gen.Condition) IEditorImagesCategorieDo
	Order(conds ...field.Expr) IEditorImagesCategorieDo
	Distinct(cols ...field.Expr) IEditorImagesCategorieDo
	Omit(cols ...field.Expr) IEditorImagesCategorieDo
	Join(table schema.Tabler, on ...field.Expr) IEditorImagesCategorieDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEditorImagesCategorieDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEditorImagesCategorieDo
	Group(cols ...field.Expr) IEditorImagesCategorieDo
	Having(conds ...gen.Condition) IEditorImagesCategorieDo
	Limit(limit int) IEditorImagesCategorieDo
	Offset(offset int) IEditorImagesCategorieDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEditorImagesCategorieDo
	Unscoped() IEditorImagesCategorieDo
	Create(values ...*table.EditorImagesCategorie) error
	CreateInBatches(values []*table.EditorImagesCategorie, batchSize int) error
	Save(values ...*table.EditorImagesCategorie) error
	First() (*table.EditorImagesCategorie, error)
	Take() (*table.EditorImagesCategorie, error)
	Last() (*table.EditorImagesCategorie, error)
	Find() ([]*table.EditorImagesCategorie, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.EditorImagesCategorie, err error)
	FindInBatches(result *[]*table.EditorImagesCategorie, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.EditorImagesCategorie) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEditorImagesCategorieDo
	Assign(attrs ...field.AssignExpr) IEditorImagesCategorieDo
	Joins(fields ...field.RelationField) IEditorImagesCategorieDo
	Preload(fields ...field.RelationField) IEditorImagesCategorieDo
	FirstOrInit() (*table.EditorImagesCategorie, error)
	FirstOrCreate() (*table.EditorImagesCategorie, error)
	FindByPage(offset int, limit int) (result []*table.EditorImagesCategorie, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEditorImagesCategorieDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e editorImagesCategorieDo) Debug() IEditorImagesCategorieDo {
	return e.withDO(e.DO.Debug())
}

func (e editorImagesCategorieDo) WithContext(ctx context.Context) IEditorImagesCategorieDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e editorImagesCategorieDo) ReadDB() IEditorImagesCategorieDo {
	return e.Clauses(dbresolver.Read)
}

func (e editorImagesCategorieDo) WriteDB() IEditorImagesCategorieDo {
	return e.Clauses(dbresolver.Write)
}

func (e editorImagesCategorieDo) Session(config *gorm.Session) IEditorImagesCategorieDo {
	return e.withDO(e.DO.Session(config))
}

func (e editorImagesCategorieDo) Clauses(conds ...clause.Expression) IEditorImagesCategorieDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e editorImagesCategorieDo) Returning(value interface{}, columns ...string) IEditorImagesCategorieDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e editorImagesCategorieDo) Not(conds ...gen.Condition) IEditorImagesCategorieDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e editorImagesCategorieDo) Or(conds ...gen.Condition) IEditorImagesCategorieDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e editorImagesCategorieDo) Select(conds ...field.Expr) IEditorImagesCategorieDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e editorImagesCategorieDo) Where(conds ...gen.Condition) IEditorImagesCategorieDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e editorImagesCategorieDo) Order(conds ...field.Expr) IEditorImagesCategorieDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e editorImagesCategorieDo) Distinct(cols ...field.Expr) IEditorImagesCategorieDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e editorImagesCategorieDo) Omit(cols ...field.Expr) IEditorImagesCategorieDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e editorImagesCategorieDo) Join(table schema.Tabler, on ...field.Expr) IEditorImagesCategorieDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e editorImagesCategorieDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEditorImagesCategorieDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e editorImagesCategorieDo) RightJoin(table schema.Tabler, on ...field.Expr) IEditorImagesCategorieDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e editorImagesCategorieDo) Group(cols ...field.Expr) IEditorImagesCategorieDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e editorImagesCategorieDo) Having(conds ...gen.Condition) IEditorImagesCategorieDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e editorImagesCategorieDo) Limit(limit int) IEditorImagesCategorieDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e editorImagesCategorieDo) Offset(offset int) IEditorImagesCategorieDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e editorImagesCategorieDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEditorImagesCategorieDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e editorImagesCategorieDo) Unscoped() IEditorImagesCategorieDo {
	return e.withDO(e.DO.Unscoped())
}

func (e editorImagesCategorieDo) Create(values ...*table.EditorImagesCategorie) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e editorImagesCategorieDo) CreateInBatches(values []*table.EditorImagesCategorie, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e editorImagesCategorieDo) Save(values ...*table.EditorImagesCategorie) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e editorImagesCategorieDo) First() (*table.EditorImagesCategorie, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorImagesCategorie), nil
	}
}

func (e editorImagesCategorieDo) Take() (*table.EditorImagesCategorie, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorImagesCategorie), nil
	}
}

func (e editorImagesCategorieDo) Last() (*table.EditorImagesCategorie, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorImagesCategorie), nil
	}
}

func (e editorImagesCategorieDo) Find() ([]*table.EditorImagesCategorie, error) {
	result, err := e.DO.Find()
	return result.([]*table.EditorImagesCategorie), err
}

func (e editorImagesCategorieDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.EditorImagesCategorie, err error) {
	buf := make([]*table.EditorImagesCategorie, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e editorImagesCategorieDo) FindInBatches(result *[]*table.EditorImagesCategorie, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e editorImagesCategorieDo) Attrs(attrs ...field.AssignExpr) IEditorImagesCategorieDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e editorImagesCategorieDo) Assign(attrs ...field.AssignExpr) IEditorImagesCategorieDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e editorImagesCategorieDo) Joins(fields ...field.RelationField) IEditorImagesCategorieDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e editorImagesCategorieDo) Preload(fields ...field.RelationField) IEditorImagesCategorieDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e editorImagesCategorieDo) FirstOrInit() (*table.EditorImagesCategorie, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorImagesCategorie), nil
	}
}

func (e editorImagesCategorieDo) FirstOrCreate() (*table.EditorImagesCategorie, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.EditorImagesCategorie), nil
	}
}

func (e editorImagesCategorieDo) FindByPage(offset int, limit int) (result []*table.EditorImagesCategorie, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e editorImagesCategorieDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e editorImagesCategorieDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e editorImagesCategorieDo) Delete(models ...*table.EditorImagesCategorie) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *editorImagesCategorieDo) withDO(do gen.Dao) *editorImagesCategorieDo {
	e.DO = *do.(*gen.DO)
	return e
}
