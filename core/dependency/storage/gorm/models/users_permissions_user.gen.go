// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newUsersPermissionsUser(db *gorm.DB, opts ...gen.DOOption) usersPermissionsUser {
	_usersPermissionsUser := usersPermissionsUser{}

	_usersPermissionsUser.usersPermissionsUserDo.UseDB(db, opts...)
	_usersPermissionsUser.usersPermissionsUserDo.UseModel(&table.UsersPermissionsUser{})

	tableName := _usersPermissionsUser.usersPermissionsUserDo.TableName()
	_usersPermissionsUser.ALL = field.NewAsterisk(tableName)
	_usersPermissionsUser.ID = field.NewInt32(tableName, "id")
	_usersPermissionsUser.Username = field.NewString(tableName, "username")
	_usersPermissionsUser.Email = field.NewString(tableName, "email")
	_usersPermissionsUser.Provider = field.NewString(tableName, "provider")
	_usersPermissionsUser.Password = field.NewString(tableName, "password")
	_usersPermissionsUser.ResetPasswordToken = field.NewString(tableName, "resetPasswordToken")
	_usersPermissionsUser.ConfirmationToken = field.NewString(tableName, "confirmationToken")
	_usersPermissionsUser.Confirmed = field.NewBool(tableName, "confirmed")
	_usersPermissionsUser.Blocked = field.NewBool(tableName, "blocked")
	_usersPermissionsUser.Role = field.NewInt32(tableName, "role")
	_usersPermissionsUser.UserProfile = field.NewInt32(tableName, "userProfile")
	_usersPermissionsUser.Subscription = field.NewInt32(tableName, "subscription")
	_usersPermissionsUser.CreatedBy = field.NewInt32(tableName, "created_by")
	_usersPermissionsUser.UpdatedBy = field.NewInt32(tableName, "updated_by")
	_usersPermissionsUser.CreatedAt = field.NewTime(tableName, "created_at")
	_usersPermissionsUser.UpdatedAt = field.NewTime(tableName, "updated_at")
	_usersPermissionsUser.OrgTeacher = field.NewInt32(tableName, "org_teacher")
	_usersPermissionsUser.OrgAdmin = field.NewInt32(tableName, "org_admin")

	_usersPermissionsUser.fillFieldMap()

	return _usersPermissionsUser
}

type usersPermissionsUser struct {
	usersPermissionsUserDo

	ALL                field.Asterisk
	ID                 field.Int32
	Username           field.String
	Email              field.String
	Provider           field.String
	Password           field.String
	ResetPasswordToken field.String
	ConfirmationToken  field.String
	Confirmed          field.Bool
	Blocked            field.Bool
	Role               field.Int32
	UserProfile        field.Int32
	Subscription       field.Int32
	CreatedBy          field.Int32
	UpdatedBy          field.Int32
	CreatedAt          field.Time
	UpdatedAt          field.Time
	OrgTeacher         field.Int32
	OrgAdmin           field.Int32

	fieldMap map[string]field.Expr
}

func (u usersPermissionsUser) Table(newTableName string) *usersPermissionsUser {
	u.usersPermissionsUserDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u usersPermissionsUser) As(alias string) *usersPermissionsUser {
	u.usersPermissionsUserDo.DO = *(u.usersPermissionsUserDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *usersPermissionsUser) updateTableName(table string) *usersPermissionsUser {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.Username = field.NewString(table, "username")
	u.Email = field.NewString(table, "email")
	u.Provider = field.NewString(table, "provider")
	u.Password = field.NewString(table, "password")
	u.ResetPasswordToken = field.NewString(table, "resetPasswordToken")
	u.ConfirmationToken = field.NewString(table, "confirmationToken")
	u.Confirmed = field.NewBool(table, "confirmed")
	u.Blocked = field.NewBool(table, "blocked")
	u.Role = field.NewInt32(table, "role")
	u.UserProfile = field.NewInt32(table, "userProfile")
	u.Subscription = field.NewInt32(table, "subscription")
	u.CreatedBy = field.NewInt32(table, "created_by")
	u.UpdatedBy = field.NewInt32(table, "updated_by")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.OrgTeacher = field.NewInt32(table, "org_teacher")
	u.OrgAdmin = field.NewInt32(table, "org_admin")

	u.fillFieldMap()

	return u
}

func (u *usersPermissionsUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *usersPermissionsUser) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 18)
	u.fieldMap["id"] = u.ID
	u.fieldMap["username"] = u.Username
	u.fieldMap["email"] = u.Email
	u.fieldMap["provider"] = u.Provider
	u.fieldMap["password"] = u.Password
	u.fieldMap["resetPasswordToken"] = u.ResetPasswordToken
	u.fieldMap["confirmationToken"] = u.ConfirmationToken
	u.fieldMap["confirmed"] = u.Confirmed
	u.fieldMap["blocked"] = u.Blocked
	u.fieldMap["role"] = u.Role
	u.fieldMap["userProfile"] = u.UserProfile
	u.fieldMap["subscription"] = u.Subscription
	u.fieldMap["created_by"] = u.CreatedBy
	u.fieldMap["updated_by"] = u.UpdatedBy
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["org_teacher"] = u.OrgTeacher
	u.fieldMap["org_admin"] = u.OrgAdmin
}

func (u usersPermissionsUser) clone(db *gorm.DB) usersPermissionsUser {
	u.usersPermissionsUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u usersPermissionsUser) replaceDB(db *gorm.DB) usersPermissionsUser {
	u.usersPermissionsUserDo.ReplaceDB(db)
	return u
}

type usersPermissionsUserDo struct{ gen.DO }

type IUsersPermissionsUserDo interface {
	gen.SubQuery
	Debug() IUsersPermissionsUserDo
	WithContext(ctx context.Context) IUsersPermissionsUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUsersPermissionsUserDo
	WriteDB() IUsersPermissionsUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUsersPermissionsUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUsersPermissionsUserDo
	Not(conds ...gen.Condition) IUsersPermissionsUserDo
	Or(conds ...gen.Condition) IUsersPermissionsUserDo
	Select(conds ...field.Expr) IUsersPermissionsUserDo
	Where(conds ...gen.Condition) IUsersPermissionsUserDo
	Order(conds ...field.Expr) IUsersPermissionsUserDo
	Distinct(cols ...field.Expr) IUsersPermissionsUserDo
	Omit(cols ...field.Expr) IUsersPermissionsUserDo
	Join(table schema.Tabler, on ...field.Expr) IUsersPermissionsUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUsersPermissionsUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUsersPermissionsUserDo
	Group(cols ...field.Expr) IUsersPermissionsUserDo
	Having(conds ...gen.Condition) IUsersPermissionsUserDo
	Limit(limit int) IUsersPermissionsUserDo
	Offset(offset int) IUsersPermissionsUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUsersPermissionsUserDo
	Unscoped() IUsersPermissionsUserDo
	Create(values ...*table.UsersPermissionsUser) error
	CreateInBatches(values []*table.UsersPermissionsUser, batchSize int) error
	Save(values ...*table.UsersPermissionsUser) error
	First() (*table.UsersPermissionsUser, error)
	Take() (*table.UsersPermissionsUser, error)
	Last() (*table.UsersPermissionsUser, error)
	Find() ([]*table.UsersPermissionsUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.UsersPermissionsUser, err error)
	FindInBatches(result *[]*table.UsersPermissionsUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.UsersPermissionsUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUsersPermissionsUserDo
	Assign(attrs ...field.AssignExpr) IUsersPermissionsUserDo
	Joins(fields ...field.RelationField) IUsersPermissionsUserDo
	Preload(fields ...field.RelationField) IUsersPermissionsUserDo
	FirstOrInit() (*table.UsersPermissionsUser, error)
	FirstOrCreate() (*table.UsersPermissionsUser, error)
	FindByPage(offset int, limit int) (result []*table.UsersPermissionsUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUsersPermissionsUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u usersPermissionsUserDo) Debug() IUsersPermissionsUserDo {
	return u.withDO(u.DO.Debug())
}

func (u usersPermissionsUserDo) WithContext(ctx context.Context) IUsersPermissionsUserDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u usersPermissionsUserDo) ReadDB() IUsersPermissionsUserDo {
	return u.Clauses(dbresolver.Read)
}

func (u usersPermissionsUserDo) WriteDB() IUsersPermissionsUserDo {
	return u.Clauses(dbresolver.Write)
}

func (u usersPermissionsUserDo) Session(config *gorm.Session) IUsersPermissionsUserDo {
	return u.withDO(u.DO.Session(config))
}

func (u usersPermissionsUserDo) Clauses(conds ...clause.Expression) IUsersPermissionsUserDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u usersPermissionsUserDo) Returning(value interface{}, columns ...string) IUsersPermissionsUserDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u usersPermissionsUserDo) Not(conds ...gen.Condition) IUsersPermissionsUserDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u usersPermissionsUserDo) Or(conds ...gen.Condition) IUsersPermissionsUserDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u usersPermissionsUserDo) Select(conds ...field.Expr) IUsersPermissionsUserDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u usersPermissionsUserDo) Where(conds ...gen.Condition) IUsersPermissionsUserDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u usersPermissionsUserDo) Order(conds ...field.Expr) IUsersPermissionsUserDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u usersPermissionsUserDo) Distinct(cols ...field.Expr) IUsersPermissionsUserDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u usersPermissionsUserDo) Omit(cols ...field.Expr) IUsersPermissionsUserDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u usersPermissionsUserDo) Join(table schema.Tabler, on ...field.Expr) IUsersPermissionsUserDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u usersPermissionsUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUsersPermissionsUserDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u usersPermissionsUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IUsersPermissionsUserDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u usersPermissionsUserDo) Group(cols ...field.Expr) IUsersPermissionsUserDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u usersPermissionsUserDo) Having(conds ...gen.Condition) IUsersPermissionsUserDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u usersPermissionsUserDo) Limit(limit int) IUsersPermissionsUserDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u usersPermissionsUserDo) Offset(offset int) IUsersPermissionsUserDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u usersPermissionsUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUsersPermissionsUserDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u usersPermissionsUserDo) Unscoped() IUsersPermissionsUserDo {
	return u.withDO(u.DO.Unscoped())
}

func (u usersPermissionsUserDo) Create(values ...*table.UsersPermissionsUser) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u usersPermissionsUserDo) CreateInBatches(values []*table.UsersPermissionsUser, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u usersPermissionsUserDo) Save(values ...*table.UsersPermissionsUser) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u usersPermissionsUserDo) First() (*table.UsersPermissionsUser, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.UsersPermissionsUser), nil
	}
}

func (u usersPermissionsUserDo) Take() (*table.UsersPermissionsUser, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.UsersPermissionsUser), nil
	}
}

func (u usersPermissionsUserDo) Last() (*table.UsersPermissionsUser, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.UsersPermissionsUser), nil
	}
}

func (u usersPermissionsUserDo) Find() ([]*table.UsersPermissionsUser, error) {
	result, err := u.DO.Find()
	return result.([]*table.UsersPermissionsUser), err
}

func (u usersPermissionsUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.UsersPermissionsUser, err error) {
	buf := make([]*table.UsersPermissionsUser, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u usersPermissionsUserDo) FindInBatches(result *[]*table.UsersPermissionsUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u usersPermissionsUserDo) Attrs(attrs ...field.AssignExpr) IUsersPermissionsUserDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u usersPermissionsUserDo) Assign(attrs ...field.AssignExpr) IUsersPermissionsUserDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u usersPermissionsUserDo) Joins(fields ...field.RelationField) IUsersPermissionsUserDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u usersPermissionsUserDo) Preload(fields ...field.RelationField) IUsersPermissionsUserDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u usersPermissionsUserDo) FirstOrInit() (*table.UsersPermissionsUser, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.UsersPermissionsUser), nil
	}
}

func (u usersPermissionsUserDo) FirstOrCreate() (*table.UsersPermissionsUser, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.UsersPermissionsUser), nil
	}
}

func (u usersPermissionsUserDo) FindByPage(offset int, limit int) (result []*table.UsersPermissionsUser, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u usersPermissionsUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u usersPermissionsUserDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u usersPermissionsUserDo) Delete(models ...*table.UsersPermissionsUser) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *usersPermissionsUserDo) withDO(do gen.Dao) *usersPermissionsUserDo {
	u.DO = *do.(*gen.DO)
	return u
}
