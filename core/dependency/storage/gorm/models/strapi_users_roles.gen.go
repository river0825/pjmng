// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newStrapiUsersRole(db *gorm.DB, opts ...gen.DOOption) strapiUsersRole {
	_strapiUsersRole := strapiUsersRole{}

	_strapiUsersRole.strapiUsersRoleDo.UseDB(db, opts...)
	_strapiUsersRole.strapiUsersRoleDo.UseModel(&table.StrapiUsersRole{})

	tableName := _strapiUsersRole.strapiUsersRoleDo.TableName()
	_strapiUsersRole.ALL = field.NewAsterisk(tableName)
	_strapiUsersRole.ID = field.NewInt32(tableName, "id")
	_strapiUsersRole.UserID = field.NewInt32(tableName, "user_id")
	_strapiUsersRole.RoleID = field.NewInt32(tableName, "role_id")

	_strapiUsersRole.fillFieldMap()

	return _strapiUsersRole
}

type strapiUsersRole struct {
	strapiUsersRoleDo

	ALL    field.Asterisk
	ID     field.Int32
	UserID field.Int32
	RoleID field.Int32

	fieldMap map[string]field.Expr
}

func (s strapiUsersRole) Table(newTableName string) *strapiUsersRole {
	s.strapiUsersRoleDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s strapiUsersRole) As(alias string) *strapiUsersRole {
	s.strapiUsersRoleDo.DO = *(s.strapiUsersRoleDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *strapiUsersRole) updateTableName(table string) *strapiUsersRole {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.UserID = field.NewInt32(table, "user_id")
	s.RoleID = field.NewInt32(table, "role_id")

	s.fillFieldMap()

	return s
}

func (s *strapiUsersRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *strapiUsersRole) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["role_id"] = s.RoleID
}

func (s strapiUsersRole) clone(db *gorm.DB) strapiUsersRole {
	s.strapiUsersRoleDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s strapiUsersRole) replaceDB(db *gorm.DB) strapiUsersRole {
	s.strapiUsersRoleDo.ReplaceDB(db)
	return s
}

type strapiUsersRoleDo struct{ gen.DO }

type IStrapiUsersRoleDo interface {
	gen.SubQuery
	Debug() IStrapiUsersRoleDo
	WithContext(ctx context.Context) IStrapiUsersRoleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStrapiUsersRoleDo
	WriteDB() IStrapiUsersRoleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStrapiUsersRoleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStrapiUsersRoleDo
	Not(conds ...gen.Condition) IStrapiUsersRoleDo
	Or(conds ...gen.Condition) IStrapiUsersRoleDo
	Select(conds ...field.Expr) IStrapiUsersRoleDo
	Where(conds ...gen.Condition) IStrapiUsersRoleDo
	Order(conds ...field.Expr) IStrapiUsersRoleDo
	Distinct(cols ...field.Expr) IStrapiUsersRoleDo
	Omit(cols ...field.Expr) IStrapiUsersRoleDo
	Join(table schema.Tabler, on ...field.Expr) IStrapiUsersRoleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStrapiUsersRoleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStrapiUsersRoleDo
	Group(cols ...field.Expr) IStrapiUsersRoleDo
	Having(conds ...gen.Condition) IStrapiUsersRoleDo
	Limit(limit int) IStrapiUsersRoleDo
	Offset(offset int) IStrapiUsersRoleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStrapiUsersRoleDo
	Unscoped() IStrapiUsersRoleDo
	Create(values ...*table.StrapiUsersRole) error
	CreateInBatches(values []*table.StrapiUsersRole, batchSize int) error
	Save(values ...*table.StrapiUsersRole) error
	First() (*table.StrapiUsersRole, error)
	Take() (*table.StrapiUsersRole, error)
	Last() (*table.StrapiUsersRole, error)
	Find() ([]*table.StrapiUsersRole, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.StrapiUsersRole, err error)
	FindInBatches(result *[]*table.StrapiUsersRole, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.StrapiUsersRole) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStrapiUsersRoleDo
	Assign(attrs ...field.AssignExpr) IStrapiUsersRoleDo
	Joins(fields ...field.RelationField) IStrapiUsersRoleDo
	Preload(fields ...field.RelationField) IStrapiUsersRoleDo
	FirstOrInit() (*table.StrapiUsersRole, error)
	FirstOrCreate() (*table.StrapiUsersRole, error)
	FindByPage(offset int, limit int) (result []*table.StrapiUsersRole, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStrapiUsersRoleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s strapiUsersRoleDo) Debug() IStrapiUsersRoleDo {
	return s.withDO(s.DO.Debug())
}

func (s strapiUsersRoleDo) WithContext(ctx context.Context) IStrapiUsersRoleDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s strapiUsersRoleDo) ReadDB() IStrapiUsersRoleDo {
	return s.Clauses(dbresolver.Read)
}

func (s strapiUsersRoleDo) WriteDB() IStrapiUsersRoleDo {
	return s.Clauses(dbresolver.Write)
}

func (s strapiUsersRoleDo) Session(config *gorm.Session) IStrapiUsersRoleDo {
	return s.withDO(s.DO.Session(config))
}

func (s strapiUsersRoleDo) Clauses(conds ...clause.Expression) IStrapiUsersRoleDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s strapiUsersRoleDo) Returning(value interface{}, columns ...string) IStrapiUsersRoleDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s strapiUsersRoleDo) Not(conds ...gen.Condition) IStrapiUsersRoleDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s strapiUsersRoleDo) Or(conds ...gen.Condition) IStrapiUsersRoleDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s strapiUsersRoleDo) Select(conds ...field.Expr) IStrapiUsersRoleDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s strapiUsersRoleDo) Where(conds ...gen.Condition) IStrapiUsersRoleDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s strapiUsersRoleDo) Order(conds ...field.Expr) IStrapiUsersRoleDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s strapiUsersRoleDo) Distinct(cols ...field.Expr) IStrapiUsersRoleDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s strapiUsersRoleDo) Omit(cols ...field.Expr) IStrapiUsersRoleDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s strapiUsersRoleDo) Join(table schema.Tabler, on ...field.Expr) IStrapiUsersRoleDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s strapiUsersRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStrapiUsersRoleDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s strapiUsersRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) IStrapiUsersRoleDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s strapiUsersRoleDo) Group(cols ...field.Expr) IStrapiUsersRoleDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s strapiUsersRoleDo) Having(conds ...gen.Condition) IStrapiUsersRoleDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s strapiUsersRoleDo) Limit(limit int) IStrapiUsersRoleDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s strapiUsersRoleDo) Offset(offset int) IStrapiUsersRoleDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s strapiUsersRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStrapiUsersRoleDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s strapiUsersRoleDo) Unscoped() IStrapiUsersRoleDo {
	return s.withDO(s.DO.Unscoped())
}

func (s strapiUsersRoleDo) Create(values ...*table.StrapiUsersRole) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s strapiUsersRoleDo) CreateInBatches(values []*table.StrapiUsersRole, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s strapiUsersRoleDo) Save(values ...*table.StrapiUsersRole) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s strapiUsersRoleDo) First() (*table.StrapiUsersRole, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.StrapiUsersRole), nil
	}
}

func (s strapiUsersRoleDo) Take() (*table.StrapiUsersRole, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.StrapiUsersRole), nil
	}
}

func (s strapiUsersRoleDo) Last() (*table.StrapiUsersRole, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.StrapiUsersRole), nil
	}
}

func (s strapiUsersRoleDo) Find() ([]*table.StrapiUsersRole, error) {
	result, err := s.DO.Find()
	return result.([]*table.StrapiUsersRole), err
}

func (s strapiUsersRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.StrapiUsersRole, err error) {
	buf := make([]*table.StrapiUsersRole, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s strapiUsersRoleDo) FindInBatches(result *[]*table.StrapiUsersRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s strapiUsersRoleDo) Attrs(attrs ...field.AssignExpr) IStrapiUsersRoleDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s strapiUsersRoleDo) Assign(attrs ...field.AssignExpr) IStrapiUsersRoleDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s strapiUsersRoleDo) Joins(fields ...field.RelationField) IStrapiUsersRoleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s strapiUsersRoleDo) Preload(fields ...field.RelationField) IStrapiUsersRoleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s strapiUsersRoleDo) FirstOrInit() (*table.StrapiUsersRole, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.StrapiUsersRole), nil
	}
}

func (s strapiUsersRoleDo) FirstOrCreate() (*table.StrapiUsersRole, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.StrapiUsersRole), nil
	}
}

func (s strapiUsersRoleDo) FindByPage(offset int, limit int) (result []*table.StrapiUsersRole, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s strapiUsersRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s strapiUsersRoleDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s strapiUsersRoleDo) Delete(models ...*table.StrapiUsersRole) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *strapiUsersRoleDo) withDO(do gen.Dao) *strapiUsersRoleDo {
	s.DO = *do.(*gen.DO)
	return s
}
