// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"river0825/cleanarchitecture/core/dependency/storage/gorm/table"
)

func newMaterialContent(db *gorm.DB, opts ...gen.DOOption) materialContent {
	_materialContent := materialContent{}

	_materialContent.materialContentDo.UseDB(db, opts...)
	_materialContent.materialContentDo.UseModel(&table.MaterialContent{})

	tableName := _materialContent.materialContentDo.TableName()
	_materialContent.ALL = field.NewAsterisk(tableName)
	_materialContent.ID = field.NewInt32(tableName, "id")
	_materialContent.PageID = field.NewString(tableName, "page_id")
	_materialContent.Content = field.NewField(tableName, "content")
	_materialContent.Order_ = field.NewInt32(tableName, "order")
	_materialContent.CreatedBy = field.NewInt32(tableName, "created_by")
	_materialContent.UpdatedBy = field.NewInt32(tableName, "updated_by")
	_materialContent.CreatedAt = field.NewTime(tableName, "created_at")
	_materialContent.UpdatedAt = field.NewTime(tableName, "updated_at")

	_materialContent.fillFieldMap()

	return _materialContent
}

type materialContent struct {
	materialContentDo

	ALL       field.Asterisk
	ID        field.Int32
	PageID    field.String
	Content   field.Field
	Order_    field.Int32
	CreatedBy field.Int32
	UpdatedBy field.Int32
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (m materialContent) Table(newTableName string) *materialContent {
	m.materialContentDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m materialContent) As(alias string) *materialContent {
	m.materialContentDo.DO = *(m.materialContentDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *materialContent) updateTableName(table string) *materialContent {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.PageID = field.NewString(table, "page_id")
	m.Content = field.NewField(table, "content")
	m.Order_ = field.NewInt32(table, "order")
	m.CreatedBy = field.NewInt32(table, "created_by")
	m.UpdatedBy = field.NewInt32(table, "updated_by")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")

	m.fillFieldMap()

	return m
}

func (m *materialContent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *materialContent) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 8)
	m.fieldMap["id"] = m.ID
	m.fieldMap["page_id"] = m.PageID
	m.fieldMap["content"] = m.Content
	m.fieldMap["order"] = m.Order_
	m.fieldMap["created_by"] = m.CreatedBy
	m.fieldMap["updated_by"] = m.UpdatedBy
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m materialContent) clone(db *gorm.DB) materialContent {
	m.materialContentDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m materialContent) replaceDB(db *gorm.DB) materialContent {
	m.materialContentDo.ReplaceDB(db)
	return m
}

type materialContentDo struct{ gen.DO }

type IMaterialContentDo interface {
	gen.SubQuery
	Debug() IMaterialContentDo
	WithContext(ctx context.Context) IMaterialContentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMaterialContentDo
	WriteDB() IMaterialContentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMaterialContentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMaterialContentDo
	Not(conds ...gen.Condition) IMaterialContentDo
	Or(conds ...gen.Condition) IMaterialContentDo
	Select(conds ...field.Expr) IMaterialContentDo
	Where(conds ...gen.Condition) IMaterialContentDo
	Order(conds ...field.Expr) IMaterialContentDo
	Distinct(cols ...field.Expr) IMaterialContentDo
	Omit(cols ...field.Expr) IMaterialContentDo
	Join(table schema.Tabler, on ...field.Expr) IMaterialContentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMaterialContentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMaterialContentDo
	Group(cols ...field.Expr) IMaterialContentDo
	Having(conds ...gen.Condition) IMaterialContentDo
	Limit(limit int) IMaterialContentDo
	Offset(offset int) IMaterialContentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMaterialContentDo
	Unscoped() IMaterialContentDo
	Create(values ...*table.MaterialContent) error
	CreateInBatches(values []*table.MaterialContent, batchSize int) error
	Save(values ...*table.MaterialContent) error
	First() (*table.MaterialContent, error)
	Take() (*table.MaterialContent, error)
	Last() (*table.MaterialContent, error)
	Find() ([]*table.MaterialContent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.MaterialContent, err error)
	FindInBatches(result *[]*table.MaterialContent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.MaterialContent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMaterialContentDo
	Assign(attrs ...field.AssignExpr) IMaterialContentDo
	Joins(fields ...field.RelationField) IMaterialContentDo
	Preload(fields ...field.RelationField) IMaterialContentDo
	FirstOrInit() (*table.MaterialContent, error)
	FirstOrCreate() (*table.MaterialContent, error)
	FindByPage(offset int, limit int) (result []*table.MaterialContent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMaterialContentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m materialContentDo) Debug() IMaterialContentDo {
	return m.withDO(m.DO.Debug())
}

func (m materialContentDo) WithContext(ctx context.Context) IMaterialContentDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m materialContentDo) ReadDB() IMaterialContentDo {
	return m.Clauses(dbresolver.Read)
}

func (m materialContentDo) WriteDB() IMaterialContentDo {
	return m.Clauses(dbresolver.Write)
}

func (m materialContentDo) Session(config *gorm.Session) IMaterialContentDo {
	return m.withDO(m.DO.Session(config))
}

func (m materialContentDo) Clauses(conds ...clause.Expression) IMaterialContentDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m materialContentDo) Returning(value interface{}, columns ...string) IMaterialContentDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m materialContentDo) Not(conds ...gen.Condition) IMaterialContentDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m materialContentDo) Or(conds ...gen.Condition) IMaterialContentDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m materialContentDo) Select(conds ...field.Expr) IMaterialContentDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m materialContentDo) Where(conds ...gen.Condition) IMaterialContentDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m materialContentDo) Order(conds ...field.Expr) IMaterialContentDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m materialContentDo) Distinct(cols ...field.Expr) IMaterialContentDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m materialContentDo) Omit(cols ...field.Expr) IMaterialContentDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m materialContentDo) Join(table schema.Tabler, on ...field.Expr) IMaterialContentDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m materialContentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMaterialContentDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m materialContentDo) RightJoin(table schema.Tabler, on ...field.Expr) IMaterialContentDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m materialContentDo) Group(cols ...field.Expr) IMaterialContentDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m materialContentDo) Having(conds ...gen.Condition) IMaterialContentDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m materialContentDo) Limit(limit int) IMaterialContentDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m materialContentDo) Offset(offset int) IMaterialContentDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m materialContentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMaterialContentDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m materialContentDo) Unscoped() IMaterialContentDo {
	return m.withDO(m.DO.Unscoped())
}

func (m materialContentDo) Create(values ...*table.MaterialContent) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m materialContentDo) CreateInBatches(values []*table.MaterialContent, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m materialContentDo) Save(values ...*table.MaterialContent) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m materialContentDo) First() (*table.MaterialContent, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.MaterialContent), nil
	}
}

func (m materialContentDo) Take() (*table.MaterialContent, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.MaterialContent), nil
	}
}

func (m materialContentDo) Last() (*table.MaterialContent, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.MaterialContent), nil
	}
}

func (m materialContentDo) Find() ([]*table.MaterialContent, error) {
	result, err := m.DO.Find()
	return result.([]*table.MaterialContent), err
}

func (m materialContentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.MaterialContent, err error) {
	buf := make([]*table.MaterialContent, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m materialContentDo) FindInBatches(result *[]*table.MaterialContent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m materialContentDo) Attrs(attrs ...field.AssignExpr) IMaterialContentDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m materialContentDo) Assign(attrs ...field.AssignExpr) IMaterialContentDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m materialContentDo) Joins(fields ...field.RelationField) IMaterialContentDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m materialContentDo) Preload(fields ...field.RelationField) IMaterialContentDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m materialContentDo) FirstOrInit() (*table.MaterialContent, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.MaterialContent), nil
	}
}

func (m materialContentDo) FirstOrCreate() (*table.MaterialContent, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.MaterialContent), nil
	}
}

func (m materialContentDo) FindByPage(offset int, limit int) (result []*table.MaterialContent, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m materialContentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m materialContentDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m materialContentDo) Delete(models ...*table.MaterialContent) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *materialContentDo) withDO(do gen.Dao) *materialContentDo {
	m.DO = *do.(*gen.DO)
	return m
}
